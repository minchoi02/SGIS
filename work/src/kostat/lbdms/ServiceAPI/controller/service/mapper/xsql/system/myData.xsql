<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myData">
	
	<!-- 나의 데이터 목록 조회 -->
	<sql id="orderSql">
		<choose>
			<when test="sort == '' || sort == null">
				ORDER BY data_create_time DESC
			</when>
			<otherwise>
				ORDER BY ${sort} ${order}
			</otherwise>
		</choose>
	</sql>
	<!-- 나의 데이터 목록 조회 -->
	<select id="getMyDataList" parameterType="hashmap" resultType="hashmap">
		SELECT
			
					 	COUNT(*) OVER() AS total
					, 	COALESCE(Q.resource_id, 0) as resource_id
					, 	COALESCE(Q.user_id, E.user_id) as user_id
					, 	COALESCE(Q.data_size, '0 K') as data_size
					,	COALESCE(Q.data_cnt, '0') as data_cnt
					,	COALESCE(Q.data_create_time, TO_CHAR(E.start_time,'YYYY-MM-DD HH24:MI:SS')) as data_create_time
					,	COALESCE(Q.last_used_time, '') as last_used_time
					, 	COALESCE(Q.category1, E.category1) as category1
					,	COALESCE(Q.category2, E.category2) as category2
					,	COALESCE(Q.category3, E.category3) as category3
					, 	COALESCE(Q.category4, E.category4) as category4
					, 	COALESCE(Q.description, E.desc_nm) as description
					,	COALESCE(Q.kor_data_nm, '') as kor_data_nm
					, 	COALESCE(Q.data_name, E.data_nm) as data_name
					, 	COALESCE(Q.action_type, E.action_type) as action_type
					, 	COALESCE(Q.download_apply, '0') as download_apply
					, 	COALESCE(Q.inst_share_yn, 'N') as inst_share_yn
					, 	COALESCE(Q.fav_yn, 'N') as fav_yn
					, 	COALESCE(Q.pos_column_desc, '') as pos_column_desc
					, 	COALESCE(Q.kor_column_desc, '') as kor_column_desc
					, 	COALESCE(E.state , 'NONE') as state
					,   COALESCE(E.execute_id , '0') as execute_id
					,   COALESCE(E.analysis_type , '') as analysis_type
					, 	COALESCE(TO_CHAR(E.start_time,'YYYY-MM-DD HH24:MI:SS'), '') as start_time
					, 	COALESCE(TO_CHAR(E.end_time,'YYYY-MM-DD HH24:MI:SS'), '') as end_time
		FROM (
			SELECT
					  resource_id
					, user_id
					, data_storage_type
					, data_path
					, case when data_size > cast(1099511627776 as bigint) then round(data_size / 1024 / 1024 / 1024 / 1024::numeric, 1) || ' TB'
					  	   when data_size > cast(1073741824 as bigint) then round(data_size / 1024 / 1024 / 1024::numeric, 1) || ' GB'
					       when data_size > cast(1048576 as bigint) then round(data_size / 1024 / 1024::numeric, 1) || ' MB'
					       when data_size > cast(1024 as bigint) then round(data_size / 1024::numeric, 1) || ' KB'
					       else data_size || ' B'
					  end data_size
					, data_cnt
					, TO_CHAR(data_create_time,'YYYY-MM-DD HH24:MI:SS') as data_create_time 
					, TO_CHAR(last_used_time,'YYYY-MM-DD HH24:MI:SS') as last_used_time
					, category1
					, category2
					, category3
					, category4
					, description
					, kor_data_nm
					, relation_resource_id
					, data_nm as data_name
					, COALESCE(action_type,'') as action_type
					, download_apply
					, inst_share_yn
					, COALESCE(fav_yn,'N') as fav_yn
					, pos_column_desc
					, kor_column_desc
			FROM  RESOURCE
			WHERE  1=1
			AND (action_type != 'CREATE_GIS' AND action_type != 'CREATE_POI' AND action_type != 'CREATE_ROAD' OR action_type IS NULL)
			AND data_nm IS NOT NULL
			<!-- AND action_type != 'CREATE_GIS' and action_type != 'CREATE_POI' -->
			<if test="user_id != null and user_id != ''">
				AND  user_id =#{user_id}
			</if>
			<if test="shared != null and shared !=''">
				AND inst_share_yn = #{shared}
			</if>
			 
			) Q
			
		FULL OUTER JOIN
			( 
				SELECT 
								A.*
							,	B.analysis_type
				FROM EXECUTE A LEFT JOIN ANALYSIS_PARAM B
				ON A.execute_id = B.execute_id 
				WHERE 
				1=1
				<if test="user_id != null and user_id != ''">
					and A.user_id =#{user_id}
				</if>
				<if test="shared != null and shared !=''">
					and A.state = 'END'
				</if>
				and A.category4 = 'ANALYSIS_2016'
			) E
		On Q.data_name = E.data_nm 
		
		WHERE 1=1
		<!-- AND Q.action_type != 'CREATE_GIS' and Q.action_type != 'CREATE_POI' -->
		<if test="shared != null and shared !=''">
				AND inst_share_yn = #{shared}
		</if>
		<if test="searchWord != null and searchWord != ''">
			AND Q.description LIKE '%' || #{searchWord} || '%'
		</if>
		
		<if test="standard != null and standard != '' and standard != 'all' ">
			<choose>
				<when test="standard == 'geoCoding'">
					AND (Q.action_type = 'MAPPING' or Q.action_type = 'COORD')  
				</when>
				<when test="standard == 'analysis'">
					AND (Q.category4 = 'ANALYSIS_2016' or Q.category4 = 'SOP2016' or E.state = 'RUNNING' or E.state = 'FAIL')  
				</when>
				<when test="standard == 'inst_share_yn'">
					AND Q.inst_share_yn = 'Y'  
				</when>
				<when test="standard == 'fav_yn'">
					AND Q.fav_yn = 'Y'  
				</when>
				<when test="standard == 'userData'">
					AND Q.category4 = 'STORAGE'  
				</when>
				<otherwise>
					AND (Q.category4 != 'ANALYSIS_2016' and Q.category4 != 'SOP2016' and 
					         Q.action_type != 'MAPPING' and Q.action_type != 'COORD' and 
					         Q.action_type != 'CREATE_GIS' and Q.action_type != 'CREATE_POI' and  Q.action_type != 'CREATE_ROAD')  
				</otherwise>
			</choose>
		</if>
		
			
		<include refid="orderSql"/> 
		<!-- order by resource_id -->
		OFFSET #{startIdx} LIMIT #{resultCnt}
	</select>
	
	<!-- 나의 데이터 입력 -->
	<insert id="insertMyData" parameterType="hashmap">
		INSERT INTO resource
			(resource_id, 
			 user_id 			
			, data_storage_type 	
			, data_path 			
			, data_size 			
			, data_cnt 			
			, last_used_time 		
			, category1 	
			, category2 	
			, category3 	
			, category4 	
			, description 
<!-- 			, relation_resource_id  -->
			, data_nm
			, action_type
			, x_column
			, y_column
			, pos_column_desc
			<if test="kor_column_desc != null or kor_column_desc !=''">
				,kor_column_desc
			</if>
			)
			VALUES 
			(nextval('resource_resource_id_seq'), 
			 #{user_id}
			, #{data_storage_type}
			, #{data_path}
			, #{data_size}
			, #{data_cnt}
			, now()
			, #{category1}
			, #{category2}
			, #{category3}
			, #{category4}
			, #{description}
<!-- 			, #{relation_resource_id} -->
			, #{data_name}
			, #{action_type}
			, #{x_column}
			, #{y_column}
			, #{pos_column_desc}
			<if test="kor_column_desc != null or kor_column_desc !=''">
				,#{kor_column_desc}
			</if>
			);
	</insert>
	
	<!-- 나의 데이터 입력 -->
	<insert id="copyMyData" parameterType="hashmap">
		INSERT INTO resource
			(
				resource_id, user_id, data_storage_type, data_path, data_cnt, 
				data_create_time, last_used_time, category1, category2, category3, 
				category4, description, relation_resource_id, data_nm, action_type, 
				data_size, download_apply, x_column, y_column, inst_share_yn, 
				inst_seq, pos_column_desc, legend_info, delete_status, delete_fail_log, 
				geometry_type, kor_column_desc, kor_data_nm, fav_yn
			)
		select 
			nextval('resource_resource_id_seq'), 
			#{user_id}, data_storage_type, data_path, data_cnt, 
			now(), now(), category1, category2, category3, 
			category4, #{description}, relation_resource_id, #{data_name}, action_type, 
			data_size, download_apply, x_column, y_column, inst_share_yn, 
			inst_seq, pos_column_desc, legend_info, null, null, 
			geometry_type, kor_column_desc, #{description}, 'N'
		from resource where resource_id = #{resource_id}
	</insert>
	
	<select id="getMyDataInfo" parameterType="String" resultType="hashmap">
		select a.*, (select execute_id from execute where output_resource_id = cast(a.resource_id as character varying) limit 1) as execute_id from resource a where resource_id = CAST(nullif(#{value}, '') AS integer)
	</select>
	
	<select id="searchMyDataInfo" parameterType="hashmap" resultType="hashmap">
		select * from resource where
			1=1 
			<if test="user_id != null and user_id !=''">
				and user_id = #{user_id}
			</if>
<!-- 			<if test="relation_resource_id != null and relation_resource_id !=''">
				and relation_resource_id = #{relation_resource_id}
			</if> -->

 			<if test="data_nm != null and data_nm !=''">
				and data_nm = #{data_nm}
			</if>

			
			<if test="resource_id != null and resource_id !=''">
				and resource_id =  CAST(#{resource_id} AS INTEGER)
			</if>
	</select>
	
	 <!-- resource id 조회2 -->
    <select id="selectResourceId2" parameterType="hashMap" resultType="int">
    	SELECT 
			RESOURCE_ID
		FROM RESOURCE
		WHERE DATA_NM = #{ data_nm }
		AND USER_ID = #{ user_id }
		LIMIT 1 	
    </select>
    
    <select id="selectResourceKorColumnInfo" parameterType="String" resultType="String">
    	SELECT 
    		kor_column_desc 
    	FROM RESOURCE
    	WHERE RESOURCE_ID = CAST(#{resource_id} AS INTEGER)
    </select> 
    
    <update id="updateKorColumnGridData" parameterType="hashMap">
    	update RESOURCE set kor_column_desc = #{columnInfo}
    	where resource_id = CAST(#{resource_id} AS INTEGER)
    </update>
	
	<update id="updateKorSubject" parameterType="hashMap">
		update RESOURCE set kor_data_nm = #{description}
		where resource_id = CAST(#{resource_id} AS INTEGER)
	</update>
	
	<select id="existsSubjectData" parameterType="hashmap" resultType="Integer">
		select count(*) from resource where user_id = #{user_id} and data_nm = #{data_subject}
	</select>
	
	
	<!-- 메인화면 대시보드 조회 -->
	<select id="getDashBoardList" parameterType="hashmap" resultType="hashmap">
			SELECT * FROM 
				(
					SELECT count(*) as orgDataCnt
					FROM  RESOURCE
					WHERE user_id = #{user_id}
					AND	  category4 = 'STORAGE'
					AND   action_type is null
				) as orgDataCnt
			,	(
					SELECT count(*) as lcDataCnt
					FROM  RESOURCE
					WHERE user_id = #{user_id}
					AND   (action_type = 'SHP' OR action_type = 'MAPPING' OR action_type = 'COORD' OR action_type = 'ALL_MAPPING')
				) as lcDataCnt
			,	(
					SELECT count(*) as shareDataCnt
					FROM  RESOURCE
					WHERE user_id = #{user_id}
					AND inst_share_yn = 'Y'
				) as shareDataCnt
			,	(
					SELECT count(*) as favDataCnt
					FROM  RESOURCE
					WHERE user_id = #{user_id}
					AND fav_yn = 'Y'
				) as favDataCnt	
			,	(
					SELECT count(*) as analysisDataCnt
					FROM EXECUTE A, ANALYSIS_PARAM B
					WHERE A.user_id = #{user_id}
					AND A.category4 = 'ANALYSIS_2016'
					AND A.execute_id = B.execute_id 
				) as analysisDataCnt		
						
	</select>
	
	
	<!-- 메인화면 대시보드 설정 조회 -->
	<select id="getDashBoardOptList" parameterType="hashmap" resultType="hashmap">
		SELECT  *
			  , (
				SELECT
						  SUM(data_size) as used_sz
					FROM  RESOURCE
					WHERE <!-- inst_share_yn = 'N'
					AND --> user_id = #{user_id}
				) as used_sz
			  , (
			  	SELECT 
			  			use_sz
			  		FROM MEMBER
			  		WHERE user_id = #{user_id}
			  	) as use_sz		
		FROM user_dashboard 
		WHERE 1=1
		<if test="user_id != null and user_id != ''">
			AND user_id = #{user_id}
		</if>
	</select>
	
	
	<!-- 메인화면 대시보드 설정 업데이트 -->
    <update id="updateDashBoardOpt" parameterType="hashmap">
		UPDATE user_dashboard
		SET	
			usr_data_yn = #{usr_data_yn},
			fav_yn = #{fav_yn},
			lc_data_yn = #{lc_data_yn},
			save_spacial_yn = #{save_spacial_yn},
			analysis_data_yn = #{analysis_data_yn},
			share_data_yn = #{share_data_yn},
			reg_ts = NOW()
		WHERE 
			user_id = #{user_id}
    </update>
	
	
	<!-- 메인화면 대시보드 설정 최초 생성 (회원가입 및 로그인 시) -->
	<insert id="insertDashBoardOpt" parameterType="hashmap">
		INSERT INTO user_dashboard
			( user_id 			
			, usr_data_yn 	
			, fav_yn 			
			, lc_data_yn 			
			, save_spacial_yn 			
			, analysis_data_yn 		
			, share_data_yn 	
			, reg_ts )
			VALUES ( 
			 #{user_id}
			, 'Y'
			, 'N'
			, 'Y'
			, 'Y'
			, 'Y'
			, 'Y'
			, NOW() 
			)
	</insert>
	
	
	<!-- 큐저장 -->
	<insert id="insertMsgQue" parameterType="hashmap">
		INSERT INTO message_que
			(msg_id, user_id, msg_cd, msg_url, msg_method, msg_param, status, reg_dt)
		VALUES ( 
			(nextval('message_que_seq'), 
			#{user_id}
			, #{msg_cd}
			, #{msg_url}
			, #{msg_method}
			, #{msg_param}
			, 'standby'
			, NOW() 
		)
	</insert>
	
	<!-- DataCnt 변경 -->
	<update id="updateDataCnt" parameterType="hashmap">
		update resource SET data_cnt = #{cnt}
		where resource_id = CAST(#{resource_id} AS INTEGER)
	</update>
	<!-- resource 삭제 -->
	<delete id= "deleteMyData" parameterType = "hashmap">
		delete from resource where resource_id = CAST(#{resource_id} AS INTEGER)
	</delete>
	
	<!-- 즐겨찾기 -->
	<update id="updateFavorite" parameterType="hashmap">
		update resource SET fav_yn = #{yn} where resource_id = CAST(#{resource_id} AS INTEGER)
	</update>
	
	<!-- 공유 -->
	<update id="updateShare" parameterType="hashmap">
		update resource SET inst_share_yn = #{yn} , inst_seq= CAST(#{inst_seq} AS INTEGER) where resource_id = CAST(#{resource_id} AS INTEGER)
	</update>
	
	
	<!-- 실행기록 삭제 -->
	<delete id="deleteExecute" parameterType="hashmap">
		delete from execute where execute_id = #{execute_id}
	</delete>
	
	<!-- analysis_param 삭제 -->
	<delete id= "deleteMyDataAnalysisParam" parameterType = "hashmap">
		delete from analysis_param where execute_id = #{execute_id}
	</delete>
</mapper>