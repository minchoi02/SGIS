package kostat.sop.OpenAPI3.api.addr;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.lucene.document.Document;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.SortField;

import com.neighborsystem.durian.exception.AbsException;
import com.neighborsystem.durian.exception.NotSupportFormatException;
import com.neighborsystem.durian.restapi.api.HttpMethod;
import com.neighborsystem.lucene.searcher.AbsQueryInfo;

import kostat.sop.OpenAPI3.common.controller.AbsQuery;
import kostat.sop.OpenAPI3.exception.ApiException;
import kostat.sop.OpenAPI3.exception.ApiException.COMM_ERR_CODE;
import kostat.sop.OpenAPI3.exception.NoResultException;
import kostat.sop.OpenAPI3.search.GeocodeSearching;
import kostat.sop.OpenAPI3.search.address.AddressDivision;
import kostat.sop.OpenAPI3.search.handler.SearchingHandler;
import kostat.sop.OpenAPI3.search.index.GeocodeIndexFieldDefineEnum;
import kostat.sop.OpenAPI3.search.query.BdMgtSnQueryInfo;
import kostat.sop.OpenAPI3.search.query.GeocodeQueryInfo;
import kostat.sop.OpenAPI3.search.query.JibunQueryInfo;
import kostat.sop.OpenAPI3.search.query.PnuQueryInfo;
import kostat.sop.OpenAPI3.search.query.RoadQueryInfo;

/**
* 지오코딩 API
* 입력된 주소에 대한 위치를 제공하는 API
* <pre>
* input : geocode.json/xml
* output : json/xml
* Table : None
* </pre>
*
* <pre>
* <b>History:</b> 
* 권영구, 1.0, 2014/09/24 초기 작성
* </pre>
* 
* @author 권영구
* @version 1.0, 2014/09/24 메서드 추가
* @see None
*/

public class Geocode extends AbsQuery<Map> {
	private static final Log logger = LogFactory.getLog(Geocode.class);
	//private Searching searching = null;
	
	private GeocodeSearching searcher;
	private SearchingHandler handler;
	
	// 
	private String resultcount = "5";

	private String pagenum = "0";
	
	public GeocodeSearching getSearcher()
	{
		return searcher;
	}

	public void setSearcher( GeocodeSearching searcher )
	{
		this.searcher = searcher;
	}

	
	public SearchingHandler getHandler()
	{
		return handler;
	}

	public void setHandler( SearchingHandler handler )
	{
		this.handler = handler;
	}
	
//	public AbsSearchingInMultipleIndexSearcher getSearcher() {
//		return searcher;
//	}
//
//	public void setSearcher(AbsSearchingInMultipleIndexSearcher searcher) {
//		this.searcher = searcher;
//	}

	@Override
	public Map executeAPI(HttpServletRequest req, HttpServletResponse res,
			String trId) throws AbsException {
		int intAddrType = 1;
		int intResultCount = 5;
		int intPageNum = 1;
		boolean bReturnPNUnMGT = false;	// 20170720 pnu, mgt 정보 리턴 추가 @hkkim
		GeocodeIndexFieldDefineEnum geocodeindex = null;

		Map result = new HashMap();
		String strAddress = "";

		// AbsSearchingInMultipleIndexSearcher searcher = new GeocodeSearching();
		try
		{
			logger.info( "START Query - ApiID[" + this.getApiId() + "] " );

			String strFormat = _getViewType( req, res );

			if( !( strFormat.equals( "json" ) || strFormat.equals( "xml" ) ) )
			{
				throw new NotSupportFormatException( "Not Support Format[" + strFormat + "]" );
			}

			Map mapParameter = getParameterMap( req );
			// 파라메터 값이 널인지 체크한다.
			_checkNullParameterValue( mapParameter );

			optimizeParameterMap( mapParameter );
			
			AbsQueryInfo qInfo = null;
			
			// 2016.12.20 pnu, bd_mgt_sn (지번, 건물관리번호) 검색 쿼리 생성
			if ( mapParameter.containsKey( OptionParam.type.name() ) ) {
				String strType = (String) mapParameter.get( OptionParam.type.name() );
				if ( strType.equals( "1" ) ) {
					qInfo = new PnuQueryInfo( GeocodeSearching.KEY.KOREA.name()
							, (String) mapParameter.get( MustParam.address.name() ) );
				} else if ( strType.equals( "2" ) ) {
					qInfo = new BdMgtSnQueryInfo(  GeocodeSearching.KEY.KOREA.name()
							, (String) mapParameter.get( MustParam.address.name() ) );
				} else if( strType.equals( "3" ) ) {
					bReturnPNUnMGT = true;	// 20170720 type 3일때 pnu, mgt 정보 리턴 @hkkim
				}
			}
			
			// 주소검색 쿼리 생성.
			if ( qInfo == null ) {
				// 입력받은 주소값을 파싱해서 리턴
				//String strTmpAddress = URLDecoder.decode( (String) mapParameter.get("address"), "UTF-8");//(String)mapParameter.get("address");
				String strTmpAddress = (String) mapParameter.get( "address" );
				Map mapAddress = new AddressDivision( strTmpAddress ).getResult();
				checkAddress( mapAddress );

				logger.debug( mapAddress );

				// 2017.05-19 리펙토리
				if( mapAddress.containsKey( "spRoad" )) {
					// 도로명 주소 검색
					qInfo = new RoadQueryInfo( mapAddress );
					
					// 메인건물 필드 소트 형태로 인덱스가 생성 되면 정렬 조건을 추가 한다.
					Sort sort = new Sort(new SortField[]{
							SortField.FIELD_SCORE,
							new SortField("bul_dpn_se", SortField.Type.STRING)
					});
					qInfo.setSort( sort );
//					Field.Index.NOT_ANALYZED

				} else {
					// 지번 주소 검색
					qInfo = new JibunQueryInfo( mapAddress );
				}
				
	//			ISearchHandler handler = new SearchingHandler();
//				qInfo = new GeocodeQueryInfo( mapAddress );
			}

			qInfo.setPage( Integer.parseInt( (String) mapParameter.get( "pagenum" ) ) + 1 );
			qInfo.setCount( Integer.parseInt( (String) mapParameter.get( "resultcount" ) ) );

			// 검색관련 인덱스를 설정하고 검색시작
			// searcher.initIndexSearcherMap();
			//List<Map<String, String>> docResult= searcher.search( qInfo, handler );
			Object obj = searcher.search( qInfo, handler );
			Map< String, Object> searchResult = (Map< String, Object>) obj;
			//Map<String, Object> resultInfo = new HashMap(); 
			Map< String, String > mapResultInfoTmp = new HashMap();
			List mapResultTmp = new ArrayList();
			//Map<String, Object> mapResultData = new HashMap(); 

			// 검색결과 정보를 담는다.
			List< Document > docResult = (List< Document >) searchResult.get( "Document" );

			if( docResult.size() == 0  && mapParameter.get( OptionParam.absmatch.name() ).equals( "0" ) )
			{
				// 주소 나눈결과에 지번이 있을 경우 지번을 제외하고 다시 한번 검색 시도.
				// 지번을 제외하고 검색한 결과가 있을 경우에는 부분매칭을 표시하는 필드를 추가
				// 
				String strPcl = qInfo.getQueryMap().get( "pcl" ); 
				if ( strPcl != null && !strPcl.equals( "" ) ) {
					qInfo.getQueryMap().put( "pcl", "" );
//					qInfo.getQueryMap().remove( "pcl" );
					obj = searcher.search( qInfo, handler );
					searchResult = (Map< String, Object>) obj;
					docResult = (List< Document >) searchResult.get( "Document" );
//					if( docResult.size() == 0 ) {
//						throw new NoResultException();
//					} else {
						// 2016.12.21 매칭 구분 필드 추가
						// 0: 완전매칭 1: 부분매칭
						result.put( "matching", "1" );
//					}
				} else {
					throw new NoResultException();
				}
			} else {
				// 2016.12.21 매칭 구분 필드 추가
				// 0: 완전매칭 1: 부분매칭
				result.put( "matching", "0" );
			}

			if( docResult.size() == 0 ) {
				throw new NoResultException();
			}

			// 취득한 도큐먼트대로 결과값을 생성한다.
			for( int ix = 0; ix < docResult.size(); ix++ )
			{
				//for(int ix = 0; ix < 2; ix++){
				Map< String, String > mapResult = new LinkedHashMap< String, String >();

				mapResult.put( "addr_type", 		docResult.get( ix ).get( geocodeindex.addr_type.name() ) );
				mapResult.put( "sido_nm", 			docResult.get( ix ).get( geocodeindex.sido_nm.name() ) );
				mapResult.put( "sido_cd", 			docResult.get( ix ).get( geocodeindex.sido_cd.name() ) );
				mapResult.put( "sgg_nm", 			docResult.get( ix ).get( geocodeindex.sgg_nm.name() ) );
				mapResult.put( "sgg_cd", 			docResult.get( ix ).get( geocodeindex.sgg_cd.name() ) );
				mapResult.put( "adm_nm",			docResult.get( ix ).get( geocodeindex.adm_nm.name() ) );
				mapResult.put( "adm_cd", 			docResult.get( ix ).get( geocodeindex.adm_cd.name() ) );
				mapResult.put( "leg_nm", 			docResult.get( ix ).get( geocodeindex.leg_nm.name() ) );
				mapResult.put( "leg_cd", 			docResult.get( ix ).get( geocodeindex.leg_cd.name() ) );
				mapResult.put( "ri_nm", 			docResult.get( ix ).get( geocodeindex.ri_nm.name() ) );
				mapResult.put( "ri_cd", 			docResult.get( ix ).get( geocodeindex.ri_cd.name() ) );
				mapResult.put( "road_nm", 			docResult.get( ix ).get( geocodeindex.road_nm.name() ) );
				mapResult.put( "road_cd",			docResult.get( ix ).get( geocodeindex.road_cd.name() ) );
				mapResult.put( "road_nm_main_no",	docResult.get( ix ).get( geocodeindex.road_nm_main_no.name() ) );
				mapResult.put( "road_nm_sub_no",	docResult.get( ix ).get( geocodeindex.road_nm_sub_no.name() ) );
				mapResult.put( "bd_main_nm",		docResult.get( ix ).get( geocodeindex.bd_main_nm.name() ) );
				mapResult.put( "bd_sub_nm", 		docResult.get( ix ).get( geocodeindex.bd_sub_nm.name() ) );

				String strBonbun = "null";
				String strBubun = "null";

				String strTmppcl = docResult.get( ix ).get( geocodeindex.pcl.name() );
				if( strTmppcl.split( "-" ).length > 1 )
				{
					strBonbun = docResult.get( ix ).get( geocodeindex.pcl.name() ).split( "-" )[0];
					strBubun = docResult.get( ix ).get( geocodeindex.pcl.name() ).split( "-" )[1];
				}
				else
				{
					strBonbun = docResult.get( ix ).get( geocodeindex.pcl.name() );
				}

				mapResult.put( "jibun_main_no", strBonbun );
				mapResult.put( "jibun_sub_no", strBubun );
				mapResult.put( "x", docResult.get( ix ).get( geocodeindex.x.name() ) );
				mapResult.put( "y", docResult.get( ix ).get( geocodeindex.y.name() ) );
				// 20170720 type 3일때 pnu, mgt 정보 리턴 @hkkim
				if(bReturnPNUnMGT) {
					mapResult.put( "pnu", 			docResult.get( ix ).get( geocodeindex.pnu.name() ));
					mapResult.put( "bd_mgt_sn",	 	docResult.get( ix ).get( geocodeindex.bd_mgt_sn.name() ));
				}

				mapResultTmp.add( mapResult );
			}
			result.put( "totalcount", "" + searchResult.get( "TotalCount" ) );
			result.put( "pagenum", "" + mapParameter.get( "pagenum" ) );
			result.put( "returncount", "" + docResult.size() );
			result.put( "resultdata", mapResultTmp );

		}
		catch( ApiException e )
		{
			logger.error( e );
			throw e;
		}
		catch( IllegalArgumentException e )
		{
			logger.error( e );
			throw new ApiException( "입력값을 체크 해 주세요" );
		}
		catch( Exception e )
		{
			logger.error( e );
			throw new ApiException( "서버에서 처리 중 에러가 발생하였습니다." );
		}
		finally
		{
//			searcher.closeIndexReaderAll();
//			searcher = null;
		}

		return result;
	}
	
	private void checkAddress(Map mapAddress) throws AbsException
	{
		Map<String, String> tmp = mapAddress;
		String objSido = tmp.get( "sido_syn" );
		String objSgg = tmp.get( "sgg_syn" );
		String objEmdong = tmp.get("emdong_syn");
		
		if( objSido.equals("") && objSgg.equals("") && objEmdong.equals( "" ) )
		{
			throw new ApiException( "검색할 주소를 확인해주세요", COMM_ERR_CODE.ERR_PARAM );
		}
	}

	@Override
	public String getApiId()
	{
		return "API_0702";
		//return "12345566";
	}

	@Override
	public HttpMethod getHttpMethod()
	{
		return HttpMethod.GET;
	}

	@Override
	public Class getMustParameter() throws AbsException
	{
		return MustParam.class;
	}

	@Override
	public Class getOptionParameter() throws AbsException
	{
		return OptionParam.class;
	}

	@Override
	protected String getQueryStr()
	{
		return "addr.geocode";
	}

	enum MustParam
	{
		address
	}

	enum OptionParam
	{
		accessToken
		, resultcount
		, pagenum
		, min
		, max
		, type // 검색타입 지정 1: pnu 2: bd_mgt_sn other:주소검색
		, absmatch
	}

	protected void optimizeParameterMap( Map mapParameter ) throws Exception
	{
		// 2016.12.28 절대매칭 옵션 추가.
		if( mapParameter.containsKey( OptionParam.absmatch.name() ) ) {
			try {
				int intMType = Integer.valueOf( (String) mapParameter.get( OptionParam.absmatch.name() ) );
				if( intMType != 0 && intMType != 1 ) {
					throw new ApiException( "매칭 타입 값을 확인해주세요.", COMM_ERR_CODE.ERR_PARAM );
				}
			} catch (NumberFormatException e ) {
				throw new ApiException( "매칭 타입 값을 확인해주세요.", COMM_ERR_CODE.ERR_PARAM );
			}
		} else {
			mapParameter.put( OptionParam.absmatch.name(), "1" );
		}
		// 2016.12.20 검색 타입 추가. pnu, bd_mgt_sn
		if( mapParameter.containsKey( OptionParam.type.name() ) ) {
			try {
				Integer.valueOf( (String) mapParameter.get( OptionParam.type.name() ) );
			} catch (NumberFormatException e) {
				throw new ApiException( "검색 타입 값을 확인해주세요.", COMM_ERR_CODE.ERR_PARAM );
			}
		}
		//int resultcount = (int) mapParameter.get("resultcount");
		//  
		if( mapParameter.get( "address" ) == null )
		{
			throw new ApiException( "검색할 주소를 확인해주세요", COMM_ERR_CODE.ERR_PARAM );
		}

		mapParameter.put( "address", URLDecoder.decode( (String) mapParameter.get( "address" ), "UTF-8" ) );

		// 페이지 번호 입력
		if( mapParameter.get( "pagenum" ) == null )
		{
			mapParameter.put( "pagenum", pagenum );
		}
		else if( Integer.parseInt( (String) mapParameter.get( "pagenum" ) ) < 0 )
		{
			throw new ApiException( "페이지 번호를 확인해주세요", COMM_ERR_CODE.ERR_PARAM );
		}

		mapParameter.put( "pagenum", URLDecoder.decode( (String) mapParameter.get( "pagenum" ), "UTF-8" ) );

		// 최소 1에서 50까지 설정 가능 Default는 5
		if( mapParameter.get( "resultcount" ) == null )
		{
			mapParameter.put( "resultcount", this.resultcount );
		}
		else if( Integer.parseInt( (String) mapParameter.get( "resultcount" ) ) < 1 || Integer.parseInt( (String) mapParameter.get( "resultcount" ) ) > 50 )
		{
			throw new ApiException( "페이지 번호를 확인해주세요", COMM_ERR_CODE.ERR_PARAM );
		}
		mapParameter.put( "resultcount", URLDecoder.decode( (String) mapParameter.get( "resultcount" ), "UTF-8" ) );
	}

	@Override
	public String checkAuth(Map mapParameter) {
		// TODO Auto-generated method stub
		return null;
	}
	
}
