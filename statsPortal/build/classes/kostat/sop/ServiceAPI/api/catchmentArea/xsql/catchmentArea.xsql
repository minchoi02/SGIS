<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="catchmentArea">

	<!-- 테스트 조회 -->
	<select id="selectTestInfo" parameterType="hashmap" resultType="hashmap">
		SELECT
			'니들이' as col1, '배후권을' as col2, '알어?' as col3
		FROM dual
	</select>

	<!-- 테스트 통계 조회 -->
	<select id="selectTestStatsInfo" parameterType="hashmap" resultType="hashmap">
		<if test='zoom == "8"'>
			select 
				a.grid_cd adm_cd, a.grid_cd adm_nm,  TOT_PPLTN, tot_family, avg_fmember_cnt, tot_house
			from SRV_DT_GRID_TOTIDX with (nolock) a 
			where 
				a.grid_cd in (
						select grid_1k_cd			
						from srv_pg_grid_1k_bord with (nolock) 
						where st_intersects(bord, ST_POLYFROMTEXT(#{area},0))=1
				)
				and a.base_year = #{year}
		</if>					
	</select>
	
	<!-- area로 가져온 영역과 겹치는 격자들의 코드 값을 모두 읽어온다. -->
	<select id="selectIntersectGridCd" parameterType="hashmap" resultType="string">
		SELECT
			GRID_${grid_level}_CD as GRID_CD
		FROM
			 SRV_PG_GRID_${grid_level}_BORD with (nolock)
		<choose>
			<when test="srvAreaType == 1">
				WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
			</when>
			<otherwise>
				WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
			</otherwise>
		</choose>
		ORDER BY
			GRID_CD
	</select>
	
	<select id="selectFacilityTypeSearchList" parameterType="hashmap" resultType="hashmap">
		SELECT
			T9.CORP_NM
			, T9.SUFID
			, NVL(T2.NADDR, '주소 정보 없음') AS NADDR
			, T9.BASE_YEAR
			, T9.KSIC_5_CD
			, st_x(T5.PT) AS x_coordinate
			, st_y(T5.PT) AS y_coordinate
		FROM (
			SELECT 
				T1.CORP_NM AS CORP_NM
				, T1.SUFID AS SUFID
				, T1.BASE_YEAR AS BASE_YEAR
				, T1.KSIC_5_CD AS KSIC_5_CD
			FROM SRV_DT_CORPCENSUS_${classDeg} with (nolock) T1
				INNER JOIN SRV_DT_SRVAREA_POIMAPPING with (nolock) T3 ON T3.KSIC_5_CD = T1.KSIC_5_CD AND T3.class_deg = #{classDeg}
					<if test='factypeCd != null and !"".equals(factypeCd)'> 
						AND T3.FACTYPE_CD = #{factypeCd} 
					</if>				
			WHERE 
				T1.BASE_YEAR = #{copr_base_year}			
				<if test = '!"screen".equals(mode)'>
					<if test='areaCd != null and !"".equals(areaCd)'>
						<choose>
							<when test="areaCd_len == 7">
								AND T1.ADM_CD = #{areaCd}	
							</when>
							<otherwise>
								AND T1.ADM_CD LIKE #{areaCd} || '%'	
							</otherwise>
						</choose>				
					</if>					
				</if>
			) T9
			INNER JOIN SRV_PT_BD with (nolock) T5 ON T9.SUFID = T5.SUFID
				<if test = '"screen".equals(mode)'>
					<if test='area != null and !"".equals(area)'>
						AND st_intersects(T5.PT, st_rectfromtext(#{area}, 0)) = 1
					</if>					
				</if>			
			LEFT OUTER JOIN SRV_PG_CENSUSBD with (nolock) T2 ON T9.SUFID = T2.SUFID			
		UNION ALL
		SELECT 
			CORP_NM
			, TO_CHAR(EXTRL_SEQ) AS SUFID
			, NVL(NADDR, '주소 정보 없음') AS NADDR
			, BASE_YEAR
			, KSIC_5_CD
			, X_COOR AS X_COORDINATE
			, Y_COOR AS Y_COORDINATE
		FROM SRV_DT_SRVAREA_POI_EXTRL with (nolock)
		WHERE 
			1=1
			<if test='factypeCd != null and !"".equals(factypeCd)'>
				<choose>
					<when test="factypeCd.equals('SA0016')">
							AND KSIC_5_CD = 'E0001'
					</when>
					<when test="factypeCd.equals('SA0014')">
							AND KSIC_5_CD = 'E0002'
					</when>
					<otherwise>
							AND KSIC_5_CD NOT IN ('E0001', 'E0002')
					</otherwise>
				</choose>
			</if>
			<if test = '!"screen".equals(mode)'>
				<if test='areaCd != null and !"".equals(areaCd)'>
					<choose>
						<when test="areaCd_len == 7">
							AND ADM_CD = #{areaCd}	
						</when>
						<otherwise>
							AND ADM_CD LIKE #{areaCd} || '%'	
						</otherwise>
					</choose>				
				</if>					
			</if>
			<if test = '"screen".equals(mode)'>
				<if test='area != null and !"".equals(area)'>
					AND st_contains(
						st_rectfromtext(#{area}, 0)
						, st_pointfromtext('point(' || x_coor || ' ' || y_coor ||')', 0)
					) = 1
				</if>					
			</if>
			<!-- SGIS4_1124_시설유형 추가(전기차:srv_pt_electrcar_data/국민안심병원:srv_pt_thema_covid19_status) 시작 -->
			<if test="factypeCd.equals('SA0024')">
			UNION ALL
				select 
					station as corp_nm
					, to_char(rnum) as sufid
					, NVL(addr, '주소 정보 없음') AS NADDR
					, '2020' as base_year
					, 'E0003' as ksic_5_cd
					, x_coor as X_COORDINATE
					, y_coor as Y_COORDINATE
				from srv_pt_electrcar_data
				where
					1=1
					<if test = '!"screen".equals(mode)'>
						<if test='areaCd != null and !"".equals(areaCd)'>
							AND tot_oa_cd like #{areaCd} || '%'
						</if>	
					</if>	
					<if test = '"screen".equals(mode)'>
						<if test='area != null and !"".equals(area)'>
							AND st_contains(
								st_rectfromtext('RECTANGLE(982426 1814117,997786 1820493)', 0)
								, st_pointfromtext('point(' || x_coor || ' ' || y_coor ||')', 0)
							) = 1
						</if>
					</if>
			</if>
			<if test="factypeCd.equals('SA0025')">
			UNION ALL
				select
					clnc_inst_1 as corp_nm
					, rownum as sufid
					, NVL(clnc_inst_2, '주소 정보 없음') AS NADDR
					, base_year
					, 'E0004' as ksic_5_cd
					, x_coor as X_COORDINATE
					, y_coor as Y_COORDINATE
				from srv_pt_thema_covid19_status
				WHERE 
					1=1
					<if test = '!"screen".equals(mode)'>
						<if test='areaCd != null and !"".equals(areaCd)'>
							<choose>
								<when test="areaCd_len == 7">
									AND sido_cd || sgg_cd || emdong_cd = #{areaCd}	
								</when>
								<otherwise>
									AND sido_cd || sgg_cd || emdong_cd like #{areaCd} || '%'
								</otherwise>
							</choose>	
						</if>					
					</if>
					<if test = '"screen".equals(mode)'>
						<if test='area != null and !"".equals(area)'>
							AND st_contains(
								st_rectfromtext(#{area}, 0)
								, st_pointfromtext('point(' || x_coor || ' ' || y_coor ||')', 0)
							) = 1
						</if>					
					</if>
			</if>
			<!-- SGIS4_1124_시설유형 추가(전기차:srv_pt_electrcar_data/국민안심병원:srv_pt_thema_covid19_status) 끝 -->
		ORDER BY CORP_NM		

<!-- 20201125 이전  -->	
<!-- 		SELECT  -->
<!-- 			T1.CORP_NM -->
<!-- 			, T1.SUFID -->
<!-- 			, NVL(T2.NADDR, '주소 정보 없음') AS NADDR -->
<!-- 			, T1.BASE_YEAR -->
<!-- 			, T1.KSIC_5_CD -->
<!-- 		FROM SRV_DT_CORPCENSUS_${classDeg} with (nolock) T1 -->
<!-- 			LEFT OUTER JOIN SRV_PG_CENSUSBD with (nolock) T2 ON T1.SUFID = T2.SUFID -->
<!-- 		WHERE  -->
<!-- 			T1.BASE_YEAR = (select max(BASE_YEAR) from SRV_DT_CORPCENSUS_${classDeg} with (nolock) where base_year != '9016') -->
<!-- 			<if test='factypeCd != null and !"".equals(factypeCd)'>  -->
<!-- 				AND T1.KSIC_5_CD in (select KSIC_5_CD from SRV_DT_SRVAREA_POIMAPPING where FACTYPE_CD = #{factypeCd} and class_deg = #{classDeg}) -->
<!-- 			</if> -->
<!-- 			<if test = '!"screen".equals(mode)'> -->
<!-- 				<if test='areaCd != null and !"".equals(areaCd)'> -->
<!-- 					AND T1.ADM_CD LIKE #{areaCd} || '%'	/* 시군구 기준 검색을 위해서 LIKE 사용 */ -->
<!-- 				</if>					 -->
<!-- 			</if> -->
<!-- 			<if test = '"screen".equals(mode)'> -->
<!-- 				<if test='area != null and !"".equals(area)'> -->
<!-- 					AND st_intersects(T2.bord, st_rectfromtext(#{area}, 0)) = 1 -->
<!-- 				</if>					 -->
<!-- 			</if> -->
<!-- 		ORDER BY T1.CORP_NM					 -->
	</select>
	
	<select id="selectSufidCoordinate" parameterType="hashmap" resultType="hashmap">
		SELECT
			st_x(PT) AS x_coordinate
 			, st_y(PT) AS y_coordinate
 		FROM SRV_PT_BD with (nolock)
 		WHERE SUFID = #{sufid}
 		UNION ALL
		SELECT 
 			X_COOR AS x_coordinate
 			,Y_COOR AS y_coordinate
		FROM SRV_DT_SRVAREA_POI_EXTRL with (nolock)
		WHERE TO_CHAR(EXTRL_SEQ) = #{sufid}
	</select>
	
	<select id="selectSearchListPoi" parameterType="hashmap" resultType="hashmap">
		SELECT
			st_x(PT) AS x_coordinate
 			, st_y(PT) AS y_coordinate
 		FROM SRV_PT_BD with (nolock)
 		WHERE SUFID IN 
 		<foreach item="item" index="index" collection="sufid" open="(" close=")" separator=",">
 			#{item}
 		</foreach>
	</select>
	<select id="selectFacilityTypeList" parameterType="hashmap" resultType="hashmap">
		SELECT
			T1.FACTYPE_LCLAS_CD
			, T1.FACTYPE_LCLAS_NM 
			, T2.FACTYPE_NM AS NAME
			, T2.FACTYPE_CD AS CODE
			, T2.SRV_DIV
			, C1.S_CLASS_CD_NM as SRV_DIV_NM			
		FROM SRV_DT_SRVAREA_FACTYPE_LCLAS with (nolock) T1
		LEFT OUTER JOIN SRV_DT_SRVAREA_FACTYPE with (nolock) T2
			ON T1.FACTYPE_LCLAS_CD = T2.UPPER_FACTYPE_CD
		LEFT OUTER JOIN CMM_CD_COMCD with (nolock) C1 
			ON C1.S_CLASS_CD = T2.SRV_DIV AND C1.B_CLASS_CD = 'SRVA16'			
		WHERE T1.SRV_YN = 'Y' AND T1.USE_YN = 'Y'
			AND T2.SRV_YN = 'Y' AND T2.USE_YN = 'Y'
		ORDER BY T1.ORDER_NO, T2.ORDER_NO
	</select>
	<select id="selectSrvareaScopeList" parameterType="hashmap" resultType="hashmap">
		SELECT
			T1.SCOPE_TYPE 
			, NVL(T2.DFLT_SLCTN_YN, 'N') AS DFLT_SLCTN_YN
			, T1.SCOPE_CD
			, T1.SCOPE_NM as S_CLASS_CD_NM
			, T1.SCOPE_VALUE as CD_EXP
		FROM SRV_DT_SRVAREA_SCOPE with (nolock) T1
		LEFT OUTER JOIN SRV_DT_SRVAREA_SCOPEMAPPING with (nolock) T2
			ON T2.SCOPE_CD = T1.SCOPE_CD AND T2.USE_YN = 'Y'
			<if test="factype_cd != null and factype_cd != ''"> 
				AND T2.FACTYPE_CD = #{factype_cd}
			</if>			
		WHERE	
			T1.USE_YN = 'Y' 
			and T1.SRV_YN = 'Y'
		ORDER BY T1.SCOPE_TYPE, T1.ORDER_NO		
	</select>
	<select id="selectSerachareaScopeList" parameterType="hashmap" resultType="hashmap">
		SELECT distinct
			T1.SCOPE_TYPE
			, T1.SCOPE_CD
			, T2.SCOPE_NM as S_CLASS_CD_NM
			, T2.SCOPE_VALUE as CD_EXP
		FROM SRV_DT_SRVAREA_SCOPEMAPPING with (nolock) T1
		LEFT OUTER JOIN SRV_DT_SRVAREA_SCOPE with (nolock) T2
		ON T1.SCOPE_CD = T2.SCOPE_CD
		WHERE	T2.USE_YN = 'Y'
			and T2.SRV_YN = 'Y'
	</select>
	<select id="selectSrvAreaSize" parameterType="hashmap" resultType="hashmap">
		SELECT 
		<choose>
			<when test="srvAreaType == 1">
				round(st_area(st_polyfromtext(#{area},0))) AS AREA_SIZE
			</when>
			<otherwise>
				round(st_area(ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}))) AS AREA_SIZE
			</otherwise>
		</choose>
		FROM DUAL
	</select>
	<select id="selectIntersectingSggList" parameterType="hashmap" resultType="hashmap">
		select
			bord.sido_cd
			, bord.sgg_cd
			, max(bord.sido_nm) as sido_nm
			, max(bord.sgg_nm) as sgg_nm
		from srv_pg_sggbord with (nolock) bord, 
			(
				select * from SRV_PG_GRID_${grid_level}_BORD with (nolock)
				<choose>
					<when test="srvAreaType == 1">
						where st_intersects(bord, st_polyfromtext(#{area}, 0)) = 1	
					</when>
					<otherwise>
						where st_intersects(bord, (select st_buffer(st_pointfromtext(#{area}, 0), #{radius}) from DUAL)) = 1	
					</otherwise>
				</choose>				
			) gbord
		where
			st_intersects(bord.lighten_bord, gbord.bord) = 1
			and bord.base_year = #{bord_base_year}
		group by bord.sido_cd, bord.sgg_cd	
		order by bord.sido_cd, bord.sgg_cd 
	</select>	
	<select id="selectSrvAreaGridPopsList" parameterType="hashmap" resultType="hashmap">
		SELECT
		<!-- SGIS4_1025_생활권역 시작 -->
			<choose>
				<!-- 5세 단위 -->
				<when test='stats_class_gb == "age_5"'>
					<choose>
						<when test='girdUnit == "100m"'>
							<!-- 총합 BSCA 계산용 -->
							SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS TOT_LE_ORG_CNT
							, SUM(CASE WHEN dat.BSCA = 5 THEN 1 ELSE 0 END) AS TOT_EQ_SCA_CNT
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS TOT_LE_ORG_SUM
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS TOT_LE_SCA_SUM
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS TOT_GT_ORG_SUM
							<!-- 남자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS MAN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS MAN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS MAN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS MAN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS MAN_GT_ORG_SUM			
							<!-- 여자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS WMN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS WMN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS WMN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS WMN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS WMN_GT_ORG_SUM				
							<!-- 0~4세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P01_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P01_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P01_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P01_GT_ORG_SUM				
							<!-- 5~9세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P02_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P02_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P02_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P02_GT_ORG_SUM				
							<!-- 10~14세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P03_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P03_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P03_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P03_GT_ORG_SUM				
							<!-- 15~19세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P04_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P04_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P04_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P04_GT_ORG_SUM				
							<!-- 20~24세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P05_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P05_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P05_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P05_GT_ORG_SUM				
							<!-- 25~29세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P06_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P06_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P06_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P06_GT_ORG_SUM				
							<!-- 30~34세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P07_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P07_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P07_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P07_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P07_GT_ORG_SUM				
							<!-- 35~39세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P08_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P08_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P08_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P08_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P08_GT_ORG_SUM				
							<!-- 40~44세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P09_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P09_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P09_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P09_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P09_GT_ORG_SUM
							<!-- 45~49세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P10_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P10_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P10_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P10_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P10_GT_ORG_SUM							
							<!-- 50~54세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P11_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P11_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P11_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P11_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P11_GT_ORG_SUM
							<!-- 55~59세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P12_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P12_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P12_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P12_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P12_GT_ORG_SUM
							<!-- 60~64세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P13_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P13_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P13_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P13_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P13_GT_ORG_SUM
							<!-- 65~69세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P14_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P14_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P14_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P14_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P14_GT_ORG_SUM
							<!-- 70~74세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P15_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P15_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P15_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P15_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P15_GT_ORG_SUM							
							<!-- 75~79세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P16_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P16_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P16_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P16_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P16_GT_ORG_SUM							
							<!-- 80~84세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P17_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P17_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P17_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P17_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P17_GT_ORG_SUM							
							<!-- 85~89세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P18_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P18_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P18_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P18_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P18_GT_ORG_SUM							
							<!-- SGIS4_1210_생활권역 시작 -->
							<!-- 90세 이상 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P19_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P19_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P19_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P19_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P19_GT_ORG_SUM
							<!-- SGIS4_1210_생활권역 끝 -->
						</when>
						<otherwise>
							<!-- 총합 BSCA 계산용 -->
							SUM(dat.LK) AS TOT_LE_ORG_CNT
							, SUM(dat.SK) AS TOT_EQ_SCA_CNT
							, SUM(dat.D1) AS TOT_LE_ORG_SUM
							, SUM(dat.D2) AS TOT_LE_SCA_SUM
							, SUM(dat.DD1Z) AS TOT_GT_ORG_SUM
							<!-- 남자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.LK ELSE 0 END) AS MAN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.SK ELSE 0 END) AS MAN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.D1 ELSE 0 END) AS MAN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.D2 ELSE 0 END) AS MAN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.DD1Z ELSE 0 END) AS MAN_GT_ORG_SUM			
							<!-- 여자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.LK ELSE 0 END) AS WMN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.SK ELSE 0 END) AS WMN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.D1 ELSE 0 END) AS WMN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.D2 ELSE 0 END) AS WMN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.DD1Z ELSE 0 END) AS WMN_GT_ORG_SUM
							<!-- 0~4세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' THEN dat.LK ELSE 0 END) AS P01_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' THEN dat.SK ELSE 0 END) AS P01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' THEN dat.D1 ELSE 0 END) AS P01_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' THEN dat.D2 ELSE 0 END) AS P01_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '01' THEN dat.DD1Z ELSE 0 END) AS P01_GT_ORG_SUM								
							<!-- 5~9세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' THEN dat.LK ELSE 0 END) AS P02_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' THEN dat.SK ELSE 0 END) AS P02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' THEN dat.D1 ELSE 0 END) AS P02_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' THEN dat.D2 ELSE 0 END) AS P02_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '02' THEN dat.DD1Z ELSE 0 END) AS P02_GT_ORG_SUM				
							<!-- 10~14세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' THEN dat.LK ELSE 0 END) AS P03_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' THEN dat.SK ELSE 0 END) AS P03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' THEN dat.D1 ELSE 0 END) AS P03_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' THEN dat.D2 ELSE 0 END) AS P03_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '03' THEN dat.DD1Z ELSE 0 END) AS P03_GT_ORG_SUM				
							<!-- 15~19세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' THEN dat.LK ELSE 0 END) AS P04_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' THEN dat.SK ELSE 0 END) AS P04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' THEN dat.D1 ELSE 0 END) AS P04_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' THEN dat.D2 ELSE 0 END) AS P04_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '04' THEN dat.DD1Z ELSE 0 END) AS P04_GT_ORG_SUM				
							<!-- 20~24세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' THEN dat.LK ELSE 0 END) AS P05_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' THEN dat.SK ELSE 0 END) AS P05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' THEN dat.D1 ELSE 0 END) AS P05_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' THEN dat.D2 ELSE 0 END) AS P05_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '05' THEN dat.DD1Z ELSE 0 END) AS P05_GT_ORG_SUM				
							<!-- 25~29세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' THEN dat.LK ELSE 0 END) AS P06_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' THEN dat.SK ELSE 0 END) AS P06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' THEN dat.D1 ELSE 0 END) AS P06_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' THEN dat.D2 ELSE 0 END) AS P06_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '06' THEN dat.DD1Z ELSE 0 END) AS P06_GT_ORG_SUM				
							<!-- 30~34세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' THEN dat.LK ELSE 0 END) AS P07_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' THEN dat.SK ELSE 0 END) AS P07_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' THEN dat.D1 ELSE 0 END) AS P07_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' THEN dat.D2 ELSE 0 END) AS P07_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '07' THEN dat.DD1Z ELSE 0 END) AS P07_GT_ORG_SUM				
							<!-- 35~39세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' THEN dat.LK ELSE 0 END) AS P08_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' THEN dat.SK ELSE 0 END) AS P08_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' THEN dat.D1 ELSE 0 END) AS P08_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' THEN dat.D2 ELSE 0 END) AS P08_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '08' THEN dat.DD1Z ELSE 0 END) AS P08_GT_ORG_SUM				
							<!-- 40~44세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' THEN dat.LK ELSE 0 END) AS P09_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' THEN dat.SK ELSE 0 END) AS P09_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' THEN dat.D1 ELSE 0 END) AS P09_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' THEN dat.D2 ELSE 0 END) AS P09_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '09' THEN dat.DD1Z ELSE 0 END) AS P09_GT_ORG_SUM
							<!-- 45~49세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' THEN dat.LK ELSE 0 END) AS P10_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' THEN dat.SK ELSE 0 END) AS P10_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' THEN dat.D1 ELSE 0 END) AS P10_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' THEN dat.D2 ELSE 0 END) AS P10_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '10' THEN dat.DD1Z ELSE 0 END) AS P10_GT_ORG_SUM							
							<!-- 50~54세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' THEN dat.LK ELSE 0 END) AS P11_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' THEN dat.SK ELSE 0 END) AS P11_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' THEN dat.D1 ELSE 0 END) AS P11_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' THEN dat.D2 ELSE 0 END) AS P11_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '11' THEN dat.DD1Z ELSE 0 END) AS P11_GT_ORG_SUM
							<!-- 55~59세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' THEN dat.LK ELSE 0 END) AS P12_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' THEN dat.SK ELSE 0 END) AS P12_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' THEN dat.D1 ELSE 0 END) AS P12_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' THEN dat.D2 ELSE 0 END) AS P12_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '12' THEN dat.DD1Z ELSE 0 END) AS P12_GT_ORG_SUM
							<!-- 60~64세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' THEN dat.LK ELSE 0 END) AS P13_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' THEN dat.SK ELSE 0 END) AS P13_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' THEN dat.D1 ELSE 0 END) AS P13_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' THEN dat.D2 ELSE 0 END) AS P13_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '13' THEN dat.DD1Z ELSE 0 END) AS P13_GT_ORG_SUM
							<!-- 65~69세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' THEN dat.LK ELSE 0 END) AS P14_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' THEN dat.SK ELSE 0 END) AS P14_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' THEN dat.D1 ELSE 0 END) AS P14_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' THEN dat.D2 ELSE 0 END) AS P14_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '14' THEN dat.DD1Z ELSE 0 END) AS P14_GT_ORG_SUM
							<!-- 70~74세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' THEN dat.LK ELSE 0 END) AS P15_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' THEN dat.SK ELSE 0 END) AS P15_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' THEN dat.D1 ELSE 0 END) AS P15_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' THEN dat.D2 ELSE 0 END) AS P15_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '15' THEN dat.DD1Z ELSE 0 END) AS P15_GT_ORG_SUM							
							<!-- 75~79세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' THEN dat.LK ELSE 0 END) AS P16_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' THEN dat.SK ELSE 0 END) AS P16_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' THEN dat.D1 ELSE 0 END) AS P16_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' THEN dat.D2 ELSE 0 END) AS P16_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '16' THEN dat.DD1Z ELSE 0 END) AS P16_GT_ORG_SUM							
							<!-- 80~84세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' THEN dat.LK ELSE 0 END) AS P17_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' THEN dat.SK ELSE 0 END) AS P17_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' THEN dat.D1 ELSE 0 END) AS P17_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' THEN dat.D2 ELSE 0 END) AS P17_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '17' THEN dat.DD1Z ELSE 0 END) AS P17_GT_ORG_SUM							
							<!-- 85~89세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' THEN dat.LK ELSE 0 END) AS P18_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' THEN dat.SK ELSE 0 END) AS P18_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' THEN dat.D1 ELSE 0 END) AS P18_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' THEN dat.D2 ELSE 0 END) AS P18_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD = '18' THEN dat.DD1Z ELSE 0 END) AS P18_GT_ORG_SUM							
							<!-- SGIS4_1210_생활권역 시작 -->
							<!-- 90세 이상 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.LK ELSE 0 END) AS P19_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.SK ELSE 0 END) AS P19_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.D1 ELSE 0 END) AS P19_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.D2 ELSE 0 END) AS P19_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.DD1Z ELSE 0 END) AS P19_GT_ORG_SUM
							<!-- SGIS4_1210_생활권역 끝 -->
						</otherwise>
					</choose>				
				</when>
				<!-- 주요 구간 -->
				<when test='stats_class_gb == "age_define"'>
					<choose>
						<when test='girdUnit == "100m"'>
							<!-- 총합 BSCA 계산용 -->
							SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS TOT_LE_ORG_CNT
							, SUM(CASE WHEN dat.BSCA = 5 THEN 1 ELSE 0 END) AS TOT_EQ_SCA_CNT
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS TOT_LE_ORG_SUM
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS TOT_LE_SCA_SUM
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS TOT_GT_ORG_SUM
							<!-- 남자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS MAN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS MAN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS MAN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS MAN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS MAN_GT_ORG_SUM			
							<!-- 여자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS WMN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS WMN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS WMN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS WMN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS WMN_GT_ORG_SUM				
							<!-- 0~14세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P01_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P01_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P01_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P01_GT_ORG_SUM				
							<!-- 20~34세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P02_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P02_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P02_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P02_GT_ORG_SUM				
							<!-- 35~64세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P03_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P03_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P03_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P03_GT_ORG_SUM				
							<!-- 15~64세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P04_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P04_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P04_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P04_GT_ORG_SUM				
							<!-- 64세이상 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P05_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P05_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P05_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P05_GT_ORG_SUM				
							<!-- 80세이상 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P06_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P06_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P06_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P06_GT_ORG_SUM				
						</when>
						<otherwise>
							<!-- 총합 BSCA 계산용 -->
							SUM(dat.LK) AS TOT_LE_ORG_CNT
							, SUM(dat.SK) AS TOT_EQ_SCA_CNT
							, SUM(dat.D1) AS TOT_LE_ORG_SUM
							, SUM(dat.D2) AS TOT_LE_SCA_SUM
							, SUM(dat.DD1Z) AS TOT_GT_ORG_SUM
							<!-- 남자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.LK ELSE 0 END) AS MAN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.SK ELSE 0 END) AS MAN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.D1 ELSE 0 END) AS MAN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.D2 ELSE 0 END) AS MAN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.DD1Z ELSE 0 END) AS MAN_GT_ORG_SUM			
							<!-- 여자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.LK ELSE 0 END) AS WMN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.SK ELSE 0 END) AS WMN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.D1 ELSE 0 END) AS WMN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.D2 ELSE 0 END) AS WMN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.DD1Z ELSE 0 END) AS WMN_GT_ORG_SUM
							<!-- 0~14세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') THEN dat.LK ELSE 0 END) AS P01_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') THEN dat.SK ELSE 0 END) AS P01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') THEN dat.D1 ELSE 0 END) AS P01_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') THEN dat.D2 ELSE 0 END) AS P01_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02', '03') THEN dat.DD1Z ELSE 0 END) AS P01_GT_ORG_SUM				
							<!-- 20~34세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') THEN dat.LK ELSE 0 END) AS P02_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') THEN dat.SK ELSE 0 END) AS P02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') THEN dat.D1 ELSE 0 END) AS P02_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') THEN dat.D2 ELSE 0 END) AS P02_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06', '07') THEN dat.DD1Z ELSE 0 END) AS P02_GT_ORG_SUM				
							<!-- 35~64세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') THEN dat.LK ELSE 0 END) AS P03_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') THEN dat.SK ELSE 0 END) AS P03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') THEN dat.D1 ELSE 0 END) AS P03_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') THEN dat.D2 ELSE 0 END) AS P03_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('08', '09', '10', '11', '12', '13') THEN dat.DD1Z ELSE 0 END) AS P03_GT_ORG_SUM				
							<!-- 15~64세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') THEN dat.LK ELSE 0 END) AS P04_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') THEN dat.SK ELSE 0 END) AS P04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') THEN dat.D1 ELSE 0 END) AS P04_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') THEN dat.D2 ELSE 0 END) AS P04_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('04', '05', '06', '07', '08', '09', '10', '11', '12', '13') THEN dat.DD1Z ELSE 0 END) AS P04_GT_ORG_SUM				
							<!-- 64세이상 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') THEN dat.LK ELSE 0 END) AS P05_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') THEN dat.SK ELSE 0 END) AS P05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') THEN dat.D1 ELSE 0 END) AS P05_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') THEN dat.D2 ELSE 0 END) AS P05_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('14', '15', '16', '17', '18', '19', '20', '21') THEN dat.DD1Z ELSE 0 END) AS P05_GT_ORG_SUM				
							<!-- 80세이상 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.LK ELSE 0 END) AS P06_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.SK ELSE 0 END) AS P06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.D1 ELSE 0 END) AS P06_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.D2 ELSE 0 END) AS P06_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.DD1Z ELSE 0 END) AS P06_GT_ORG_SUM								
						</otherwise>
					</choose>				
				</when>
				<!-- 10세 단위, 기본값 -->
				<otherwise>					
					<choose>
						<when test='girdUnit == "100m"'>
							<!-- 총합 BSCA 계산용 -->
							SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS TOT_LE_ORG_CNT
							, SUM(CASE WHEN dat.BSCA = 5 THEN 1 ELSE 0 END) AS TOT_EQ_SCA_CNT
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS TOT_LE_ORG_SUM
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS TOT_LE_SCA_SUM
							, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS TOT_GT_ORG_SUM
							<!-- 남자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS MAN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS MAN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS MAN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS MAN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '1' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS MAN_GT_ORG_SUM			
							<!-- 여자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS WMN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS WMN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS WMN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS WMN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '2' AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS WMN_GT_ORG_SUM				
							<!-- 0~9세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P01_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P01_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P01_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P01_GT_ORG_SUM				
							<!-- 10~19세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P02_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P02_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P02_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P02_GT_ORG_SUM				
							<!-- 20~29세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P03_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P03_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P03_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P03_GT_ORG_SUM				
							<!-- 30~39세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P04_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P04_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P04_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P04_GT_ORG_SUM				
							<!-- 40~49세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P05_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P05_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P05_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P05_GT_ORG_SUM				
							<!-- 50~59세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P06_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P06_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P06_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P06_GT_ORG_SUM				
							<!-- 60~69세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P07_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P07_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P07_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P07_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P07_GT_ORG_SUM				
							<!-- 70~79세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P08_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P08_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P08_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P08_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P08_GT_ORG_SUM				
							<!-- SGIS4_1210_생활권역 시작 -->
							<choose>
								<when test='isCharacteristicsPops == "Y"'>
									<!-- 80~89세 BSCA 계산용 -->
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P09_LE_ORG_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P09_EQ_SCA_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P09_LE_ORG_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P09_LE_SCA_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P09_GT_ORG_SUM
									<!-- 90세 이상 BSCA 계산용 -->
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P10_LE_ORG_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P10_EQ_SCA_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P10_LE_ORG_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P10_LE_SCA_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P10_GT_ORG_SUM
								</when>
								<otherwise>
									<!-- 80세 이상 BSCA 계산용 -->
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS P09_LE_ORG_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS P09_EQ_SCA_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P09_LE_ORG_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS P09_LE_SCA_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') AND dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS P09_GT_ORG_SUM
								</otherwise>
							</choose>
							<!-- SGIS4_1210_생활권역 끝 -->
							<!-- 참값 확인용(주석 처리해도 됨) -->
				<!-- 			,SUM(dat.PPLTN_CNT) AS TOT_PPLTN_CNT -->
				<!-- 			,SUM(CASE WHEN dat.GENDER = '1' THEN dat.PPLTN_CNT ELSE 0 END) AS MAN_CNT -->
				<!-- 			,SUM(CASE WHEN dat.GENDER = '2' THEN dat.PPLTN_CNT ELSE 0 END) AS WOMAN_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_1_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_2_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_3_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_4_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_5_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_6_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_7_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_8_CNT -->
				<!-- 			,SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.PPLTN_CNT ELSE 0 END) AS AGE_9_CNT							 -->
						</when>
						<otherwise>
							<!-- 총합 BSCA 계산용 -->
							SUM(dat.LK) AS TOT_LE_ORG_CNT
							, SUM(dat.SK) AS TOT_EQ_SCA_CNT
							, SUM(dat.D1) AS TOT_LE_ORG_SUM
							, SUM(dat.D2) AS TOT_LE_SCA_SUM
							, SUM(dat.DD1Z) AS TOT_GT_ORG_SUM
							<!-- 남자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.LK ELSE 0 END) AS MAN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.SK ELSE 0 END) AS MAN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.D1 ELSE 0 END) AS MAN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.D2 ELSE 0 END) AS MAN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '1' THEN dat.DD1Z ELSE 0 END) AS MAN_GT_ORG_SUM			
							<!-- 여자 BSCA 계산용 -->
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.LK ELSE 0 END) AS WMN_LE_ORG_CNT
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.SK ELSE 0 END) AS WMN_EQ_SCA_CNT
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.D1 ELSE 0 END) AS WMN_LE_ORG_SUM
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.D2 ELSE 0 END) AS WMN_LE_SCA_SUM
							, SUM(CASE WHEN dat.GENDER = '2' THEN dat.DD1Z ELSE 0 END) AS WMN_GT_ORG_SUM				
							<!-- 0~9세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') THEN dat.LK ELSE 0 END) AS P01_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') THEN dat.SK ELSE 0 END) AS P01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') THEN dat.D1 ELSE 0 END) AS P01_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') THEN dat.D2 ELSE 0 END) AS P01_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('01', '02') THEN dat.DD1Z ELSE 0 END) AS P01_GT_ORG_SUM				
							<!-- 10~19세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') THEN dat.LK ELSE 0 END) AS P02_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') THEN dat.SK ELSE 0 END) AS P02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') THEN dat.D1 ELSE 0 END) AS P02_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') THEN dat.D2 ELSE 0 END) AS P02_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('03', '04') THEN dat.DD1Z ELSE 0 END) AS P02_GT_ORG_SUM				
							<!-- 20~29세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') THEN dat.LK ELSE 0 END) AS P03_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') THEN dat.SK ELSE 0 END) AS P03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') THEN dat.D1 ELSE 0 END) AS P03_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') THEN dat.D2 ELSE 0 END) AS P03_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('05', '06') THEN dat.DD1Z ELSE 0 END) AS P03_GT_ORG_SUM				
							<!-- 30~39세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') THEN dat.LK ELSE 0 END) AS P04_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') THEN dat.SK ELSE 0 END) AS P04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') THEN dat.D1 ELSE 0 END) AS P04_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') THEN dat.D2 ELSE 0 END) AS P04_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('07', '08') THEN dat.DD1Z ELSE 0 END) AS P04_GT_ORG_SUM				
							<!-- 40~49세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') THEN dat.LK ELSE 0 END) AS P05_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') THEN dat.SK ELSE 0 END) AS P05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') THEN dat.D1 ELSE 0 END) AS P05_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') THEN dat.D2 ELSE 0 END) AS P05_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('09', '10') THEN dat.DD1Z ELSE 0 END) AS P05_GT_ORG_SUM				
							<!-- 50~59세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') THEN dat.LK ELSE 0 END) AS P06_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') THEN dat.SK ELSE 0 END) AS P06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') THEN dat.D1 ELSE 0 END) AS P06_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') THEN dat.D2 ELSE 0 END) AS P06_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('11', '12') THEN dat.DD1Z ELSE 0 END) AS P06_GT_ORG_SUM				
							<!-- 60~69세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') THEN dat.LK ELSE 0 END) AS P07_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') THEN dat.SK ELSE 0 END) AS P07_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') THEN dat.D1 ELSE 0 END) AS P07_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') THEN dat.D2 ELSE 0 END) AS P07_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('13', '14') THEN dat.DD1Z ELSE 0 END) AS P07_GT_ORG_SUM				
							<!-- 70~79세 BSCA 계산용 -->
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') THEN dat.LK ELSE 0 END) AS P08_LE_ORG_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') THEN dat.SK ELSE 0 END) AS P08_EQ_SCA_CNT
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') THEN dat.D1 ELSE 0 END) AS P08_LE_ORG_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') THEN dat.D2 ELSE 0 END) AS P08_LE_SCA_SUM
							, SUM(CASE WHEN dat.AGE_GROUP_CD in ('15', '16') THEN dat.DD1Z ELSE 0 END) AS P08_GT_ORG_SUM
							<!-- SGIS4_1210_생활권역 시작 -->
							<choose>
								<when test='isCharacteristicsPops == "Y"'>	
									<!-- 80~89세 BSCA 계산용 -->
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') THEN dat.LK ELSE 0 END) AS P09_LE_ORG_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') THEN dat.SK ELSE 0 END) AS P09_EQ_SCA_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') THEN dat.D1 ELSE 0 END) AS P09_LE_ORG_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') THEN dat.D2 ELSE 0 END) AS P09_LE_SCA_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18') THEN dat.DD1Z ELSE 0 END) AS P09_GT_ORG_SUM
									<!-- 90세 이상 BSCA 계산용 -->
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.LK ELSE 0 END) AS P10_LE_ORG_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.SK ELSE 0 END) AS P10_EQ_SCA_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.D1 ELSE 0 END) AS P10_LE_ORG_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.D2 ELSE 0 END) AS P10_LE_SCA_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('19', '20', '21') THEN dat.DD1Z ELSE 0 END) AS P10_GT_ORG_SUM																		
								</when>
								<otherwise>											
									<!-- 80세 이상 BSCA 계산용 -->
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.LK ELSE 0 END) AS P09_LE_ORG_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.SK ELSE 0 END) AS P09_EQ_SCA_CNT
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.D1 ELSE 0 END) AS P09_LE_ORG_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.D2 ELSE 0 END) AS P09_LE_SCA_SUM
									, SUM(CASE WHEN dat.AGE_GROUP_CD in ('17', '18', '19', '20', '21') THEN dat.DD1Z ELSE 0 END) AS P09_GT_ORG_SUM
								</otherwise>
							</choose>
							<!-- SGIS4_1210_생활권역 끝 -->
						</otherwise>
					</choose>
				</otherwise>
			</choose>		
		<!-- SGIS4_1025_생활권역 끝 -->					
		FROM SRV_DT_GRID_POPS_2015_MT_BSCA with (nolock) dat
		<if test='"N".equals(isUseGeneratedGridNumber)'>
			inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD
			<choose>
				<when test="srvAreaType == 1">
					and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1
				</when>
				<otherwise>
					and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1
				</otherwise>
			</choose>
		</if>			
		WHERE
			dat.BASE_YEAR = #{base_year} 
			AND dat.GRID_LEVEL_DIV = #{girdUnit}
			<if test='"Y".equals(isUseGeneratedGridNumber)'>
				AND dat.GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
			</if>
	</select>
	<!-- selectSrvAreaGridPopsList 와 동일(select 절만 다름) -->
<!-- 	<select id="selectSrvAreaGridPopsBSCA" parameterType="hashmap" resultType="hashmap"> -->
<!-- 		SELECT -->
<!-- 			SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS LE_ORG_CNT -->
<!-- 			, SUM(CASE WHEN dat.BSCA = 5 THEN 1 ELSE 0 END) AS EQ_SCA_CNT -->
<!-- 			, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS LE_ORG_SUM -->
<!-- 			, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS LE_SCA_SUM -->
<!-- 			, SUM(CASE WHEN dat.PPLTN_CNT <![CDATA[>]]> 5 THEN dat.PPLTN_CNT ELSE 0 END) AS GT_ORG_SUM -->
<!-- 		FROM SRV_DT_GRID_POPS_2015_MT_BSCA with (nolock) dat -->
<!-- 			inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD -->
<!-- 			<choose> -->
<!-- 				<when test="srvAreaType == 1"> -->
<!-- 					and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1 -->
<!-- 				</when> -->
<!-- 				<otherwise> -->
<!-- 					and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1 -->
<!-- 				</otherwise> -->
<!-- 			</choose>		 -->
<!-- 		WHERE -->
<!-- 			dat.BASE_YEAR = #{base_year}  -->
<!-- 			AND dat.GRID_LEVEL_DIV = #{girdUnit}	 -->
<!-- 	</select> -->
	<select id="selectSrvAreaGridFamilyList" parameterType="hashmap" resultType="hashmap">
		SELECT
			<choose>
				<when test='girdUnit == "100m"'>		
					<!-- 총합 BSCA 계산용 -->
					SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS TOT_LE_ORG_CNT
					, SUM(CASE WHEN dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS TOT_EQ_SCA_CNT
					, SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS TOT_LE_ORG_SUM
					, SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS TOT_LE_SCA_SUM
					, SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS TOT_GT_ORG_SUM
					<!-- 1인가구 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS F01_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' AND dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS F01_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F01_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS F01_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' AND dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F01_GT_ORG_SUM			
					<!-- 비혈연가구 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS F02_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' AND dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS F02_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F02_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS F02_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' AND dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F02_GT_ORG_SUM			
					<!-- 혈연가구 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS F03_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') AND dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS F03_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F03_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS F03_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') AND dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F03_GT_ORG_SUM
					<!-- 참값 확인용(주석 처리해도 됨) -->
		<!-- 			, SUM(dat.FAMILY_CNT) AS TOT_FAMILY_CNT -->
		<!-- 			, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' THEN dat.FAMILY_CNT ELSE 0 END) AS FAMILY_1_CNT -->
		<!-- 			, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' THEN dat.FAMILY_CNT ELSE 0 END) AS FAMILY_2_CNT -->
		<!-- 			, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') THEN dat.FAMILY_CNT ELSE 0 END) AS FAMILY_3_CNT					 -->
		            <!-- SGIS4_1025_생활권역 시작 -->
					<!-- 1세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS F04_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' AND dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS F04_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F04_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS F04_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' AND dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F04_GT_ORG_SUM
					<!-- 2세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS F05_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' AND dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS F05_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F05_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS F05_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' AND dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F05_GT_ORG_SUM
					<!-- 3세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS F06_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' AND dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS F06_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F06_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS F06_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' AND dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F06_GT_ORG_SUM
					<!-- 4세대/5세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS F07_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') AND dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS F07_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F07_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') AND dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS F07_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') AND dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS F07_GT_ORG_SUM
				    <!-- SGIS4_1025_생활권역 끝 -->
				</when>
				<otherwise>
					<!-- 총합 BSCA 계산용 -->
					SUM(dat.FAMILY_LK) AS TOT_LE_ORG_CNT
					, SUM(dat.FAMILY_SK) AS TOT_EQ_SCA_CNT
					, SUM(dat.FAMILY_D1) AS TOT_LE_ORG_SUM
					, SUM(dat.FAMILY_D2) AS TOT_LE_SCA_SUM
					, SUM(dat.FAMILY_DD1Z) AS TOT_GT_ORG_SUM
					<!-- 1인가구 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' THEN dat.FAMILY_LK ELSE 0 END) AS F01_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' THEN dat.FAMILY_SK ELSE 0 END) AS F01_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' THEN dat.FAMILY_D1 ELSE 0 END) AS F01_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' THEN dat.FAMILY_D2 ELSE 0 END) AS F01_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'A0' THEN dat.FAMILY_DD1Z ELSE 0 END) AS F01_GT_ORG_SUM			
					<!-- 비혈연가구 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' THEN dat.FAMILY_LK ELSE 0 END) AS F02_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' THEN dat.FAMILY_SK ELSE 0 END) AS F02_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' THEN dat.FAMILY_D1 ELSE 0 END) AS F02_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' THEN dat.FAMILY_D2 ELSE 0 END) AS F02_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = 'B0' THEN dat.FAMILY_DD1Z ELSE 0 END) AS F02_GT_ORG_SUM			
					<!-- 혈연가구 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') THEN dat.FAMILY_LK ELSE 0 END) AS F03_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') THEN dat.FAMILY_SK ELSE 0 END) AS F03_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') THEN dat.FAMILY_D1 ELSE 0 END) AS F03_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') THEN dat.FAMILY_D2 ELSE 0 END) AS F03_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE not in ('A0', 'B0') THEN dat.FAMILY_DD1Z ELSE 0 END) AS F03_GT_ORG_SUM
					<!-- SGIS4_1025_생활권역 시작 -->
					<!-- 1세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' THEN dat.FAMILY_LK ELSE 0 END) AS F04_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' THEN dat.FAMILY_SK ELSE 0 END) AS F04_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' THEN dat.FAMILY_D1 ELSE 0 END) AS F04_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' THEN dat.FAMILY_D2 ELSE 0 END) AS F04_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '01' THEN dat.FAMILY_DD1Z ELSE 0 END) AS F04_GT_ORG_SUM
					<!-- 2세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' THEN dat.FAMILY_LK ELSE 0 END) AS F05_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' THEN dat.FAMILY_SK ELSE 0 END) AS F05_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' THEN dat.FAMILY_D1 ELSE 0 END) AS F05_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' THEN dat.FAMILY_D2 ELSE 0 END) AS F05_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '02' THEN dat.FAMILY_DD1Z ELSE 0 END) AS F05_GT_ORG_SUM
					<!-- 3세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' THEN dat.FAMILY_LK ELSE 0 END) AS F06_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' THEN dat.FAMILY_SK ELSE 0 END) AS F06_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' THEN dat.FAMILY_D1 ELSE 0 END) AS F06_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' THEN dat.FAMILY_D2 ELSE 0 END) AS F06_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE = '03' THEN dat.FAMILY_DD1Z ELSE 0 END) AS F06_GT_ORG_SUM
					<!-- 4세대/5세대 BSCA 계산용 -->
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') THEN dat.FAMILY_LK ELSE 0 END) AS F07_LE_ORG_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') THEN dat.FAMILY_SK ELSE 0 END) AS F07_EQ_SCA_CNT
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') THEN dat.FAMILY_D1 ELSE 0 END) AS F07_LE_ORG_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') THEN dat.FAMILY_D2 ELSE 0 END) AS F07_LE_SCA_SUM
					, SUM(CASE WHEN dat.RD_HOUSEHOLD_TYPE in ('04', '05') THEN dat.FAMILY_DD1Z ELSE 0 END) AS F07_GT_ORG_SUM
					<!-- SGIS4_1025_생활권역 끝 -->			
				</otherwise>
			</choose>				
		FROM SRV_DT_GRID_FAMILY_2015_MT_BSCA with (nolock) dat
		<if test='"N".equals(isUseGeneratedGridNumber)'>
			inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD
			<choose>
				<when test="srvAreaType == 1">
					and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1
				</when>
				<otherwise>
					and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1
				</otherwise>
			</choose>
		</if>			
		WHERE
			dat.BASE_YEAR = #{base_year} 
			AND dat.GRID_LEVEL_DIV = #{girdUnit}
			<if test='"Y".equals(isUseGeneratedGridNumber)'>
				AND dat.GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
			</if>			
	</select>
	<!-- selectSrvAreaGridFamilyList 와 동일(select 절만 다름) -->
<!-- 	<select id="selectSrvAreaGridFamilyBSCA" parameterType="hashmap" resultType="hashmap"> -->
<!-- 		SELECT -->
<!-- 			SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS LE_ORG_CNT -->
<!-- 			, SUM(CASE WHEN dat.FAMILY_BSCA = 5 THEN 1 ELSE 0 END) AS EQ_SCA_CNT -->
<!-- 			, SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS LE_ORG_SUM -->
<!-- 			, SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[<=]]> 5 THEN dat.FAMILY_BSCA ELSE 0 END) AS LE_SCA_SUM -->
<!-- 			, SUM(CASE WHEN dat.FAMILY_CNT <![CDATA[>]]> 5 THEN dat.FAMILY_CNT ELSE 0 END) AS GT_ORG_SUM -->
<!-- 		FROM SRV_DT_GRID_FAMILY_2015_MT_BSCA with (nolock) dat -->
<!-- 			inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD -->
<!-- 			<choose> -->
<!-- 				<when test="srvAreaType == 1"> -->
<!-- 					and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1 -->
<!-- 				</when> -->
<!-- 				<otherwise> -->
<!-- 					and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1 -->
<!-- 				</otherwise> -->
<!-- 			</choose>		 -->
<!-- 		WHERE -->
<!-- 			dat.BASE_YEAR = #{base_year}  -->
<!-- 			AND dat.GRID_LEVEL_DIV = #{girdUnit}	 -->
<!-- 	</select> -->
	<select id="selectSrvAreaGridHouseList" parameterType="hashmap" resultType="hashmap">
		SELECT
			<choose>
			<!-- SGIS4_1025_생활권역 시작 -->
				<!-- 주택면적 -->
				<when test='stats_class_gb == "area"'>
					<choose>
						<when test='girdUnit == "100m"'>
							<!-- 총합 BSCA 계산용 -->
							SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS TOT_LE_ORG_CNT
							, SUM(CASE WHEN dat.BSCA = 5 THEN 1 ELSE 0 END) AS TOT_EQ_SCA_CNT
							, SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS TOT_LE_ORG_SUM
							, SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS TOT_LE_SCA_SUM
							, SUM(CASE WHEN dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS TOT_GT_ORG_SUM			
							<!-- 20㎡ 이하	 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H01_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H01_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H01_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H01_GT_ORG_SUM				
							<!-- 20㎡ ~ 40 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H02_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H02_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H02_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H02_GT_ORG_SUM				
							<!-- 40㎡ ~ 60㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H03_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H03_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H03_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H03_GT_ORG_SUM				
							<!-- 60㎡ ~ 85㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H04_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H04_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H04_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H04_GT_ORG_SUM			
							<!-- 85㎡ ~ 100㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H05_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H05_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H05_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H05_GT_ORG_SUM
							<!-- 100㎡ ~ 130㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H06_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H06_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H06_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H06_GT_ORG_SUM
							<!-- 130㎡ ~ 165㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H07_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H07_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H07_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H07_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H07_GT_ORG_SUM
							<!-- 165㎡ ~ 230㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H08_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H08_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H08_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H08_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H08_GT_ORG_SUM
							<!-- 230㎡ 초과 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H09_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H09_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H09_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H09_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H09_GT_ORG_SUM
							
						</when>
						<otherwise>
							SUM(dat.LK) AS TOT_LE_ORG_CNT
							, SUM(dat.SK) AS TOT_EQ_SCA_CNT
							, SUM(dat.D1) AS TOT_LE_ORG_SUM
							, SUM(dat.D2) AS TOT_LE_SCA_SUM
							, SUM(dat.DD1Z) AS TOT_GT_ORG_SUM			
							<!-- 20㎡ 이하	 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.LK ELSE 0 END) AS H01_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.SK ELSE 0 END) AS H01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.D1 ELSE 0 END) AS H01_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.D2 ELSE 0 END) AS H01_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.DD1Z ELSE 0 END) AS H01_GT_ORG_SUM				
							<!-- 20㎡ ~ 40 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.LK ELSE 0 END) AS H02_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.SK ELSE 0 END) AS H02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.D1 ELSE 0 END) AS H02_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.D2 ELSE 0 END) AS H02_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.DD1Z ELSE 0 END) AS H02_GT_ORG_SUM				
							<!-- 40㎡ ~ 60㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.LK ELSE 0 END) AS H03_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.SK ELSE 0 END) AS H03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.D1 ELSE 0 END) AS H03_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.D2 ELSE 0 END) AS H03_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.DD1Z ELSE 0 END) AS H03_GT_ORG_SUM				
							<!-- 60㎡ ~ 85㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.LK ELSE 0 END) AS H04_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.SK ELSE 0 END) AS H04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.D1 ELSE 0 END) AS H04_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.D2 ELSE 0 END) AS H04_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.DD1Z ELSE 0 END) AS H04_GT_ORG_SUM			
							<!-- 85㎡ ~ 100㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.LK ELSE 0 END) AS H05_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.SK ELSE 0 END) AS H05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.D1 ELSE 0 END) AS H05_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.D2 ELSE 0 END) AS H05_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.DD1Z ELSE 0 END) AS H05_GT_ORG_SUM
							<!-- 100㎡ ~ 130㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' THEN dat.LK ELSE 0 END) AS H06_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' THEN dat.SK ELSE 0 END) AS H06_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' THEN dat.D1 ELSE 0 END) AS H06_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' THEN dat.D2 ELSE 0 END) AS H06_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '06' THEN dat.DD1Z ELSE 0 END) AS H06_GT_ORG_SUM
							<!-- 130㎡ ~ 165㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' THEN dat.LK ELSE 0 END) AS H07_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' THEN dat.SK ELSE 0 END) AS H07_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' THEN dat.D1 ELSE 0 END) AS H07_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' THEN dat.D2 ELSE 0 END) AS H07_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '07' THEN dat.DD1Z ELSE 0 END) AS H07_GT_ORG_SUM
							<!-- 165㎡ ~ 230㎡ BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' THEN dat.LK ELSE 0 END) AS H08_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' THEN dat.SK ELSE 0 END) AS H08_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' THEN dat.D1 ELSE 0 END) AS H08_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' THEN dat.D2 ELSE 0 END) AS H08_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '08' THEN dat.DD1Z ELSE 0 END) AS H08_GT_ORG_SUM
							<!-- 230㎡ 초과 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' THEN dat.LK ELSE 0 END) AS H09_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' THEN dat.SK ELSE 0 END) AS H09_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' THEN dat.D1 ELSE 0 END) AS H09_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' THEN dat.D2 ELSE 0 END) AS H09_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '09' THEN dat.DD1Z ELSE 0 END) AS H09_GT_ORG_SUM
						</otherwise>
					</choose>
				</when>
				<!-- 주택유형 -->
				<otherwise>
					<choose>
						<when test='girdUnit == "100m"'>		
							<!-- 총합 BSCA 계산용 -->
							SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS TOT_LE_ORG_CNT
							, SUM(CASE WHEN dat.BSCA = 5 THEN 1 ELSE 0 END) AS TOT_EQ_SCA_CNT
							, SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS TOT_LE_ORG_SUM
							, SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS TOT_LE_SCA_SUM
							, SUM(CASE WHEN dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS TOT_GT_ORG_SUM			
							<!-- 단독주택 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H01_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H01_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H01_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H01_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H01_GT_ORG_SUM				
							<!-- 아파트 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H02_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H02_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H02_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H02_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H02_GT_ORG_SUM				
							<!-- 연립주택 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H03_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H03_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H03_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H03_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H03_GT_ORG_SUM				
							<!-- 다세대주택 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H04_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H04_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H04_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H04_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H04_GT_ORG_SUM			
							<!-- 비거주용 건물 내주택 BSCA 계산용 -->
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H05_LE_ORG_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H05_LE_ORG_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H05_LE_SCA_SUM
							, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H05_GT_ORG_SUM
					<!-- 주택이외의 거처 BSCA 계산용 -->
		<!-- 			, SUM(CASE WHEN dat.HOUSE_TYPE_CD NOT IN ('01', '02', '03', '04', '05') AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS H06_LE_ORG_CNT -->
		<!-- 			, SUM(CASE WHEN dat.HOUSE_TYPE_CD NOT IN ('01', '02', '03', '04', '05') AND dat.BSCA = 5 THEN 1 ELSE 0 END) AS H06_EQ_SCA_CNT -->
		<!-- 			, SUM(CASE WHEN dat.HOUSE_TYPE_CD NOT IN ('01', '02', '03', '04', '05') AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H06_LE_ORG_SUM -->
		<!-- 			, SUM(CASE WHEN dat.HOUSE_TYPE_CD NOT IN ('01', '02', '03', '04', '05') AND dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS H06_LE_SCA_SUM -->
		<!-- 			, SUM(CASE WHEN dat.HOUSE_TYPE_CD NOT IN ('01', '02', '03', '04', '05') AND dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS H06_GT_ORG_SUM -->
					<!-- 참값 확인용(주석 처리해도 됨) -->
		<!-- 			,SUM(dat.RESID_CNT) AS TOT_HOUSE_CNT -->
		<!-- 			,SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.RESID_CNT ELSE 0 END) AS HOUSE_1_CNT -->
		<!-- 			,SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.RESID_CNT ELSE 0 END) AS HOUSE_2_CNT -->
		<!-- 			,SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.RESID_CNT ELSE 0 END) AS HOUSE_3_CNT -->
		<!-- 			,SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.RESID_CNT ELSE 0 END) AS HOUSE_4_CNT -->
		<!-- 			,SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.RESID_CNT ELSE 0 END) AS HOUSE_5_CNT -->
		<!-- 			,SUM(CASE WHEN dat.HOUSE_TYPE_CD NOT IN ('01', '02', '03', '04', '05') THEN dat.RESID_CNT ELSE 0 END) AS HOUSE_6_CNT						 -->
					</when>
					<otherwise>
						<!-- 총합 BSCA 계산용 -->
						SUM(dat.LK) AS TOT_LE_ORG_CNT
						, SUM(dat.SK) AS TOT_EQ_SCA_CNT
						, SUM(dat.D1) AS TOT_LE_ORG_SUM
						, SUM(dat.D2) AS TOT_LE_SCA_SUM
						, SUM(dat.DD1Z) AS TOT_GT_ORG_SUM			
						<!-- 단독주택 BSCA 계산용 -->
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.LK ELSE 0 END) AS H01_LE_ORG_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.SK ELSE 0 END) AS H01_EQ_SCA_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.D1 ELSE 0 END) AS H01_LE_ORG_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.D2 ELSE 0 END) AS H01_LE_SCA_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '01' THEN dat.DD1Z ELSE 0 END) AS H01_GT_ORG_SUM				
						<!-- 아파트 BSCA 계산용 -->
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.LK ELSE 0 END) AS H02_LE_ORG_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.SK ELSE 0 END) AS H02_EQ_SCA_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.D1 ELSE 0 END) AS H02_LE_ORG_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.D2 ELSE 0 END) AS H02_LE_SCA_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '02' THEN dat.DD1Z ELSE 0 END) AS H02_GT_ORG_SUM				
						<!-- 연립주택 BSCA 계산용 -->
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.LK ELSE 0 END) AS H03_LE_ORG_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.SK ELSE 0 END) AS H03_EQ_SCA_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.D1 ELSE 0 END) AS H03_LE_ORG_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.D2 ELSE 0 END) AS H03_LE_SCA_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '03' THEN dat.DD1Z ELSE 0 END) AS H03_GT_ORG_SUM				
						<!-- 다세대주택 BSCA 계산용 -->
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.LK ELSE 0 END) AS H04_LE_ORG_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.SK ELSE 0 END) AS H04_EQ_SCA_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.D1 ELSE 0 END) AS H04_LE_ORG_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.D2 ELSE 0 END) AS H04_LE_SCA_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '04' THEN dat.DD1Z ELSE 0 END) AS H04_GT_ORG_SUM			
						<!-- 비거주용 건물 내주택 BSCA 계산용 -->
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.LK ELSE 0 END) AS H05_LE_ORG_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.SK ELSE 0 END) AS H05_EQ_SCA_CNT
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.D1 ELSE 0 END) AS H05_LE_ORG_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.D2 ELSE 0 END) AS H05_LE_SCA_SUM
						, SUM(CASE WHEN dat.HOUSE_TYPE_CD = '05' THEN dat.DD1Z ELSE 0 END) AS H05_GT_ORG_SUM				
					</otherwise>
				</choose>
			</otherwise>
		<!-- SGIS4_1025_생활권역 끝 -->	
		</choose>			
		FROM SRV_DT_GRID_HOUSE_2015_MT_BSCA with (nolock) dat
		<if test='"N".equals(isUseGeneratedGridNumber)'>
			inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD
			<choose>
				<when test="srvAreaType == 1">
					and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1
				</when>
				<otherwise>
					and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1
				</otherwise>
			</choose>
		</if>			
		WHERE
			dat.BASE_YEAR = #{base_year} 
			AND dat.GRID_LEVEL_DIV = #{girdUnit}
			<if test='"Y".equals(isUseGeneratedGridNumber)'>
				AND dat.GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
			</if>
			<!-- SGIS4_1025_생활권역 시작 -->
			<choose>
				<when test='stats_class_gb == "area"'>
					AND dat.HOUSE_TYPE = 'area'
				</when>
				<otherwise>
					AND dat.HOUSE_TYPE = 'resid_type'
					AND dat.HOUSE_TYPE_CD IN ('01', '02', '03', '04', '05')	<!-- 주택이외의 거처 제외 -->
				</otherwise>
			</choose>
			<!-- SGIS4_1025_생활권역 끝 -->		
	</select>
	<!-- selectSrvAreaGridHouseList 와 동일(select 절만 다름) -->
<!-- 	<select id="selectSrvAreaGridHouseBSCA" parameterType="hashmap" resultType="hashmap"> -->
<!-- 		SELECT -->
<!-- 			SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN 1 ELSE 0 END) AS LE_ORG_CNT -->
<!-- 			, SUM(CASE WHEN dat.BSCA = 5 THEN 1 ELSE 0 END) AS EQ_SCA_CNT -->
<!-- 			, SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS LE_ORG_SUM -->
<!-- 			, SUM(CASE WHEN dat.RESID_CNT <![CDATA[<=]]> 5 THEN dat.BSCA ELSE 0 END) AS LE_SCA_SUM -->
<!-- 			, SUM(CASE WHEN dat.RESID_CNT <![CDATA[>]]> 5 THEN dat.RESID_CNT ELSE 0 END) AS GT_ORG_SUM			 -->
<!-- 		FROM SRV_DT_GRID_HOUSE_2015_MT_BSCA with (nolock) dat -->
<!-- 			inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD -->
<!-- 			<choose> -->
<!-- 				<when test="srvAreaType == 1"> -->
<!-- 					and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1 -->
<!-- 				</when> -->
<!-- 				<otherwise> -->
<!-- 					and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1 -->
<!-- 				</otherwise> -->
<!-- 			</choose>		 -->
<!-- 		WHERE -->
<!-- 			dat.BASE_YEAR = #{base_year}  -->
<!-- 			AND dat.GRID_LEVEL_DIV = #{girdUnit}	 -->
<!-- 	</select> -->
	<select id="selectGridScopeList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			b_class_cd
			, s_class_cd
			, s_class_cd_nm
			, cd_exp
<!-- 			, (case when s_class_cd = '0_4' then '01'  -->
<!-- 				when s_class_cd = '5_9' then '02' -->
<!-- 				when s_class_cd = '10_14' then '03' -->
<!-- 				when s_class_cd = '15_19' then '04'  -->
<!-- 				when s_class_cd = '20_24' then '05'  -->
<!-- 				when s_class_cd = '25_29' then '06'  -->
<!-- 				when s_class_cd = '30_34' then '07'  -->
<!-- 				when s_class_cd = '35_39' then '08'  -->
<!-- 				when s_class_cd = '40_44' then '09'  -->
<!-- 				when s_class_cd = '45_49' then '10' -->
<!-- 				when s_class_cd = '50_54' then '11' -->
<!-- 				when s_class_cd = '55_59' then '12' -->
<!-- 				when s_class_cd = '60_64' then '13'  -->
<!-- 				when s_class_cd = '65_69' then '14'  -->
<!-- 				when s_class_cd = '70_74' then '15'  -->
<!-- 				when s_class_cd = '75_79' then '16'  -->
<!-- 				when s_class_cd = '80_84' then '17'  -->
<!-- 				when s_class_cd = '85_89' then '18'  -->
<!-- 				when s_class_cd = '90_94' then '19' -->
<!-- 				when s_class_cd = '95_99' then '20' -->
<!-- 				when s_class_cd = '100_200' then '21' -->
<!-- 				else '' end) as age_cd -->
		FROM CMM_CD_COMCD with (nolock)
		<!-- SGIS4_1210_생활권역 시작 -->
		WHERE b_class_cd IN ('SRVA02', 'SRVA03', <!-- 'SRVA17', --> 'SRVA18', 'SRVA19' , 'SRVA20','SRVA21')
			<!-- or (b_class_cd = 'SRVA01' and cd_exp = 'R') -->
		order by b_class_cd, s_class_cd_order
		<!-- SGIS4_1210_생활권역 끝 -->
	</select>
	
	<!-- 사용처: 격자분포, 전체정보(특성별 통계 보기: isCharacteristics땡땡땡 으로 구분) -->
	<sql id="saGridPopsStat">
		SELECT
			<choose>
				<when test='isCharacteristicsPops == "Y"'>
					BASE_YEAR
					, sum(BSCA) AS PPLTN_CNT
				</when>
				<otherwise>
					GRID_CD
					, sum(BSCA) AS PPLTN_CNT
					, BASE_YEAR
				</otherwise>
			</choose>		
		FROM SRV_DT_GRID_POPS_2015_MT_BSCA with (nolock)
		WHERE 1=1
		<if test="area != null and area != ''"> 
			AND GRID_CD IN (
					SELECT GRID_${grid_level}_CD
					FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<choose>
						<when test="srvAreaType == 1">
							WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
						</when>
						<otherwise>
							WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
						</otherwise>
					</choose>			
			)
		</if>
		<if test="gender != null and gender != ''"> 
			AND GENDER = #{gender}
		</if>
		<choose>
			<when test='isRangeSch == "Y"'>
				AND AGE_GROUP_CD between #{ageFromCd} and #{ageToCd}		
			</when>
			<when test='isRangeSch == "N"'>
				AND AGE_GROUP_CD = #{ageFromCd}
			</when>
		</choose>					
		<if test='byYear != "Y"'>
			<if test="base_year != null and base_year != ''"> 
				AND BASE_YEAR = #{base_year}
			</if>
		</if>
		<choose>
			<when test='isCharacteristicsPops == "Y"'>
				GROUP BY BASE_YEAR
			</when>
			<otherwise>
				GROUP BY BASE_YEAR, GRID_CD
			</otherwise>
		</choose>		
	</sql>
	
	<!-- saGridPopsStat 와 동일(select절 변경, 집계값을 java에서 구하는 방식으로 변경) -->
	<select id="selectPopsList" parameterType="hashmap" resultType="hashmap">
		SELECT
			BASE_YEAR
			, GRID_CD
			, PPLTN_CNT
			, BSCA
			, LK
			, SK
			, D1
			, D2
			, DD1Z
			<!-- SGIS4_1025_생활권역 시작 -->
			, GENDER
			<!-- SGIS4_1025_생활권역 끝 -->			
		FROM SRV_DT_GRID_POPS_2015_MT_BSCA with (nolock)
		WHERE 1=1
		<choose>
			<when test='"Y".equals(isUseGeneratedGridNumber)'>
				AND GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
			</when>
			<otherwise>		
				<if test="area != null and area != ''"> 
					AND GRID_CD IN (
							SELECT GRID_${grid_level}_CD
							FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
								<choose>
									<when test="srvAreaType == 1">
										WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
									</when>
									<otherwise>
										WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
									</otherwise>
								</choose>
<!-- 							<choose> -->
<!-- 								<when test='grid_level == "100m"'> -->
<!-- 									SELECT GRID_100M_CD -->
<!-- 									FROM SRV_PG_GRID_100M_BORD with (nolock) -->
<!-- 									<choose> -->
<!-- 										<when test="srvAreaType == 1"> -->
<!-- 											WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 										</when> -->
<!-- 										<otherwise> -->
<!-- 											WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 										</otherwise> -->
<!-- 									</choose>	 -->
<!-- 								</when> -->
<!-- 								<otherwise> -->
<!-- 									SELECT g2.GRID_100M_CD -->
<!-- 									FROM SRV_PG_GRID_${grid_level}_BORD with (nolock) g1 -->
<!-- 											inner join SRV_PG_GRID_100m_BORD with (nolock) g2 on st_within(g2.BORD, g1.BORD)=1 -->
<!-- 									<choose> -->
<!-- 										<when test="srvAreaType == 1"> -->
<!-- 											WHERE st_intersects(g1.BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 										</when> -->
<!-- 										<otherwise> -->
<!-- 											WHERE st_intersects(g1.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 										</otherwise> -->
<!-- 									</choose> -->
<!-- 								</otherwise> -->
<!-- 							</choose>			 -->
					)
				</if>
			</otherwise>
		</choose>				
		<if test="gender != null and gender != ''"> 
			AND GENDER = #{gender}
		</if>
		<choose>
			<when test='isRangeSch == "Y"'>
				AND AGE_GROUP_CD between #{ageFromCd} and #{ageToCd}		
			</when>
			<when test='isRangeSch == "N"'>
				AND AGE_GROUP_CD = #{ageFromCd}
			</when>
		</choose>
		<!-- SGIS4_1210_생활권역 시작 -->
		<choose>					
			<when test='byYear != "Y"'>
				<!--<if test="base_year != null and base_year != ''"> --> 
					AND BASE_YEAR = #{base_year}
				<!--</if> -->
			</when>
			<otherwise>
				<!-- AND BASE_YEAR NOT IN ('2000','2005','2010') -->	
				AND BASE_YEAR <![CDATA[>=]]> '2015'			
			</otherwise>
		</choose>
		<!-- SGIS4_1210_생활권역 끝 -->
		
<!-- 기존 시작 -->		
<!-- 		SELECT -->
<!-- 			BASE_YEAR -->
<!-- 			, GRID_CD -->
<!-- 			, PPLTN_CNT -->
<!-- 			, BSCA -->
<!-- 		FROM SRV_DT_GRID_POPS_2015_MT_BSCA with (nolock) -->
<!-- 		WHERE 1=1 -->
<!-- 		<if test="area != null and area != ''">  -->
<!-- 			AND GRID_CD IN ( -->
<!-- 					SELECT GRID_${grid_level}_CD -->
<!-- 					FROM SRV_PG_GRID_${grid_level}_BORD with (nolock) -->
<!-- 					<choose> -->
<!-- 						<when test="srvAreaType == 1"> -->
<!-- 							WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 						</otherwise> -->
<!-- 					</choose>			 -->
<!-- 			) -->
<!-- 		</if> -->
<!-- 		<if test="gender != null and gender != ''">  -->
<!-- 			AND GENDER = #{gender} -->
<!-- 		</if> -->
<!-- 		<choose> -->
<!-- 			<when test='isRangeSch == "Y"'> -->
<!-- 				AND AGE_GROUP_CD between #{ageFromCd} and #{ageToCd}		 -->
<!-- 			</when> -->
<!-- 			<when test='isRangeSch == "N"'> -->
<!-- 				AND AGE_GROUP_CD = #{ageFromCd} -->
<!-- 			</when> -->
<!-- 		</choose>					 -->
<!-- 		<if test='byYear != "Y"'> -->
<!-- 			<if test="base_year != null and base_year != ''">  -->
<!-- 				AND BASE_YEAR = #{base_year} -->
<!-- 			</if> -->
<!-- 		</if>		 -->
<!-- 기존 끝 -->		

<!-- 조인 방식 시작 -->		
<!-- 		SELECT -->
<!-- 			st.BASE_YEAR -->
<!-- 			, bd.GRID_CD -->
<!-- 			, st.PPLTN_CNT -->
<!-- 			, st.BSCA -->
<!-- 		FROM  -->
<!-- 			SRV_DT_GRID_POPS_2015_MT_BSCA with (nolock) st -->
<!-- 			inner join ( -->
<!-- 				<choose> -->
<!-- 					<when test='grid_level == "100m"'> -->
<!-- 						SELECT  -->
<!-- 							GRID_100M_CD -->
<!-- 							, GRID_100M_CD as GRID_CD -->
<!-- 						FROM SRV_PG_GRID_100M_BORD with (nolock) -->
<!-- 						<choose> -->
<!-- 							<when test="srvAreaType == 1"> -->
<!-- 								WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 							</when> -->
<!-- 							<otherwise> -->
<!-- 								WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 							</otherwise> -->
<!-- 						</choose>	 -->
<!-- 					</when> -->
<!-- 					<otherwise> -->
<!-- 						SELECT  -->
<!-- 							g2.GRID_100M_CD -->
<!-- 							g1.GRID_${grid_level}_CD as GRID_CD -->
<!-- 						FROM SRV_PG_GRID_${grid_level}_BORD with (nolock) g1 -->
<!-- 								inner join SRV_PG_GRID_100m_BORD with (nolock) g2 on st_within(g2.BORD, g1.BORD)=1 -->
<!-- 						<choose> -->
<!-- 							<when test="srvAreaType == 1"> -->
<!-- 								WHERE st_intersects(g1.BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 							</when> -->
<!-- 							<otherwise> -->
<!-- 								WHERE st_intersects(g1.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 							</otherwise> -->
<!-- 						</choose> -->
<!-- 					</otherwise> -->
<!-- 				</choose>			 -->
<!-- 			) bd on bd.GRID_100m_CD = st.GRID_CD -->
<!-- 		WHERE 1=1 -->
<!-- 		<if test="gender != null and gender != ''">  -->
<!-- 			AND st.GENDER = #{gender} -->
<!-- 		</if> -->
<!-- 		<choose> -->
<!-- 			<when test='isRangeSch == "Y"'> -->
<!-- 				AND st.AGE_GROUP_CD between #{ageFromCd} and #{ageToCd}		 -->
<!-- 			</when> -->
<!-- 			<when test='isRangeSch == "N"'> -->
<!-- 				AND st.AGE_GROUP_CD = #{ageFromCd} -->
<!-- 			</when> -->
<!-- 		</choose>					 -->
<!-- 		<if test='byYear != "Y"'> -->
<!-- 			<if test="base_year != null and base_year != ''">  -->
<!-- 				AND st.BASE_YEAR = #{base_year} -->
<!-- 			</if> -->
<!-- 		</if>		 -->
<!-- 조인 방식 끝 -->		
	</select>
	
	<select id="selectGridSrvAreaGridPopsAllList" parameterType="hashmap" resultType="hashmap">
		select
			*, ROUND((TOT_SUM_PPLTN_CNT / GRID_CNT), 1) AS TOT_AVG_PPLTN_CNT 
		from (
			SELECT 
				sum(PPLTN_CNT) AS TOT_SUM_PPLTN_CNT
				<!--  , ROUND(avg(PPLTN_CNT), 1) AS TOT_AVG_PPLTN_CNT -->
				, (select count(*) from SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<if test="area != null and area != ''"> 
						<choose>
							<when test="srvAreaType == 1">
								WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
							</when>
							<otherwise>
								WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
							</otherwise>
						</choose>			
					</if>
				  ) as GRID_CNT			
				, (select st_area(bord) from SRV_PG_GRID_${grid_level}_BORD limit 1) as GRID_AREA
				, BASE_YEAR
			FROM (
				<include refid="saGridPopsStat" /> 
			)
			GROUP BY BASE_YEAR
		)
	</select>
	
	<select id="selectGridSrvAreaGridPopsList" parameterType="hashmap" resultType="hashmap">
		SELECT
			GRID_CD AS ADM_CD
			, GRID_CD AS ADM_NM
			<choose>
				<when test='securityGb == "NA"'>
					, (case when PPLTN_CNT <![CDATA[<]]> 5 THEN 'N/A' else PPLTN_CNT end) as PPLTN_CNT
				</when>
				<when test='securityGb == "RND"'>
					, (case when PPLTN_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else PPLTN_CNT end) as PPLTN_CNT
				</when>
				<otherwise>
					, PPLTN_CNT
				</otherwise>
			</choose>			
			, BASE_YEAR
		FROM (
			<include refid="saGridPopsStat" /> 
		)
		ORDER BY GRID_CD
	</select>
	
	<select id="selectCharacteristicsPopsList" parameterType="hashmap" resultType="hashmap">
		SELECT
			BASE_YEAR
			<choose>
				<when test='securityGb == "NA"'>
					, (case when PPLTN_CNT <![CDATA[<]]> 5 THEN 'N/A' else PPLTN_CNT end) as PPLTN_CNT
				</when>
				<when test='securityGb == "RND"'>
					, (case when PPLTN_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else PPLTN_CNT end) as PPLTN_CNT
				</when>
				<otherwise>
					, PPLTN_CNT
				</otherwise>
			</choose>			
		FROM (
			<include refid="saGridPopsStat" /> 
		)
	</select>	
	
	<!-- 사용처: 격자분포, 전체정보(특성별 통계 보기: isCharacteristics땡땡땡 으로 구분) -->
	<sql id="saGridFamilyStat">
		SELECT
			<choose>
				<when test='isCharacteristicsFamily == "Y"'>
					BASE_YEAR
					, sum(FAMILY_BSCA) AS FAMILY_CNT
				</when>
				<otherwise>
					GRID_CD
					, sum(FAMILY_BSCA) AS FAMILY_CNT
					, BASE_YEAR
				</otherwise>
			</choose>		
		FROM SRV_DT_GRID_FAMILY_2015_MT_BSCA with (nolock)
		WHERE 1=1
			<if test="area != null and area != ''"> 
				AND GRID_CD IN (
					SELECT GRID_${grid_level}_CD
					FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<choose>
						<when test="srvAreaType == 1">
							WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
						</when>
						<otherwise>
							WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
						</otherwise>
					</choose>				
				)
			</if>
			<if test='household_type != null'> 
				AND rd_household_type in
					<foreach collection="household_type" item="household" open="(" separator="," close=")">
						#{household}
					</foreach>				
			</if>
			<if test='byYear != "Y"'>
				<if test="base_year != null and base_year != ''"> 
					AND BASE_YEAR = #{base_year}
				</if>
			</if>
		<choose>
			<when test='isCharacteristicsFamily == "Y"'>
				GROUP BY BASE_YEAR
			</when>
			<otherwise>
				GROUP BY BASE_YEAR, GRID_CD
			</otherwise>
		</choose>			
	</sql>
	
	<!-- saGridFamilyStat 와 동일(select절 변경, 집계값을 java에서 구하는 방식으로 변경) -->
	<select id="selectFamilyList" parameterType="hashmap" resultType="hashmap">
		SELECT
			BASE_YEAR
			, GRID_CD
			, FAMILY_CNT
			, FAMILY_BSCA
			, FAMILY_LK as LK
			, FAMILY_SK as SK
			, FAMILY_D1 as D1
			, FAMILY_D2 as D2
			, FAMILY_DD1Z as DD1Z		
		FROM SRV_DT_GRID_FAMILY_2015_MT_BSCA with (nolock)
		WHERE 1=1
			<choose>
				<when test='"Y".equals(isUseGeneratedGridNumber)'>
					AND GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
				</when>
				<otherwise>		
					<if test="area != null and area != ''"> 
						AND GRID_CD IN (
									SELECT GRID_${grid_level}_CD
									FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
									<choose>
										<when test="srvAreaType == 1">
											WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
										</when>
										<otherwise>
											WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
										</otherwise>
									</choose>				
<!-- 								<choose> -->
<!-- 									<when test='grid_level == "100m"'> -->
<!-- 										SELECT GRID_100M_CD -->
<!-- 										FROM SRV_PG_GRID_100M_BORD with (nolock) -->
<!-- 										<choose> -->
<!-- 											<when test="srvAreaType == 1"> -->
<!-- 												WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 											</when> -->
<!-- 											<otherwise> -->
<!-- 												WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 											</otherwise> -->
<!-- 										</choose>	 -->
<!-- 									</when> -->
<!-- 									<otherwise> -->
<!-- 										SELECT g2.GRID_100M_CD -->
<!-- 										FROM SRV_PG_GRID_${grid_level}_BORD with (nolock) g1 -->
<!-- 												inner join SRV_PG_GRID_100m_BORD with (nolock) g2 on st_within(g2.BORD, g1.BORD)=1 -->
<!-- 										<choose> -->
<!-- 											<when test="srvAreaType == 1"> -->
<!-- 												WHERE st_intersects(g1.BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 											</when> -->
<!-- 											<otherwise> -->
<!-- 												WHERE st_intersects(g1.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 											</otherwise> -->
<!-- 										</choose> -->
<!-- 									</otherwise> -->
<!-- 								</choose>			 -->
						)
					</if>
				</otherwise>
			</choose>			
			<if test='household_type != null'> 
				AND rd_household_type in
					<foreach collection="household_type" item="household" open="(" separator="," close=")">
						#{household}
					</foreach>				
			</if>
			<!-- SGIS4_1210_생활권역 시작 -->
			<choose>					
				<when test='byYear != "Y"'>
					<!--<if test="base_year != null and base_year != ''"> --> 
						AND BASE_YEAR = #{base_year}
					<!--</if> -->
				</when>
				<otherwise>
					<!-- AND BASE_YEAR NOT IN ('2000','2005','2010') -->	
					AND BASE_YEAR <![CDATA[>=]]> '2015'			
				</otherwise>
			</choose>
			<!-- SGIS4_1210_생활권역 끝 -->			
	
<!-- 기존 시작 -->		
<!-- 		SELECT -->
<!-- 			BASE_YEAR -->
<!-- 			, GRID_CD -->
<!-- 			, FAMILY_CNT -->
<!-- 			, FAMILY_BSCA		 -->
<!-- 		FROM SRV_DT_GRID_FAMILY_2015_MT_BSCA with (nolock) -->
<!-- 		WHERE 1=1 -->
<!-- 			<if test="area != null and area != ''">  -->
<!-- 				AND GRID_CD IN ( -->
<!-- 					SELECT GRID_${grid_level}_CD -->
<!-- 					FROM SRV_PG_GRID_${grid_level}_BORD with (nolock) -->
<!-- 					<choose> -->
<!-- 						<when test="srvAreaType == 1"> -->
<!-- 							WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 						</otherwise> -->
<!-- 					</choose>				 -->
<!-- 				) -->
<!-- 			</if> -->
<!-- 			<if test='household_type != null'>  -->
<!-- 				AND rd_household_type in -->
<!-- 					<foreach collection="household_type" item="household" open="(" separator="," close=")"> -->
<!-- 						#{household} -->
<!-- 					</foreach>				 -->
<!-- 			</if> -->
<!-- 			<if test='byYear != "Y"'> -->
<!-- 				<if test="base_year != null and base_year != ''">  -->
<!-- 					AND BASE_YEAR = #{base_year} -->
<!-- 				</if> -->
<!-- 			</if> -->
<!-- 기존 끝 -->			
	</select>	
	
	<select id="selectGridSrvAreaGridFamilyAllList" parameterType="hashmap" resultType="hashmap">
		select
			*, ROUND((TOT_SUM_FAMILY_CNT / GRID_CNT), 1) AS TOT_AVG_FAMILY_CNT 
		from (
			SELECT 
				sum(FAMILY_CNT) AS TOT_SUM_FAMILY_CNT
				<!--  , ROUND(avg(FAMILY_CNT), 1) AS TOT_AVG_FAMILY_CNT -->
				, (select count(*) from SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<if test="area != null and area != ''"> 
						<choose>
							<when test="srvAreaType == 1">
								WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
							</when>
							<otherwise>
								WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
							</otherwise>
						</choose>			
					</if>
				  ) as GRID_CNT	
				, (select st_area(bord) from SRV_PG_GRID_${grid_level}_BORD limit 1) as GRID_AREA
				, BASE_YEAR 
			FROM (
				<include refid="saGridFamilyStat" /> 
			)
			GROUP BY BASE_YEAR
		)
	</select>
	
	<select id="selectGridSrvAreaGridFamilyList" parameterType="hashmap" resultType="hashmap">
		SELECT
			GRID_CD AS ADM_CD
			, GRID_CD AS ADM_NM
			<choose>
				<when test='securityGb == "NA"'>
					, (case when FAMILY_CNT <![CDATA[<]]> 5 THEN 'N/A' else FAMILY_CNT end) as FAMILY_CNT
				</when>
				<when test='securityGb == "RND"'>
					, (case when FAMILY_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else FAMILY_CNT end) as FAMILY_CNT
				</when>
				<otherwise>
					, FAMILY_CNT
				</otherwise>
			</choose>			
			, BASE_YEAR
		FROM (
			<include refid="saGridFamilyStat" /> 
		)
		ORDER BY GRID_CD 
	</select>

	<select id="selectCharacteristicsFamilyList" parameterType="hashmap" resultType="hashmap">
		SELECT
			BASE_YEAR
			<choose>
				<when test='securityGb == "NA"'>
					, (case when FAMILY_CNT <![CDATA[<]]> 5 THEN 'N/A' else FAMILY_CNT end) as FAMILY_CNT
				</when>
				<when test='securityGb == "RND"'>
					, (case when FAMILY_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else FAMILY_CNT end) as FAMILY_CNT
				</when>
				<otherwise>
					, FAMILY_CNT
				</otherwise>
			</choose>			
		FROM (
			<include refid="saGridFamilyStat" /> 
		)
	</select>
	
	<!-- 사용처: 격자분포, 전체정보(특성별 통계 보기: isCharacteristics땡땡땡 으로 구분) -->
	<sql id="saGridHouseStat">
		SELECT
			<choose>
				<when test='isCharacteristicsHouse == "Y"'>
					BASE_YEAR
					, sum(BSCA) AS RESID_CNT
				</when>
				<otherwise>
					GRID_CD
					, sum(BSCA) AS RESID_CNT
					, BASE_YEAR
				</otherwise>
			</choose>		
		FROM SRV_DT_GRID_HOUSE_2015_MT_BSCA with (nolock)
		WHERE 1=1
			<if test='area != null and area != ""'>
				AND GRID_CD IN (
					SELECT GRID_${grid_level}_CD
					FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<choose>
						<when test="srvAreaType == 1">
							WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
						</when>
						<otherwise>
							WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
						</otherwise>
					</choose>				
				)			
			</if>
			<if test='rd_resid_type != null'> 
				AND RD_RESID_1_TYPE in
					<foreach collection="rd_resid_type" item="rdResidType" open="(" separator="," close=")">
						#{rdResidType}
					</foreach>				
			</if>
			<if test='const_year != null and const_year != ""'>
				and rd_const_year = #{const_year}
			</if>			
			<if test='house_area_cd != null '>
				and house_area_cd in
				<foreach  collection="house_area_cd" item="houseAreaCd" open="(" separator="," close=")">
					#{houseAreaCd}
				</foreach>
			</if>			
			<if test='byYear != "Y"'>
				<if test='base_year != null and base_year != ""'> 
					AND BASE_YEAR = #{base_year}
				</if>
			</if>
		<choose>
			<when test='isCharacteristicsHouse == "Y"'>
				GROUP BY BASE_YEAR
			</when>
			<otherwise>
				GROUP BY BASE_YEAR, GRID_CD
			</otherwise>
		</choose>			
	</sql>
	
	<!-- saGridHouseStat 와 동일(select절 변경, 집계값을 java에서 구하는 방식으로 변경) -->
	<select id="selectHouseList" parameterType="hashmap" resultType="hashmap">
		SELECT
			BASE_YEAR
			, GRID_CD
			, RESID_CNT
			, BSCA
			, LK
			, SK
			, D1
			, D2
			, DD1Z		
		FROM SRV_DT_GRID_HOUSE_2015_MT_BSCA with (nolock)
		WHERE 1=1
			<choose>
				<when test='"Y".equals(isUseGeneratedGridNumber)'>
					AND GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
				</when>
				<otherwise>
					<if test="area != null and area != ''"> 
						AND GRID_CD IN (
									SELECT GRID_${grid_level}_CD
									FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
									<choose>
										<when test="srvAreaType == 1">
											WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
										</when>
										<otherwise>
											WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
										</otherwise>
									</choose>

<!-- 								<choose> -->
<!-- 									<when test='grid_level == "100m"'> -->
<!-- 										SELECT GRID_100M_CD -->
<!-- 										FROM SRV_PG_GRID_100M_BORD with (nolock) -->
<!-- 										<choose> -->
<!-- 											<when test="srvAreaType == 1"> -->
<!-- 												WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 											</when> -->
<!-- 											<otherwise> -->
<!-- 												WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 											</otherwise> -->
<!-- 										</choose>	 -->
<!-- 									</when> -->
<!-- 									<otherwise> -->
<!-- 										SELECT g2.GRID_100M_CD -->
<!-- 										FROM SRV_PG_GRID_${grid_level}_BORD with (nolock) g1 -->
<!-- 												inner join SRV_PG_GRID_100m_BORD with (nolock) g2 on st_within(g2.BORD, g1.BORD)=1 -->
<!-- 										<choose> -->
<!-- 											<when test="srvAreaType == 1"> -->
<!-- 												WHERE st_intersects(g1.BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 											</when> -->
<!-- 											<otherwise> -->
<!-- 												WHERE st_intersects(g1.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 											</otherwise> -->
<!-- 										</choose> -->
<!-- 									</otherwise> -->
<!-- 								</choose>			 -->
						)
					</if>
				</otherwise>
			</choose>			
			<if test='rd_resid_type != null'> 
				AND (HOUSE_TYPE = 'resid_type'
						AND HOUSE_TYPE_CD in
							<foreach collection="rd_resid_type" item="rdResidType" open="(" separator="," close=")">
								#{rdResidType}
							</foreach>
					)				
			</if>
			<if test='const_year != null and const_year != ""'>
				and (HOUSE_TYPE = 'const_year' and HOUSE_TYPE_CD = #{const_year})
			</if>			
			<if test='house_area_cd != null '>
				AND (HOUSE_TYPE = 'area'
						and HOUSE_TYPE_CD in
						<foreach  collection="house_area_cd" item="houseAreaCd" open="(" separator="," close=")">
							#{houseAreaCd}
						</foreach>
				)
			</if>
			<if test='rd_resid_type == null and const_year == null and house_area_cd == null'>
				<!-- 전체 요청일때,  3가지 유형의 HOUSE_TYPE이 격자별로 중복되므로 -->
				AND HOUSE_TYPE = 'resid_type'
			</if>
			<!-- SGIS4_1210_생활권역 시작 -->
			<choose>					
				<when test='byYear != "Y"'>
					<!--<if test="base_year != null and base_year != ''"> --> 
						AND BASE_YEAR = #{base_year}
					<!--</if> -->
				</when>
				<otherwise>
					<!-- AND BASE_YEAR NOT IN ('2000','2005','2010') -->	
					AND BASE_YEAR <![CDATA[>=]]> '2015'
				</otherwise>
			</choose>
			<!-- SGIS4_1210_생활권역 끝 -->			
				
<!-- 기존 시작 -->	
<!-- 		SELECT -->
<!-- 			BASE_YEAR -->
<!-- 			, GRID_CD -->
<!-- 			, RESID_CNT -->
<!-- 			, BSCA		 -->
<!-- 		FROM SRV_DT_GRID_HOUSE_2015_MT_BSCA with (nolock) -->
<!-- 		WHERE 1=1 -->
<!-- 			<if test='area != null and area != ""'> -->
<!-- 				AND GRID_CD IN ( -->
<!-- 					SELECT GRID_${grid_level}_CD -->
<!-- 					FROM SRV_PG_GRID_${grid_level}_BORD with (nolock) -->
<!-- 					<choose> -->
<!-- 						<when test="srvAreaType == 1"> -->
<!-- 							WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	 -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	 -->
<!-- 						</otherwise> -->
<!-- 					</choose>				 -->
<!-- 				)			 -->
<!-- 			</if> -->
<!-- 			<if test='rd_resid_type != null'>  -->
<!-- 				AND RD_RESID_1_TYPE in -->
<!-- 					<foreach collection="rd_resid_type" item="rdResidType" open="(" separator="," close=")"> -->
<!-- 						#{rdResidType} -->
<!-- 					</foreach>				 -->
<!-- 			</if> -->
<!-- 			<if test='const_year != null and const_year != ""'> -->
<!-- 				and rd_const_year = #{const_year} -->
<!-- 			</if>			 -->
<!-- 			<if test='house_area_cd != null '> -->
<!-- 				and house_area_cd in -->
<!-- 				<foreach  collection="house_area_cd" item="houseAreaCd" open="(" separator="," close=")"> -->
<!-- 					#{houseAreaCd} -->
<!-- 				</foreach> -->
<!-- 			</if>			 -->
<!-- 			<if test='byYear != "Y"'> -->
<!-- 				<if test='base_year != null and base_year != ""'>  -->
<!-- 					AND BASE_YEAR = #{base_year} -->
<!-- 				</if> -->
<!-- 			</if> -->
<!-- 기존 끝 -->				
	</select>
	
	<select id="selectGridSrvAreaGridHouseAllList" parameterType="hashmap" resultType="hashmap">
		select
			*, ROUND((TOT_SUM_RESID_CNT / GRID_CNT), 1) AS TOT_AVG_RESID_CNT 
		from (	
			SELECT 
				sum(RESID_CNT) AS TOT_SUM_RESID_CNT
				<!-- , ROUND(avg(RESID_CNT), 1) AS TOT_AVG_RESID_CNT -->
				, (select count(*) from SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<if test="area != null and area != ''"> 
						<choose>
							<when test="srvAreaType == 1">
								WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
							</when>
							<otherwise>
								WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
							</otherwise>
						</choose>			
					</if>
				  ) as GRID_CNT	
				, (select st_area(bord) from SRV_PG_GRID_${grid_level}_BORD limit 1) as GRID_AREA
				, BASE_YEAR 
			FROM (
				<include refid="saGridHouseStat" /> 
			)
			GROUP BY BASE_YEAR
		)
	</select>
	
	<select id="selectGridSrvAreaGridHouseList" parameterType="hashmap" resultType="hashmap">
		SELECT
			GRID_CD AS ADM_CD
			, GRID_CD AS ADM_NM
			<choose>
				<when test='securityGb == "NA"'>
					, (case when RESID_CNT <![CDATA[<]]> 5 THEN 'N/A' else RESID_CNT end) as RESID_CNT
				</when>
				<when test='securityGb == "RND"'>
					, (case when RESID_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else RESID_CNT end) as RESID_CNT
				</when>
				<otherwise>
					, RESID_CNT
				</otherwise>
			</choose>			
			, BASE_YEAR
		FROM (
			<include refid="saGridHouseStat" /> 
		)
		ORDER BY GRID_CD
	</select>
	
	<select id="selectCharacteristicsHouseList" parameterType="hashmap" resultType="hashmap">
		SELECT
			BASE_YEAR
			<choose>
				<when test='securityGb == "NA"'>
					, (case when RESID_CNT <![CDATA[<]]> 5 THEN 'N/A' else RESID_CNT end) as RESID_CNT
				</when>
				<when test='securityGb == "RND"'>
					, (case when RESID_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else RESID_CNT end) as RESID_CNT
				</when>
				<otherwise>
					, RESID_CNT
				</otherwise>
			</choose>			
		FROM (
			<include refid="saGridHouseStat" /> 
		)
	</select>
	
	<select id="selectPtFacList" parameterType="hashmap" resultType="hashmap">
		SELECT DISTINCT
			T1.corp_nm
			,T1.SUFID
			,T1.KSIC_5_CD
			,T2.NADDR
			,ST_X(T5.PT) AS X
			,ST_Y(T5.PT) AS Y
		FROM SRV_DT_CORPCENSUS_10 with (nolock) T1
		INNER JOIN SRV_PT_BD with (nolock) T5 on T1.SUFID = T5.SUFID
			AND st_intersects(T5.PT, (select ST_BUFFER(ST_POINTFROMTEXT(#{point},0), 10) from DUAL))=1
		LEFT OUTER JOIN SRV_PG_CENSUSBD with (nolock) T2 on T1.SUFID = T2.SUFID
	</select>
	<select id="selectSrvAreaGridCoprList" parameterType="hashmap" resultType="hashmap">
		select
			 sum(grd.corp_bsca) as CORP_CNT
			, sum(grd.employee_bsca) as EMPLOYEE_CNT
			, max(ks.ksic_3_nm) as NAME 
			<!-- BSCA 총합 계산용 -->
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.CORP_CNT <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS COP_LE_ORG_CNT
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.CORP_BSCA = 3 THEN 1 ELSE 0 END) AS COP_EQ_SCA_CNT
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.CORP_CNT <![CDATA[<=]]> 3 THEN grd.CORP_CNT ELSE 0 END) AS COP_LE_ORG_SUM
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.CORP_CNT <![CDATA[<=]]> 3 THEN grd.CORP_BSCA ELSE 0 END) AS COP_LE_SCA_SUM
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.CORP_CNT <![CDATA[>]]> 3 THEN grd.CORP_CNT ELSE 0 END) AS COP_GT_ORG_SUM
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.EMPLOYEE_CNT <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS EMP_LE_ORG_CNT
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.EMPLOYEE_BSCA = 3 THEN 1 ELSE 0 END) AS EMP_EQ_SCA_CNT
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.EMPLOYEE_CNT <![CDATA[<=]]> 3 THEN grd.EMPLOYEE_CNT ELSE 0 END) AS EMP_LE_ORG_SUM
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.EMPLOYEE_CNT <![CDATA[<=]]> 3 THEN grd.EMPLOYEE_BSCA ELSE 0 END) AS EMP_LE_SCA_SUM
			, SUM(CASE WHEN grd.ksic_3_cd = '000' AND grd.EMPLOYEE_CNT <![CDATA[>]]> 3 THEN grd.EMPLOYEE_CNT ELSE 0 END) AS EMP_GT_ORG_SUM		
		from 
			(
				select dat.* 
				from srv_dt_grid_totidx_theme_bsca with (nolock) dat
					inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD
					<choose>
						<when test="srvAreaType == 1">
							and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1
						</when>
						<otherwise>
							and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1
						</otherwise>
					</choose>					
				where
					dat.BASE_YEAR = #{copr_base_year}
					and dat.GRID_LEVEL_DIV = #{girdUnit}		
			) grd
			inner join (
						select
							sa.ksic_3_cd
							, max(cls.ksic_3_nm) as ksic_3_nm
						from
							SRV_DT_SRVAREA_CORPMAPPING with (nolock) sa
							inner join CMM_CD_CORPCLASS with (nolock) cls on cls.ksic_3_cd = sa.ksic_3_cd and cls.CLASS_DEG = #{classDeg}
						where sa.CLASS_DEG = #{classDeg}	
						group by sa.ksic_3_cd
						union all
						select '000', '전체' from dual
			) ks on ks.ksic_3_cd = grd.ksic_3_cd 
		group by grd.ksic_3_cd
		order by CORP_CNT desc
			
<!-- 20201124 이전 -->
<!-- 		select -->
<!-- 			 count(cs.ksic_3_cd) as CORP_CNT -->
<!-- 			, sum(cs.EMPLOYEE_CNT) as EMPLOYEE_CNT -->
<!-- 			, max(ks.ksic_3_nm) as NAME  -->
<!-- 		from ( -->
<!-- 				select -->
<!-- 					g.GRID_${girdUnit}_CD AS GRID_CD -->
<!-- 					, g.BORD -->
<!-- 					, bd.SUFID -->
<!-- 				from -->
<!-- 					SRV_PG_GRID_${girdUnit}_BORD with (nolock) g -->
<!-- 				inner join SRV_PT_BD with (nolock) bd on ST_Intersects(g.BORD, bd.PT) = 1 -->
<!-- 					<choose> -->
<!-- 						<when test="srvAreaType == 1"> -->
<!-- 							WHERE st_intersects(g.BORD, st_polyfromtext(#{area},0))=1 -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							WHERE st_intersects(g.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1 -->
<!-- 						</otherwise> -->
<!-- 					</choose>		 -->
<!-- 			) grd -->
<!-- 			inner join SRV_DT_CORPCENSUS_${classDeg} with (nolock) cs on cs.SUFID = grd.SUFID and cs.BASE_YEAR = #{copr_base_year} -->
<!-- 			inner join ( -->
<!-- 						select -->
<!-- 							sa.ksic_3_cd -->
<!-- 							, max(cls.ksic_3_nm) as ksic_3_nm -->
<!-- 						from -->
<!-- 							SRV_DT_SRVAREA_CORPMAPPING with (nolock) sa -->
<!-- 							inner join CMM_CD_CORPCLASS with (nolock) cls on cls.ksic_3_cd = sa.ksic_3_cd and cls.CLASS_DEG = #{classDeg} -->
<!-- 						where sa.CLASS_DEG = #{classDeg}	 -->
<!-- 						group by sa.ksic_3_cd			 -->
<!-- 					) ks on ks.ksic_3_cd = cs.ksic_3_cd  -->
<!-- 		group by cs.ksic_3_cd -->
<!-- 		order by CORP_CNT desc -->
	</select>
	<!-- selectSrvAreaGridCoprList 와 동일(select절 변경, group/order by절 삭제, 집계값을 java에서 구하는 방식으로 변경) -->
	<select id="selectSrvAreaGridCoprListVer2" parameterType="hashmap" resultType="hashmap">
		<!-- SGIS4_생활권역 시작 -->
<!-- 산업대분류로 수정했다가 다시 기존으로 빽 -->
<!-- 		select -->
<!-- 			grd.grid_cd -->
<!-- 			, grd.ksic_1_cd as grp_id -->
<!-- 			, ks.ksic_1_nm as grp_nm -->
<!-- 			, grd.corp_cnt -->
<!-- 			, grd.corp_bsca as corp_sca  -->
<!-- 			, grd.employee_cnt -->
<!-- 			, grd.employee_bsca	as employee_sca					 -->
<!-- 			, grd.corp_lk -->
<!-- 			, grd.corp_sk -->
<!-- 			, grd.corp_d1 -->
<!-- 			, grd.corp_d2 -->
<!-- 			, grd.corp_dd1z -->
<!-- 			, grd.employee_lk -->
<!-- 			, grd.employee_sk -->
<!-- 			, grd.employee_d1 -->
<!-- 			, grd.employee_d2 -->
<!-- 			, grd.employee_dd1z -->
<!-- 		from  -->
<!-- 			( -->
<!-- 				select dat.*  -->
<!-- 				from srv_dt_grid_totidx_theme_bsca with (nolock) dat -->
<!-- 				<if test='"N".equals(isUseGeneratedGridNumber)'> -->
<!-- 					inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD -->
<!-- 					<choose> -->
<!-- 						<when test="srvAreaType == 1"> -->
<!-- 							and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1 -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1 -->
<!-- 						</otherwise> -->
<!-- 					</choose> -->
<!-- 				</if>						 -->
<!-- 				where -->
<!-- 					dat.BASE_YEAR = #{copr_base_year} -->
<!-- 					and dat.GRID_LEVEL_DIV = #{girdUnit} -->
<!-- 					and dat.ksic_3_cd != '000'		전체를 빼고 select? 아니면 전체만 select? (대분류 단위로 전체값 생성하는듯) -->
<!-- 					<if test='"Y".equals(isUseGeneratedGridNumber)'> -->
<!-- 						AND dat.GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd}) -->
<!-- 					</if>							 -->
<!-- 			) grd -->
<!-- 			inner join ( -->
<!-- 				select distinct ksic_1_cd, ksic_1_nm  -->
<!-- 				from CMM_CD_CORPCLASS with (nolock) -->
<!-- 				where class_deg = #{classDeg}			 -->
<!-- 			) ks on ks.ksic_1_cd = grd.ksic_1_cd -->
<!-- //산업대분류로 수정했다가 다시 기존으로 빽 -->
<!-- (기존)주요 소분류 -->	
		select
			grd.grid_cd
			, grd.ksic_3_cd as grp_id
			, grd.corp_cnt
			, grd.corp_bsca as corp_sca 
			, grd.employee_cnt
			, grd.employee_bsca	as employee_sca 
			, ks.ksic_3_nm as grp_nm 
			, grd.corp_lk
			, grd.corp_sk
			, grd.corp_d1
			, grd.corp_d2
			, grd.corp_dd1z
			, grd.employee_lk
			, grd.employee_sk
			, grd.employee_d1
			, grd.employee_d2
			, grd.employee_dd1z
		from 
			(
				select dat.* 
				from srv_dt_grid_totidx_theme_bsca with (nolock) dat
				<if test='"N".equals(isUseGeneratedGridNumber)'>
					inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD
					<choose>
						<when test="srvAreaType == 1">
							and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1
						</when>
						<otherwise>
							and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1
						</otherwise>
					</choose>
				</if>						
				where
					dat.BASE_YEAR = #{copr_base_year}
					and dat.GRID_LEVEL_DIV = #{girdUnit}
					<if test='"Y".equals(isUseGeneratedGridNumber)'>
						AND dat.GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
					</if>							
			) grd
			inner join (
						select
							sa.ksic_3_cd
							, max(cls.ksic_3_nm) as ksic_3_nm
						from
							SRV_DT_SRVAREA_CORPMAPPING with (nolock) sa
							inner join CMM_CD_CORPCLASS with (nolock) cls on cls.ksic_3_cd = sa.ksic_3_cd and cls.CLASS_DEG = #{classDeg}
						where sa.CLASS_DEG = #{classDeg}	
						group by sa.ksic_3_cd
						union all
						select '000', '전체' from dual
			) ks on ks.ksic_3_cd = grd.ksic_3_cd
<!-- //(기존)주요 소분류 -->	
		<!-- SGIS4_생활권역 끝 -->		 
	</select>	
	<!-- selectSrvAreaGridCoprList 에서 총합 구하기용으로 변경(인구/가구/주택과 달리 원래 쿼리와 달라짐) -->
	<select id="selectSrvAreaGridCoprBSCA" parameterType="hashmap" resultType="hashmap">
		select				
			SUM(CASE WHEN dat.CORP_CNT <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS COP_LE_ORG_CNT
			, SUM(CASE WHEN dat.CORP_BSCA = 3 THEN 1 ELSE 0 END) AS COP_EQ_SCA_CNT
			, SUM(CASE WHEN dat.CORP_CNT <![CDATA[<=]]> 3 THEN dat.CORP_CNT ELSE 0 END) AS COP_LE_ORG_SUM
			, SUM(CASE WHEN dat.CORP_CNT <![CDATA[<=]]> 3 THEN dat.CORP_BSCA ELSE 0 END) AS COP_LE_SCA_SUM
			, SUM(CASE WHEN dat.CORP_CNT <![CDATA[>]]> 3 THEN dat.CORP_CNT ELSE 0 END) AS COP_GT_ORG_SUM
			, SUM(CASE WHEN dat.EMPLOYEE_CNT <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS EMP_LE_ORG_CNT
			, SUM(CASE WHEN dat.EMPLOYEE_BSCA = 3 THEN 1 ELSE 0 END) AS EMP_EQ_SCA_CNT
			, SUM(CASE WHEN dat.EMPLOYEE_CNT <![CDATA[<=]]> 3 THEN dat.EMPLOYEE_CNT ELSE 0 END) AS EMP_LE_ORG_SUM
			, SUM(CASE WHEN dat.EMPLOYEE_CNT <![CDATA[<=]]> 3 THEN dat.EMPLOYEE_BSCA ELSE 0 END) AS EMP_LE_SCA_SUM
			, SUM(CASE WHEN dat.EMPLOYEE_CNT <![CDATA[>]]> 3 THEN dat.EMPLOYEE_CNT ELSE 0 END) AS EMP_GT_ORG_SUM
		from srv_dt_grid_totidx_theme_bsca with (nolock) dat
			inner join SRV_PG_GRID_${girdUnit}_BORD with (nolock) bd on bd.GRID_${girdUnit}_CD = dat.GRID_CD
			<choose>
				<when test="srvAreaType == 1">
					and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1
				</when>
				<otherwise>
					and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1
				</otherwise>
			</choose>
		where
			dat.BASE_YEAR = #{copr_base_year}
			and dat.GRID_LEVEL_DIV = #{girdUnit}
			and dat.ksic_3_cd = '000'
	</select>
	
	<!-- 사용처: 격자분포, 전체정보(특성별 통계 보기: isCharacteristics땡땡땡 으로 구분) -->
	<sql id="saGridCoprStat">
		select
			<choose>
				<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'>
					(case when grd.BASE_YEAR = '9016' then '2016' else grd.BASE_YEAR end) as BASE_YEAR 
					<choose>
						<when test='isCharacteristicsCopr == "Y"'>
							, sum(grd.corp_bsca) as COPR_CNT
						</when>
						<otherwise>
							, sum(grd.employee_bsca) as EMPLOYEE_CNT
						</otherwise>
					</choose>
				</when>
				<otherwise>
					(case when grd.BASE_YEAR = '9016' then '2016' else grd.BASE_YEAR end) as BASE_YEAR
					, grd.GRID_CD
					<choose>
						<when test="grdstatType == 'copr'">
							, sum(grd.corp_bsca) as COPR_CNT
						</when>
						<otherwise>
							, sum(grd.employee_bsca) as EMPLOYEE_CNT
						</otherwise>
					</choose>
				</otherwise>
			</choose>		
		from 
			(
				select dat.* 
				from srv_dt_grid_totidx_theme_bsca with (nolock) dat
					inner join SRV_PG_GRID_${grid_level}_BORD with (nolock) bd on bd.GRID_${grid_level}_CD = dat.GRID_CD
					<choose>
						<when test="srvAreaType == 1">
							and st_intersects(bd.BORD, st_polyfromtext(#{area},0))=1
						</when>
						<otherwise>
							and st_intersects(bd.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1
						</otherwise>
					</choose>					
				where
					dat.GRID_LEVEL_DIV = #{grid_level}
					<if test='byYear != "Y"'>				
						<choose>
							<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'>
								<if test="copr_base_year != null and copr_base_year != ''"> 
									and dat.BASE_YEAR = #{copr_base_year}
								</if>
							</when>
							<otherwise>
								<if test="base_year != null and base_year != ''"> 
									and dat.BASE_YEAR = #{base_year}
								</if>
							</otherwise>
						</choose>
					</if>
					<choose>
						<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'>
							<choose>
								<when test='isCharacteristicsCopr == "Y"'>
									<if test='copr_ksic_3_cd != null and copr_ksic_3_cd != ""'>
										and dat.ksic_3_cd = #{copr_ksic_3_cd}
									</if>
								</when>
								<otherwise>
									<if test='employee_ksic_3_cd != null and employee_ksic_3_cd != ""'>
										and dat.ksic_3_cd = #{employee_ksic_3_cd}
									</if>
								</otherwise>
							</choose>				
						</when>
						<otherwise>
							<choose>
								<when test='ksic_3_cd != null and ksic_3_cd != ""'>
									and dat.ksic_3_cd = #{ksic_3_cd}
								</when>
								<otherwise>
									and dat.ksic_3_cd = '000'
								</otherwise>
							</choose>
						</otherwise>
					</choose>										
			) grd		
			inner join (
						select
							sa.ksic_3_cd
							, max(cls.ksic_3_nm) as ksic_3_nm
						from
							SRV_DT_SRVAREA_CORPMAPPING with (nolock) sa
							inner join CMM_CD_CORPCLASS with (nolock) cls on cls.ksic_3_cd = sa.ksic_3_cd and cls.CLASS_DEG = #{classDeg}
						where sa.CLASS_DEG = #{classDeg}	
						group by sa.ksic_3_cd
						union all
						select '000', '전체' from dual
			) ks on ks.ksic_3_cd = grd.ksic_3_cd
		<choose>
			<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'>
				group by grd.BASE_YEAR
			</when>
			<otherwise>
				group by grd.BASE_YEAR, grd.GRID_CD
			</otherwise>
		</choose>	

<!-- 20201127 이전 -->	
<!-- 		select -->
<!-- 			<choose> -->
<!-- 				<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'> -->
<!-- 					cs.BASE_YEAR -->
<!-- 					<choose> -->
<!-- 						<when test='isCharacteristicsCopr == "Y"'> -->
<!-- 							, count(cs.ksic_3_cd) as COPR_CNT -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							, sum(cs.EMPLOYEE_CNT) as EMPLOYEE_CNT -->
<!-- 						</otherwise> -->
<!-- 					</choose> -->
<!-- 				</when> -->
<!-- 				<otherwise> -->
<!-- 					cs.BASE_YEAR -->
<!-- 					, grd.GRID_CD -->
<!-- 					<choose> -->
<!-- 						<when test="grdstatType == 'copr'"> -->
<!-- 							, count(cs.ksic_3_cd) as COPR_CNT -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							, sum(cs.EMPLOYEE_CNT) as EMPLOYEE_CNT -->
<!-- 						</otherwise> -->
<!-- 					</choose> -->
<!-- 				</otherwise> -->
<!-- 			</choose>		 -->
<!-- 		from ( -->
<!-- 				select -->
<!-- 					g.GRID_${grid_level}_CD AS GRID_CD -->
<!-- 					, g.BORD -->
<!-- 					, bd.SUFID -->
<!-- 				from -->
<!-- 					SRV_PG_GRID_${grid_level}_BORD with (nolock) g -->
<!-- 					inner join SRV_PT_BD with (nolock) bd on ST_Intersects(g.BORD, bd.PT) = 1 -->
<!-- 					<choose> -->
<!-- 						<when test="srvAreaType == 1"> -->
<!-- 							WHERE st_intersects(g.BORD, st_polyfromtext(#{area},0))=1 -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							WHERE st_intersects(g.BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1 -->
<!-- 						</otherwise> -->
<!-- 					</choose>		 -->
<!-- 			) grd -->
<!-- 			inner join SRV_DT_CORPCENSUS_${classDeg} with (nolock) cs on cs.SUFID = grd.SUFID -->
<!-- 				<if test='byYear != "Y"'>				 -->
<!-- 					<choose> -->
<!-- 						<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'> -->
<!-- 							<if test="copr_base_year != null and copr_base_year != ''">  -->
<!-- 								and cs.BASE_YEAR = #{copr_base_year} -->
<!-- 							</if> -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							<if test="base_year != null and base_year != ''">  -->
<!-- 								and cs.BASE_YEAR = #{base_year} -->
<!-- 							</if> -->
<!-- 						</otherwise> -->
<!-- 					</choose> -->
<!-- 				</if>				 -->
<!-- 			inner join ( -->
<!-- 						select -->
<!-- 							sa.ksic_3_cd -->
<!-- 							, max(cls.ksic_3_nm) as ksic_3_nm -->
<!-- 						from -->
<!-- 							SRV_DT_SRVAREA_CORPMAPPING with (nolock) sa -->
<!-- 							inner join CMM_CD_CORPCLASS with (nolock) cls on cls.ksic_3_cd = sa.ksic_3_cd and cls.CLASS_DEG = #{classDeg} -->
<!-- 						where sa.CLASS_DEG = #{classDeg}	 -->
<!-- 						group by sa.ksic_3_cd			 -->
<!-- 					) ks on ks.ksic_3_cd = cs.ksic_3_cd  -->
<!-- 			<choose> -->
<!-- 				<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'> -->
<!-- 					<choose> -->
<!-- 						<when test='isCharacteristicsCopr == "Y"'> -->
<!-- 							<if test='copr_ksic_3_cd != null and copr_ksic_3_cd != ""'> -->
<!-- 								where cs.ksic_3_cd = #{copr_ksic_3_cd} -->
<!-- 							</if> -->
<!-- 						</when> -->
<!-- 						<otherwise> -->
<!-- 							<if test='employee_ksic_3_cd != null and employee_ksic_3_cd != ""'> -->
<!-- 								where cs.ksic_3_cd = #{employee_ksic_3_cd} -->
<!-- 							</if> -->
<!-- 						</otherwise> -->
<!-- 					</choose>				 -->
<!-- 				</when> -->
<!-- 				<otherwise> -->
<!-- 					<if test="ksic_3_cd != null and ksic_3_cd != ''"> -->
<!-- 						where cs.ksic_3_cd = #{ksic_3_cd} -->
<!-- 					</if> -->
<!-- 				</otherwise> -->
<!-- 			</choose> -->
<!-- 		<choose> -->
<!-- 			<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'> -->
<!-- 				group by cs.BASE_YEAR -->
<!-- 			</when> -->
<!-- 			<otherwise> -->
<!-- 				group by cs.BASE_YEAR, grd.GRID_CD -->
<!-- 			</otherwise> -->
<!-- 		</choose>			 -->
	</sql>

	<!-- SGIS4_생활권역 시작 -->
	<!-- saGridCoprStat 와 동일(select절 변경, 집계값을 java에서 구하는 방식으로 변경) -->
	<select id="selectCoprList" parameterType="hashmap" resultType="hashmap">
		select
			(case when BASE_YEAR = '9016' then '2016' else BASE_YEAR end) as BASE_YEAR
			, GRID_CD		
			<choose>
				<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'>
					<choose>
						<when test='isCharacteristicsCopr == "Y"'>
							, corp_cnt as COPR_CNT
							, corp_bsca as COPR_BSCA							
							, corp_lk as LK
							, corp_sk as SK
							, corp_d1 as D1
							, corp_d2 as D2
							, corp_dd1z as DD1Z
						</when>
						<otherwise>
							, employee_cnt as EMPLOYEE_CNT
							, employee_bsca as EMPLOYEE_BSCA
							, employee_lk as LK
							, employee_sk as SK
							, employee_d1 as D1
							, employee_d2 as D2
							, employee_dd1z as DD1Z							
						</otherwise>
					</choose>
				</when>
				<otherwise>
					<choose>
						<when test="grdstatType == 'copr'">
							, corp_cnt as COPR_CNT
							, corp_bsca as COPR_BSCA
							, corp_lk as LK
							, corp_sk as SK
							, corp_d1 as D1
							, corp_d2 as D2
							, corp_dd1z as DD1Z							
						</when>
						<otherwise>
							, employee_cnt as EMPLOYEE_CNT
							, employee_bsca as EMPLOYEE_BSCA
							, employee_lk as LK
							, employee_sk as SK
							, employee_d1 as D1
							, employee_d2 as D2
							, employee_dd1z as DD1Z								
						</otherwise>
					</choose>
				</otherwise>
			</choose>		
		from 
			(
				select dat.* 
				from srv_dt_grid_totidx_theme_bsca with (nolock) dat
				where
					1=1
					<!-- SGIS4_1210_생활권역 시작 -->
					<choose>					
						<when test='byYear != "Y"'>
							<choose>
								<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'>
									<!--<if test="copr_base_year != null and copr_base_year != ''">--> 
										and dat.BASE_YEAR = #{copr_base_year}
									<!--</if>-->
								</when>
								<otherwise>
									<!--<if test="base_year != null and base_year != ''">-->
										and dat.BASE_YEAR = #{base_year}
									<!--</if>-->
								</otherwise>
							</choose>						
						</when>
						<otherwise>
							<!-- and dat.BASE_YEAR NOT IN ('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016') -->
							and dat.BASE_YEAR <![CDATA[>=]]> '2017'			
						</otherwise>
					</choose>
					<!-- SGIS4_1210_생활권역 끝 -->					
					<choose>
						<when test='isCharacteristicsCopr == "Y" or isCharacteristicsEmployee == "Y"'>
							<!-- 주요 소분류 30종에서 세세분류로 확대되면서 수정 -->
							<choose>
								<when test='isCharacteristicsCopr == "Y"'>
									<if test='copr_ksic_3_cd != null and copr_ksic_3_cd != ""'>
										<choose>
											<when test='isLifeBiz == "Y"'>
												and dat.ksic_5_cd in (
													select
														cls.ksic_5_cd
													from
														cmm_cd_corpclass with (nolock) cls
														inner join CMM_CD_THEME with (nolock) thm on thm.theme_cd = cls.theme_cd 
															and thm.lifebiz_yn = 'Y' and (thm.theme_cd = #{copr_ksic_3_cd} or thm.b_theme_cd = #{copr_ksic_3_cd}) 
													where
														cls.class_deg = #{classDeg}
												)										
											</when>
											<otherwise>
												<choose>
													<when test='isMainCl == "Y"'>
														and (dat.ksic_1_cd = #{copr_ksic_3_cd} and dat.ksic_5_cd != '00000')  
													</when>
													<otherwise>
														and dat.ksic_5_cd like #{copr_ksic_3_cd} || '%'
													</otherwise>
												</choose>											
											</otherwise>
										</choose>									
									</if>
								</when>
								<otherwise>
									<if test='employee_ksic_3_cd != null and employee_ksic_3_cd != ""'>
										<choose>
											<when test='isLifeBiz == "Y"'>
												and dat.ksic_5_cd in (
													select
														cls.ksic_5_cd
													from
														cmm_cd_corpclass with (nolock) cls
														inner join CMM_CD_THEME with (nolock) thm on thm.theme_cd = cls.theme_cd 
															and thm.lifebiz_yn = 'Y' and (thm.theme_cd = #{employee_ksic_3_cd} or thm.b_theme_cd = #{employee_ksic_3_cd}) 
													where
														cls.class_deg = #{classDeg}
												)										
											</when>
											<otherwise>
												<choose>
													<when test='isMainCl == "Y"'>
														and (dat.ksic_1_cd = #{employee_ksic_3_cd} and dat.ksic_5_cd != '00000')  
													</when>
													<otherwise>
														and dat.ksic_5_cd like #{employee_ksic_3_cd} || '%'
													</otherwise>
												</choose>											
											</otherwise>
										</choose>
									</if>
								</otherwise>
							</choose>
							<!-- //주요 소분류 30종에서 세세분류로 확대되면서 수정 -->				
						</when>
						<otherwise>
							<!-- 주요 소분류 30종에서 세세분류로 확대되면서 수정 -->
							<choose>
								<when test='ksic_3_cd != null and ksic_3_cd != ""'>
									<choose>
										<when test='isLifeBiz == "Y"'>
											and dat.ksic_5_cd in (
												select
													cls.ksic_5_cd
												from
													cmm_cd_corpclass with (nolock) cls
													inner join CMM_CD_THEME with (nolock) thm on thm.theme_cd = cls.theme_cd 
														and thm.lifebiz_yn = 'Y' and (thm.theme_cd = #{ksic_3_cd} or thm.b_theme_cd = #{ksic_3_cd}) 
												where
													cls.class_deg = #{classDeg}
											)										
										</when>
										<otherwise>
											<choose>
												<when test='isMainCl == "Y"'>
													and (dat.ksic_1_cd = #{ksic_3_cd} and dat.ksic_5_cd != '00000')  
												</when>
												<otherwise>
													and dat.ksic_5_cd like #{ksic_3_cd} || '%'
												</otherwise>
											</choose>											
										</otherwise>
									</choose>
								</when>
								<otherwise>
									and dat.ksic_5_cd = '00000'
								</otherwise>
							</choose>
							<!-- //주요 소분류 30종에서 세세분류로 확대되면서 수정 -->
						</otherwise>
					</choose>
					<choose>
						<when test='"Y".equals(isUseGeneratedGridNumber)'>
							AND dat.GRID_CD IN (SELECT GRID_100M_CD FROM srv_dt_srvarea_100m_zone WHERE SUFID=#{sufid} AND SCOPE_CD = #{rangeCd})
						</when>
						<otherwise>					
							<if test="area != null and area != ''"> 
								AND dat.GRID_CD IN (
											SELECT GRID_${grid_level}_CD
											FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
											<choose>
												<when test="srvAreaType == 1">
													WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
												</when>
												<otherwise>
													WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
												</otherwise>
											</choose>								
								)
							</if>
						</otherwise>
					</choose>																				
			) grd
			<!-- 주요 소분류 30종에서 세세분류로 확대되면서 필요없음 -->		
<!-- 			inner join ( -->
<!-- 						select -->
<!-- 							sa.ksic_3_cd -->
<!-- 							, max(cls.ksic_3_nm) as ksic_3_nm -->
<!-- 						from -->
<!-- 							SRV_DT_SRVAREA_CORPMAPPING with (nolock) sa -->
<!-- 							inner join CMM_CD_CORPCLASS with (nolock) cls on cls.ksic_3_cd = sa.ksic_3_cd and cls.CLASS_DEG = #{classDeg} -->
<!-- 						where sa.CLASS_DEG = #{classDeg}	 -->
<!-- 						group by sa.ksic_3_cd -->
<!-- 						union all -->
<!-- 						select '000', '전체' from dual -->
<!-- 			) ks on ks.ksic_3_cd = grd.ksic_3_cd -->
			<!-- 주요 소분류 30종에서 세세분류로 확대되면서 필요없음  -->	
	</select>
	<!-- SGIS4_생활권역 끝 -->
	
	<select id="selectGridSrvAreaGridCoprList" parameterType="hashmap" resultType="hashmap">
		SELECT
			GRID_CD AS ADM_CD
			, GRID_CD AS ADM_NM
			<choose>
				<when test="grdstatType == 'copr'">				
					<choose>
						<when test='securityGb == "NA"'>
							, (case when COPR_CNT <![CDATA[<]]> 5 THEN 'N/A' else COPR_CNT end) as COPR_CNT
						</when>
						<when test='securityGb == "RND"'>
							, (case when COPR_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else COPR_CNT end) as COPR_CNT
						</when>
						<otherwise>
							, COPR_CNT
						</otherwise>
					</choose>				
				</when>
				<otherwise>
					<choose>
						<when test='securityGb == "NA"'>
							, (case when EMPLOYEE_CNT <![CDATA[<]]> 5 THEN 'N/A' else EMPLOYEE_CNT end) as EMPLOYEE_CNT
						</when>
						<when test='securityGb == "RND"'>
							, (case when EMPLOYEE_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else EMPLOYEE_CNT end) as EMPLOYEE_CNT
						</when>
						<otherwise>
							, EMPLOYEE_CNT
						</otherwise>
					</choose>					
				</otherwise>
			</choose>
		FROM (
			<include refid="saGridCoprStat" /> 
		)
		ORDER BY GRID_CD
	</select>
	
	<select id="selectGridSrvAreaGridCoprAllList" parameterType="hashmap" resultType="hashmap">
		select
			*
			<choose>
				<when test="grdstatType == 'copr'">
					, ROUND((TOT_SUM_COPR_CNT / GRID_CNT), 1) AS TOT_AVG_COPR_CNT 				
	 			</when>
	 			<otherwise>
	 			    , ROUND((TOT_SUM_EMPLOYEE_CNT / GRID_CNT), 1) AS TOT_AVG_EMPLOYEE_CNT
				</otherwise>
			</choose>			
		from (	
			SELECT
				BASE_YEAR
				, (select count(*) from SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<if test="area != null and area != ''"> 
						<choose>
							<when test="srvAreaType == 1">
								WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
							</when>
							<otherwise>
								WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
							</otherwise>
						</choose>			
					</if>
				  ) as GRID_CNT	
				, (select st_area(bord) from SRV_PG_GRID_${grid_level}_BORD limit 1) as GRID_AREA
				<choose>
					<when test="grdstatType == 'copr'">
						, sum(COPR_CNT) AS TOT_SUM_COPR_CNT
						<!-- , ROUND(avg(COPR_CNT), 1) AS TOT_AVG_COPR_CNT -->				
		 			</when>
		 			<otherwise>
						, sum(EMPLOYEE_CNT) AS TOT_SUM_EMPLOYEE_CNT
						<!-- , ROUND(avg(EMPLOYEE_CNT), 1) AS TOT_AVG_EMPLOYEE_CNT -->	 			
					</otherwise>
				</choose>
			FROM (
				<include refid="saGridCoprStat" /> 
			)
			GROUP BY BASE_YEAR
		)
	</select>

	<select id="selectCharacteristicsCoprList" parameterType="hashmap" resultType="hashmap">
		SELECT
			BASE_YEAR
			<choose>
				<when test='isCharacteristicsCopr == "Y"'>				
					<choose>
						<when test='securityGb == "NA"'>
							, (case when COPR_CNT <![CDATA[<]]> 5 THEN 'N/A' else COPR_CNT end) as COPR_CNT
						</when>
						<when test='securityGb == "RND"'>
							, (case when COPR_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else COPR_CNT end) as COPR_CNT
						</when>
						<otherwise>
							, COPR_CNT
						</otherwise>
					</choose>				
				</when>
				<otherwise>
					<choose>
						<when test='securityGb == "NA"'>
							, (case when EMPLOYEE_CNT <![CDATA[<]]> 5 THEN 'N/A' else EMPLOYEE_CNT end) as EMPLOYEE_CNT
						</when>
						<when test='securityGb == "RND"'>
							, (case when EMPLOYEE_CNT <![CDATA[<]]> 5 THEN (rand() % 5) else EMPLOYEE_CNT end) as EMPLOYEE_CNT
						</when>
						<otherwise>
							, EMPLOYEE_CNT
						</otherwise>
					</choose>					
				</otherwise>
			</choose>
		FROM (
			<include refid="saGridCoprStat" /> 
		)
	</select>
		
	<sql id="saGridOlnlpStat">
		SELECT 
			GRID_CD
			, SUM(OLNLP) AS OLNLP
			, BASE_YEAR
		FROM SRV_DT_GRID_OLNLP
		WHERE
			GRID_CD IN (
				SELECT GRID_${grid_level}_CD
				FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
				<choose>
					<when test="srvAreaType == 1">
						WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
					</when>
					<otherwise>
						WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
					</otherwise>
				</choose>				
			)
			<if test='byYear != "Y"'>
				<if test="base_year != null and base_year != ''"> 
					AND BASE_YEAR = #{base_year}
				</if>
			</if>				
		GROUP BY BASE_YEAR, GRID_CD	
	</sql>
	
	<!-- saGridOlnlpStat 와 동일(select절 변경, 집계값을 java에서 구하는 방식으로 변경) -->
	<select id="selectOlnlpList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			BASE_YEAR
			, GRID_CD
			, OLNLP
		FROM SRV_DT_GRID_OLNLP
		WHERE
			GRID_CD IN (
				SELECT GRID_${grid_level}_CD
				FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
				<choose>
					<when test="srvAreaType == 1">
						WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
					</when>
					<otherwise>
						WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
					</otherwise>
				</choose>				
			)
			<if test='byYear != "Y"'>
				<if test="base_year != null and base_year != ''"> 
					AND BASE_YEAR = #{base_year}
				</if>
			</if>	
	</select>	
	
	<select id="selectGridSrvAreaGridOlnlpAllList" parameterType="hashmap" resultType="hashmap">
		select
			*, ROUND((TOT_OLNLP / GRID_CNT), 1) AS TOT_AVG_OLNLP 
		from (	
			SELECT 
				SUM(OLNLP) AS TOT_OLNLP
				<!-- , ROUND(AVG(OLNLP), 1) AS TOT_AVG_OLNLP -->
				, (select count(*) from SRV_PG_GRID_${grid_level}_BORD with (nolock)
					<if test="area != null and area != ''"> 
						<choose>
							<when test="srvAreaType == 1">
								WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
							</when>
							<otherwise>
								WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
							</otherwise>
						</choose>			
					</if>
				  ) as GRID_CNT
				, (select st_area(bord) from SRV_PG_GRID_${grid_level}_BORD limit 1) as GRID_AREA
				, BASE_YEAR 
			FROM (
				<include refid="saGridOlnlpStat" /> 
			)		
			GROUP BY BASE_YEAR
		)
	</select>
	<select id="selectGridSrvAreaGridOlnlpList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			GRID_CD AS ADM_CD
			, GRID_CD AS ADM_NM
			, OLNLP
			, BASE_YEAR
		FROM (
			<include refid="saGridOlnlpStat" /> 
		)
		ORDER BY GRID_CD
	</select>
	<!-- [ START ] 상세분석 기능 구현 - 박상언(pse) -->
	
	<select id="selectLargeClassList" resultType="hashmap">
		SELECT
			 FACTYPE_LCLAS_CD,  FACTYPE_LCLAS_NM
		FROM
			SRV_DT_SRVAREA_FACTYPE_LCLAS
		WHERE
			SRV_YN = 'Y' AND USE_YN = 'Y'
		ORDER BY ORDER_NO
	</select>
	
	
	<select id="selectCensusGroupByLClass" resultType="hashmap">
		SELECT 
			CLS.KSIC_2_CD, KSIC_2_NM
		FROM (
			SELECT
				CM.KSIC_2_CD
			FROM
				SRV_DT_SRVAREA_FACTYPE_LCLAS LC
			INNER JOIN
				SRV_DT_SRVAREA_CORPMAPPING CM
			ON 
				LC.FACTYPE_LCLAS_CD = CM.UPPER_FACTYPE_CD
				AND CM.CLASS_DEG = #{classDeg} 
				AND LC.USE_YN = 'Y'
				AND LC.FACTYPE_LCLAS_CD = #{lClass}
			GROUP BY CM.KSIC_2_CD
		) SA
		INNER JOIN
			CMM_CD_CORPCLASS CLS 
		ON CLS.KSIC_2_CD = SA.KSIC_2_CD AND CLS.CLASS_DEG = #{classDeg}
		GROUP BY CLS.KSIC_2_CD, KSIC_2_NM
		ORDER BY CLS.KSIC_2_CD
	</select>
	
	<select id="selectKsicThirdCdAndNameGroupByKSIC2" resultType="hashmap">
		select
			cc.ksic_3_cd
			, cc.ksic_3_nm
		from SRV_DT_SRVAREA_CORPMAPPING cm
			left outer join CMM_CD_CORPCLASS cc 
			on cc.ksic_2_cd = cm.ksic_2_cd and cc.ksic_3_cd = cm.ksic_3_cd and cc.class_deg = #{classDeg} 
		where cm.ksic_2_cd = #{ksic_2_cd} and cm.class_deg = #{classDeg}
		group by cc.ksic_3_cd, cc.ksic_3_nm 
		order by cc.ksic_3_cd
	</select>
	<!-- [ END ] 상세분석 기능 구현 - 박상언(pse) -->
	<select id="selectPoiMapping" parameterType="hashmap" resultType="hashmap">
		SELECT 
			T1.FACTYPE_CD
			,T1.PPLTN_STAT_DFLT_SLCTN
			,T2.KSIC_5_CD
		FROM SRV_DT_SRVAREA_FACTYPE T1
		JOIN SRV_DT_SRVAREA_POIMAPPING T2
		ON T1.FACTYPE_CD = T2.FACTYPE_CD
		WHERE
			T1.FACTYPE_CD IN ('SA0001', 'SA0002', 'SA0003', 'SA0004', 'SA0005')
			<if test="ksic_5_cd != null and ksic_5_cd != ''"> 
			AND T2.KSIC_5_CD = #{ksic_5_cd}
			</if>
	</select>

	<select id="selectCodeList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			B_CLASS_CD
			, S_CLASS_CD
			, B_CLASS_CD_NM
			, S_CLASS_CD_NM
			, CD_EXP
			, S_CLASS_CD_ORDER
		FROM CMM_CD_COMCD
		WHERE
			B_CLASS_CD = #{bClassCd}
			<if test='sClassCd != null and sClassCd != ""'>
				AND S_CLASS_CD = #{sClassCd}
			</if>
			<if test='cdExp != null and cdExp != ""'>
				AND CD_EXP = #{cdExp}
			</if>
		ORDER BY S_CLASS_CD_ORDER 	
	</select>
		
	<select id="selectGridLevelList" parameterType="hashmap" resultType="hashmap">
		SELECT 
			GRID_NM
			,GRID_LEVEL_DIV
		FROM SRV_DT_SRVAREA_GRID
		WHERE USE_YN = 'Y'
			AND SRV_YN = 'Y'
	</select>
	
	<select id="selectGridList" parameterType="hashmap" resultType="String">	
		SELECT GRID_${grid_level}_CD as GRID_CD
		FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
		<choose>
			<when test="srvAreaType == 1">
				WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
			</when>
			<otherwise>
				WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
			</otherwise>
		</choose>
	</select>
	
	<select id="selectGridAreaList" parameterType="hashmap" resultType="Double">
		select st_area(bord) from SRV_PG_GRID_${grid_level}_BORD limit 1
	</select>	

	<!-- SGIS4_생활권역 시작 -->
	<!-- 산업체 코드 조회 -->
	<select id="selectKSIClist" parameterType="hashmap" resultType="hashmap">
		<choose>
			<when test='workGb == "S"'>
				select 
					trim(class_code) as class_code, class_nm, main_class_code, super_class_nm
				from (
				<if test="minDepth lte 1">
					select
						distinct
						ksic_1_cd class_code
					  	, ksic_1_nm class_nm
					  	, ksic_1_cd main_class_code
					  	, '' super_class_nm
					  	<!-- SGIS4_1025_생활권역 시작 -->
					  	, 1 as priority
					  	<!-- SGIS4_1025_생활권역 끝 -->
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_1_nm like '%'||#{schWord}||'%' or ksic_1_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
					union all				
				</if>
				<if test="minDepth lte 2">
					select
						distinct
						ksic_2_cd class_code
					  	, ksic_2_nm class_nm
					  	, ksic_1_cd main_class_code
					  	, ksic_1_nm super_class_nm
					  	<!-- SGIS4_1025_생활권역 시작 -->
					  	, 1 as priority
					  	<!-- SGIS4_1025_생활권역 끝 -->					  						
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_2_nm like '%'||#{schWord}||'%' or ksic_2_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
						, ksic_2_cd
						, ksic_2_nm
					union all
				</if>
				<if test="minDepth lte 3">	
					select
						distinct
						ksic_3_cd class_code
					  	, ksic_3_nm class_nm
					  	, ksic_1_cd main_class_code
					  	, ksic_1_nm || ':' || ksic_2_nm super_class_nm
					  	<!-- SGIS4_1025_생활권역 시작 -->
					  	, 1 as priority
					  	<!-- SGIS4_1025_생활권역 끝 -->					  				
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_3_nm like '%'||#{schWord}||'%' or ksic_3_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
						, ksic_2_cd
						, ksic_2_nm
						, ksic_3_cd
						, ksic_3_nm						
					union all
				</if>
				<if test="minDepth lte 4">
					select
						distinct
						ksic_4_cd class_code
					  	, ksic_4_nm class_nm
					  	, ksic_1_cd main_class_code
					  	, ksic_1_nm || ':' || ksic_2_nm || ':' || ksic_3_nm super_class_nm
					  	<!-- SGIS4_1025_생활권역 시작 -->
					  	, 1 as priority
					  	<!-- SGIS4_1025_생활권역 끝 -->					  					
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_4_nm like '%'||#{schWord}||'%' or ksic_4_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
						, ksic_2_cd
						, ksic_2_nm
						, ksic_3_cd
						, ksic_3_nm	
						, ksic_4_cd
						, ksic_4_nm											
					union all
				</if>
					select
						main.ksic_5_cd as class_code
					  	, main.ksic_5_nm as class_nm
					  	, main.ksic_1_cd as main_class_code
					  	, main.ksic_1_nm || ':' || main.ksic_2_nm || ':' || main.ksic_3_nm || ':' || main.ksic_4_nm as super_class_nm
					  	<!-- SGIS4_1025_생활권역 시작 -->
					  	, (case when (instr(main.ksic_5_nm, #{schWord}) > 0 or instr(main.ksic_5_cd, #{schWord}) > 0) then 1 else 0 end) as priority
					  	<!-- SGIS4_1025_생활권역 끝 -->
					from cmm_cd_corpclass with (nolock) main
						left outer join SRV_DT_SRVAREA_CORPCLASS with (nolock) sub
							on sub.class_deg = main.class_deg and sub.ksic_cd = main.ksic_5_cd and sub.ksic_depth = 5
					where 
						main.class_deg = #{classDeg}
						and main.ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							<!-- and (main.ksic_5_nm like '%'||#{schWord}||'%' or main.ksic_5_cd like #{schWord}||'%' or main.syn like '%'||#{schWord}||'%') -->
							and (main.ksic_5_nm like '%'||#{schWord}||'%' or main.ksic_5_cd like #{schWord}||'%' or sub.ksic_kwrd like '%'||#{schWord}||'%')
						</if>
				)
				<!-- SGIS4_1025_생활권역 시작 -->
				order by priority desc, main_class_code, LENGTH(TRIM(class_code)), class_code 
				<!-- SGIS4_1025_생활권역 끝 -->
				limit #{startRowNo}, #{rowsPerPage}
			</when>
			<otherwise>
				select 
					distinct
					<if test='code_length == null '>
						ksic_1_cd class_code
					  , ksic_1_nm class_nm
					  , ksic_1_cd class_code2
					  , '' super_class_nm
					</if>
					<if test='code_length == "1" '>
						ksic_1_cd||ksic_2_cd class_code
					  , ksic_2_nm class_nm
					  , ksic_2_cd class_code2
					  , ksic_1_nm super_class_nm
					</if>
					<if test='code_length == "3" '>
						ksic_1_cd||ksic_3_cd class_code
					  , ksic_3_nm class_nm
					  , ksic_3_cd class_code2
					  , ksic_1_nm || ':' || ksic_2_nm super_class_nm
					</if>
					<if test='code_length == "4" '>
						ksic_1_cd||ksic_4_cd class_code
					  , ksic_4_nm class_nm
					  , ksic_4_cd class_code2
					  , ksic_1_nm || ':' || ksic_2_nm || ':' || ksic_3_nm super_class_nm
					</if>
					<if test='code_length == "5" or code_length == "6" '>	
						ksic_1_cd||ksic_5_cd class_code
					  , ksic_5_nm class_nm
					  , ksic_5_cd class_code2
					  , ksic_1_nm || ':' || ksic_2_nm || ':' || ksic_3_nm || ':' || ksic_4_nm super_class_nm
					</if>
				from cmm_cd_corpclass with (nolock) 
				where 
					class_deg = #{classDeg}
					and ksic_1_cd != '0'
					<if test='code_length != null '>
						and ksic_1_cd = #{ksic1}
					</if>
					<if test='classCd != null and code_length != "1" '>
						and ksic_5_cd like #{ksic5}||'%'
					</if> 
				group by 
					<if test='code_length == null '>
						ksic_1_cd
					  , ksic_1_nm
					</if>
					<if test='code_length == "1" '>
						ksic_1_cd
					  , ksic_1_nm
					  , ksic_2_cd
					  , ksic_2_nm
					</if>
					<if test='code_length == "3" '>
						ksic_1_cd
					  , ksic_1_nm
					  , ksic_2_cd
					  , ksic_2_nm
					  , ksic_3_cd
					  , ksic_3_nm
					</if>
					<if test='code_length == "4" '>
						ksic_1_cd
					  , ksic_1_nm
					  , ksic_2_cd
					  , ksic_2_nm
					  , ksic_3_cd
					  , ksic_3_nm
					  , ksic_4_cd
					  , ksic_4_nm
					</if>
					<if test='code_length == "5" or code_length == "6" '>	
						ksic_1_cd
					  , ksic_1_nm
					  , ksic_2_cd
					  , ksic_2_nm
					  , ksic_3_cd
					  , ksic_3_nm
					  , ksic_4_cd
					  , ksic_4_nm
					  , ksic_5_cd
					  , ksic_5_nm
					</if>
			</otherwise>
		</choose>	
	</select>
	
	<select id="selectKSICCnt" parameterType="hashmap" resultType="int">	
		select 
			count(*) 
		from (
				<if test="minDepth lte 1">
					select
						distinct
						ksic_1_cd class_code
					  	, ksic_1_nm class_nm
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_1_nm like '%'||#{schWord}||'%' or ksic_1_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
					union all				
				</if>
				<if test="minDepth lte 2">
					select
						distinct
						ksic_2_cd class_code
					  	, ksic_2_nm class_nm		
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_2_nm like '%'||#{schWord}||'%' or ksic_2_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
						, ksic_2_cd
						, ksic_2_nm
					union all
				</if>
				<if test="minDepth lte 3">	
					select
						distinct
						ksic_3_cd class_code
					  	, ksic_3_nm class_nm				
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_3_nm like '%'||#{schWord}||'%' or ksic_3_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
						, ksic_2_cd
						, ksic_2_nm
						, ksic_3_cd
						, ksic_3_nm						
					union all
				</if>
				<if test="minDepth lte 4">
					select
						distinct
						ksic_4_cd class_code
					  	, ksic_4_nm class_nm				
					from cmm_cd_corpclass with (nolock)
					where 
						class_deg = #{classDeg}
						and ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (ksic_4_nm like '%'||#{schWord}||'%' or ksic_4_cd like #{schWord}||'%')
						</if>
					group by
						ksic_1_cd
						, ksic_1_nm
						, ksic_2_cd
						, ksic_2_nm
						, ksic_3_cd
						, ksic_3_nm	
						, ksic_4_cd
						, ksic_4_nm											
					union all
				</if>
					select
						main.ksic_5_cd as class_code
					  	, main.ksic_5_nm as class_nm
					from cmm_cd_corpclass with (nolock) main
						left outer join SRV_DT_SRVAREA_CORPCLASS with (nolock) sub
							on sub.class_deg = main.class_deg and sub.ksic_cd = main.ksic_5_cd and sub.ksic_depth = 5
					where 
						main.class_deg = #{classDeg}
						and main.ksic_1_cd != '0'
						<if test='schWord != null and schWord != ""'>
							and (main.ksic_5_nm like '%'||#{schWord}||'%' or main.ksic_5_cd like #{schWord}||'%' or sub.ksic_kwrd like '%'||#{schWord}||'%')
						</if>				
		)				
	</select>

	<!-- 산업체 상세 조회 -->
	<select id="selectKSICdetail" parameterType="hashmap" resultType="hashmap">
		select
			CLASS_DEG
			, KSIC_CD
			, UPPER_KSIC_CD
			, KSIC_NM
			, KSIC_NM_ENG
			, KSIC_DEPTH
			, KSIC_EXP
			, EXP_EX
			, EXP_EXCL
			, KSIC_KWRD		
		from SRV_DT_SRVAREA_CORPCLASS cls
		where
			cls.CLASS_DEG = #{classDeg}
			and cls.KSIC_CD = #{ksicCd}			
	</select>	
		
	<!-- 한국산업표준분류 추천 목록 조회 -->
	<select id="selectRecmdKSICList" parameterType="hashmap" resultType="hashmap">
		select
			ksic_cd, ksic_nm, ksic_depth, order_no, ksic_path
		from (
			SELECT
				 R1.ksic_cd, R1.ksic_depth, R1.order_no, K1.ksic_1_nm as ksic_nm, '' as ksic_path
			FROM
				SRV_DT_SRVAREA_RECMD_KSIC R1
				INNER JOIN (
					select distinct ksic_1_cd, ksic_1_nm from CMM_CD_CORPCLASS with (nolock) where class_deg = #{classDeg}
				) K1 ON K1.ksic_1_cd = R1.ksic_cd  
			WHERE
				R1.class_deg = #{classDeg}
				and R1.ksic_depth = 1
				and R1.use_yn = 'Y'
			union all
			SELECT
				 R2.ksic_cd, R2.ksic_depth, R2.order_no, K2.ksic_2_nm as ksic_nm, K2.ksic_1_nm as ksic_path 
			FROM
				SRV_DT_SRVAREA_RECMD_KSIC R2
				INNER JOIN (
					select distinct ksic_2_cd, ksic_2_nm, ksic_1_nm from CMM_CD_CORPCLASS with (nolock) where class_deg = #{classDeg}
				) K2 ON K2.ksic_2_cd = R2.ksic_cd  
			WHERE
				R2.class_deg = #{classDeg}
				and R2.ksic_depth = 2
				and R2.use_yn = 'Y'	
			union all
			SELECT
				 R3.ksic_cd, R3.ksic_depth, R3.order_no, K3.ksic_3_nm as ksic_nm, K3.ksic_1_nm || ':' || K3.ksic_2_nm as ksic_path  
			FROM
				SRV_DT_SRVAREA_RECMD_KSIC R3
				INNER JOIN (
					select distinct ksic_3_cd, ksic_3_nm, ksic_1_nm, ksic_2_nm from CMM_CD_CORPCLASS with (nolock) where class_deg = #{classDeg}
				) K3 ON K3.ksic_3_cd = R3.ksic_cd  
			WHERE
				R3.class_deg = #{classDeg}
				and R3.ksic_depth = 3
				and R3.use_yn = 'Y'		
			union all
			SELECT
				 R4.ksic_cd, R4.ksic_depth, R4.order_no, K4.ksic_4_nm as ksic_nm, K4.ksic_1_nm || ':' || K4.ksic_2_nm || ':' || K4.ksic_3_nm as ksic_path 
			FROM
				SRV_DT_SRVAREA_RECMD_KSIC R4
				INNER JOIN (
					select distinct ksic_4_cd, ksic_4_nm, ksic_1_nm, ksic_2_nm, ksic_3_nm from CMM_CD_CORPCLASS with (nolock) where class_deg = #{classDeg}
				) K4 ON K4.ksic_4_cd = R4.ksic_cd  
			WHERE
				R4.class_deg = #{classDeg}
				and R4.ksic_depth = 4
				and R4.use_yn = 'Y'		
			union all	
			SELECT
				 R5.ksic_cd, R5.ksic_depth, R5.order_no, K5.ksic_5_nm as ksic_nm, K5.ksic_1_nm || ':' || K5.ksic_2_nm || ':' || K5.ksic_3_nm || ':' || K5.ksic_4_nm as ksic_path 
			FROM
				SRV_DT_SRVAREA_RECMD_KSIC R5
				INNER JOIN (
					select ksic_5_cd, ksic_5_nm, ksic_1_nm, ksic_2_nm, ksic_3_nm, ksic_4_nm from CMM_CD_CORPCLASS with (nolock) where class_deg = #{classDeg}
				) K5 ON K5.ksic_5_cd = R5.ksic_cd  
			WHERE
				R5.class_deg = #{classDeg}
				and R5.ksic_depth = 5
				and R5.use_yn = 'Y'			
		)					
		ORDER BY order_no
	</select>

	<!-- 생활업종 목록 조회 -->
	<select id="selectLifeBizList" parameterType="hashmap" resultType="hashmap">
		select
			'1' as lvl
			, b_theme_cd as theme_cd
			, max(b_theme_cd_nm) as theme_cd_nm			
			, min(substr(order_no, 1, 2)) as b_order_no
			, 1 as order_no
			, count(b_theme_cd) as mem_cnt
		from CMM_CD_THEME
		where
			lifebiz_yn = 'Y'
		group by
			b_theme_cd
		union
		select
			'2' as lvl
			, theme_cd as theme_cd
			, s_theme_cd_nm as theme_cd_nm
			, substr(order_no, 1, 2) as b_order_no			
			, order_no
			, 1  as mem_cnt			
		from CMM_CD_THEME
		where
			lifebiz_yn = 'Y'
		order by
			b_order_no, order_no
	</select>		
	<!-- SGIS4_생활권역 끝 -->	
	
	<!-- SGIS4_1025_생활권역_임의영역 시작 -->
	<select id="selectSrvareaScopeInfo" parameterType="hashmap" resultType="hashmap">
		select T1.scope_type, T1.min_scope_value, T1.max_scope_value, T1.scope_intrvl, T1.unit_nm, T2.s_class_cd_nm
		from srv_dt_srvarea_scopeinfo with (nolock) T1
		left outer join cmm_cd_comcd with (nolock) T2
			on T1.scope_type = T2.s_class_cd
		where T2.b_class_cd = 'SRVA15'
	</select>
	<!-- SGIS4_1025_생활권역_임의영역 끝 -->
	
	<!-- SGIS4_1025_생활권역 시작 -->
	<!-- selectCoprList를 사용하는곳에서 호출(selectCoprList에서 따오기도 했고)하므로, 기존 selectCoprList 쿼리와  변수명 등 동일 -->
	<select id="selectCoprList2" parameterType="hashmap" resultType="hashmap">
		select
			abc.*, def.s_theme_cd_nm
		from (
				select
					(case when BASE_YEAR = '9016' then '2016' else BASE_YEAR end) as BASE_YEAR
					, GRID_CD
					<choose>
						<when test='isCharacteristicsCopr == "Y"'>
							, corp_cnt as COPR_CNT
							, corp_bsca as COPR_BSCA							
							, corp_lk as LK
							, corp_sk as SK
							, corp_d1 as D1
							, corp_d2 as D2
							, corp_dd1z as DD1Z
						</when>
						<otherwise>
							, employee_cnt as EMPLOYEE_CNT
							, employee_bsca as EMPLOYEE_BSCA
							, employee_lk as LK
							, employee_sk as SK
							, employee_d1 as D1
							, employee_d2 as D2
							, employee_dd1z as DD1Z							
						</otherwise>
					</choose>
					, ksic_5_cd
					, (select theme_cd from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_5_cd = grd.ksic_5_cd) as theme_cd 
				from
					(
						select 
							dat.* 
						from srv_dt_grid_totidx_theme_bsca with (nolock) dat
						where
							1=1
							<if test="copr_base_year != null and copr_base_year != ''"> 
								and dat.BASE_YEAR = #{copr_base_year}
							</if>
							<if test="area != null and area != ''"> 
								and dat.GRID_CD IN (
											SELECT GRID_${grid_level}_CD
											FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
											<choose>
												<when test="srvAreaType == 1">
													WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
												</when>
												<otherwise>
													WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
												</otherwise>
											</choose>								
								)
							</if>
							<choose>
								<when test='isCharacteristicsCopr == "Y"'>
									<if test='copr_ksic_3_cd != null and copr_ksic_3_cd != ""'>
										and dat.ksic_5_cd in (
											select
												cls.ksic_5_cd
											from
												cmm_cd_corpclass with (nolock) cls
												inner join CMM_CD_THEME with (nolock) thm on thm.theme_cd = cls.theme_cd 
													and thm.lifebiz_yn = 'Y'											
											where
												cls.class_deg = #{classDeg}
												and thm.b_theme_cd in (
														select 
															thm2.b_theme_cd 
														from CMM_CD_THEME with (nolock) thm2 
														where thm2.lifebiz_yn = 'Y' 
															and (thm2.theme_cd = #{copr_ksic_3_cd} or thm2.b_theme_cd = #{copr_ksic_3_cd})
												)
										)							
									</if>
								</when>
								<otherwise>
									<if test='employee_ksic_3_cd != null and employee_ksic_3_cd != ""'>
										and dat.ksic_5_cd in (
											select
												cls.ksic_5_cd
											from
												cmm_cd_corpclass with (nolock) cls
												inner join CMM_CD_THEME with (nolock) thm on thm.theme_cd = cls.theme_cd 
													and thm.lifebiz_yn = 'Y'											
											where
												cls.class_deg = #{classDeg}
												and thm.b_theme_cd in (
														select 
															thm2.b_theme_cd 
														from CMM_CD_THEME with (nolock) thm2 
														where thm2.lifebiz_yn = 'Y' 
															and (thm2.theme_cd = #{employee_ksic_3_cd} or thm2.b_theme_cd = #{employee_ksic_3_cd})
												)
										)
									</if>					
								</otherwise>
							</choose>										
					) grd
		) abc
		left outer join CMM_CD_THEME with (nolock) def on def.theme_cd = abc.theme_cd and def.lifebiz_yn = 'Y'				
	</select>
	
	<select id="selectCoprList3" parameterType="hashmap" resultType="hashmap">
		select
			abc.*, def.ksic_1_nm as ksic_nm
		from (	
			select
				(case when BASE_YEAR = '9016' then '2016' else BASE_YEAR end) as BASE_YEAR
				, GRID_CD
				<choose>
					<when test='isCharacteristicsCopr == "Y"'>
						, corp_cnt as COPR_CNT
						, corp_bsca as COPR_BSCA							
						, corp_lk as LK
						, corp_sk as SK
						, corp_d1 as D1
						, corp_d2 as D2
						, corp_dd1z as DD1Z
					</when>
					<otherwise>
						, employee_cnt as EMPLOYEE_CNT
						, employee_bsca as EMPLOYEE_BSCA
						, employee_lk as LK
						, employee_sk as SK
						, employee_d1 as D1
						, employee_d2 as D2
						, employee_dd1z as DD1Z							
					</otherwise>
				</choose>
				, ksic_1_cd as ksic_cd
			from 
				(
					select dat.* 
					from srv_dt_grid_totidx_theme_bsca with (nolock) dat
					where
						dat.ksic_5_cd != '00000'
						<if test="copr_base_year != null and copr_base_year != ''"> 
							and dat.BASE_YEAR = #{copr_base_year}
						</if>
						<if test="area != null and area != ''"> 
							and dat.GRID_CD IN (
										SELECT GRID_${grid_level}_CD
										FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
										<choose>
											<when test="srvAreaType == 1">
												WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
											</when>
											<otherwise>
												WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
											</otherwise>
										</choose>								
							)
						</if>
				) grd
		) abc
		left outer join (
				select ksic_1_cd, ksic_1_nm 
				from cmm_cd_corpclass with (nolock) 
				where class_deg = #{classDeg} 
				group by ksic_1_cd, ksic_1_nm
		) def on def.ksic_1_cd = abc.ksic_cd 
	</select>
	
	<!-- 요청값으로 소분류(ksic_3_cd), 세분류(ksic_4_cd), 세세분류(ksic_5_cd) 중 한개가 전달됨  -->
	<select id="selectCoprList5" parameterType="hashmap" resultType="hashmap">
		select
		<choose>
			<when test='isCharacteristicsCopr == "Y"'>		
				<choose>
					<when test='girdUnit == "100m"'>	
						<!-- 대분류 BSCA 계산용 -->
						SUM(CASE WHEN dat.corp_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C01_LE_ORG_CNT
						, SUM(CASE WHEN dat.corp_bsca = 3 THEN 1 ELSE 0 END) AS C01_EQ_SCA_CNT
						, SUM(CASE WHEN dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C01_LE_ORG_SUM
						, SUM(CASE WHEN dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_bsca ELSE 0 END) AS C01_LE_SCA_SUM
						, SUM(CASE WHEN dat.corp_cnt <![CDATA[>]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C01_GT_ORG_SUM
						<!-- 중분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C02_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) AND dat.corp_bsca = 3 THEN 1 ELSE 0 END) AS C02_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C02_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_bsca ELSE 0 END) AS C02_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) AND dat.corp_cnt <![CDATA[>]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C02_GT_ORG_SUM
						<!-- 소분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C03_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) AND dat.corp_bsca = 3 THEN 1 ELSE 0 END) AS C03_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C03_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_bsca ELSE 0 END) AS C03_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) AND dat.corp_cnt <![CDATA[>]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C03_GT_ORG_SUM
						<if test="ksicCdLen gte 4">
							<!-- 세분류 BSCA 계산용 -->
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C04_LE_ORG_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) AND dat.corp_bsca = 3 THEN 1 ELSE 0 END) AS C04_EQ_SCA_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C04_LE_ORG_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_bsca ELSE 0 END) AS C04_LE_SCA_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) AND dat.corp_cnt <![CDATA[>]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C04_GT_ORG_SUM
						</if>
						<if test="ksicCdLen gte 5">
							<!-- 세세분류 BSCA 계산용 -->
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} AND dat.corp_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C05_LE_ORG_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} AND dat.corp_bsca = 3 THEN 1 ELSE 0 END) AS C05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C05_LE_ORG_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} AND dat.corp_cnt <![CDATA[<=]]> 3 THEN dat.corp_bsca ELSE 0 END) AS C05_LE_SCA_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} AND dat.corp_cnt <![CDATA[>]]> 3 THEN dat.corp_cnt ELSE 0 END) AS C05_GT_ORG_SUM
						</if>
					</when>
					<otherwise>					
						<!-- 대분류 BSCA 계산용 -->
						SUM(dat.corp_lk) AS C01_LE_ORG_CNT
						, SUM(dat.corp_sk) AS C01_EQ_SCA_CNT
						, SUM(dat.corp_d1) AS C01_LE_ORG_SUM
						, SUM(dat.corp_d2) AS C01_LE_SCA_SUM
						, SUM(dat.corp_dd1z) AS C01_GT_ORG_SUM
						<!-- 중분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) THEN dat.corp_lk ELSE 0 END) AS C02_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) THEN dat.corp_sk ELSE 0 END) AS C02_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) THEN dat.corp_d1 ELSE 0 END) AS C02_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) THEN dat.corp_d2 ELSE 0 END) AS C02_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{copr_ksic_3_cd}, 2) THEN dat.corp_dd1z ELSE 0 END) AS C02_GT_ORG_SUM
						<!-- 소분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) THEN dat.corp_lk ELSE 0 END) AS C03_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) THEN dat.corp_sk ELSE 0 END) AS C03_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) THEN dat.corp_d1 ELSE 0 END) AS C03_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) THEN dat.corp_d2 ELSE 0 END) AS C03_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{copr_ksic_3_cd}, 3) THEN dat.corp_dd1z ELSE 0 END) AS C03_GT_ORG_SUM
						<if test="ksicCdLen gte 4">
							<!-- 세분류 BSCA 계산용 -->
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) THEN dat.corp_lk ELSE 0 END) AS C04_LE_ORG_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) THEN dat.corp_sk ELSE 0 END) AS C04_EQ_SCA_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) THEN dat.corp_d1 ELSE 0 END) AS C04_LE_ORG_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) THEN dat.corp_d2 ELSE 0 END) AS C04_LE_SCA_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{copr_ksic_3_cd}, 4) THEN dat.corp_dd1z ELSE 0 END) AS C04_GT_ORG_SUM						
						</if>
						<if test="ksicCdLen gte 5">
							<!-- 세세분류 BSCA 계산용 -->
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} THEN dat.corp_lk ELSE 0 END) AS C05_LE_ORG_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} THEN dat.corp_sk ELSE 0 END) AS C05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} THEN dat.corp_d1 ELSE 0 END) AS C05_LE_ORG_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} THEN dat.corp_d2 ELSE 0 END) AS C05_LE_SCA_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{copr_ksic_3_cd} THEN dat.corp_dd1z ELSE 0 END) AS C05_GT_ORG_SUM						
						</if>										
					</otherwise>
				</choose>
				, MAX(dat.ksic_1_cd) as ksic_1_cd
				, (select ksic_1_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_5_cd like #{copr_ksic_3_cd} || '%' limit 1) as ksic_1_cd_nm
				, MAX(left(#{copr_ksic_3_cd}, 2)) as ksic_2_cd
				, (select ksic_2_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_2_cd = left(#{copr_ksic_3_cd}, 2) limit 1) as ksic_2_cd_nm
				, MAX(left(#{copr_ksic_3_cd}, 3)) as ksic_3_cd
				, (select ksic_3_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_3_cd = left(#{copr_ksic_3_cd}, 3) limit 1) as ksic_3_cd_nm
				<if test="ksicCdLen gte 4">
					, MAX(left(#{copr_ksic_3_cd}, 4)) as ksic_4_cd
					, (select ksic_4_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_4_cd = left(#{copr_ksic_3_cd}, 4) limit 1) as ksic_4_cd_nm						
				</if>						
				<if test="ksicCdLen gte 5">
					, MAX(left(#{copr_ksic_3_cd}, 5)) as ksic_5_cd
					, (select ksic_5_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_5_cd = #{copr_ksic_3_cd} limit 1) as ksic_5_cd_nm						
				</if>																
			</when>
			<otherwise>	
				<choose>
					<when test='girdUnit == "100m"'>	
						<!-- 대분류 BSCA 계산용 -->
						SUM(CASE WHEN dat.employee_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C01_LE_ORG_CNT
						, SUM(CASE WHEN dat.employee_bsca = 3 THEN 1 ELSE 0 END) AS C01_EQ_SCA_CNT
						, SUM(CASE WHEN dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C01_LE_ORG_SUM
						, SUM(CASE WHEN dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_bsca ELSE 0 END) AS C01_LE_SCA_SUM
						, SUM(CASE WHEN dat.employee_cnt <![CDATA[>]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C01_GT_ORG_SUM
						<!-- 중분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C02_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) AND dat.employee_bsca = 3 THEN 1 ELSE 0 END) AS C02_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C02_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_bsca ELSE 0 END) AS C02_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) AND dat.employee_cnt <![CDATA[>]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C02_GT_ORG_SUM
						<!-- 소분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C03_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) AND dat.employee_bsca = 3 THEN 1 ELSE 0 END) AS C03_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C03_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_bsca ELSE 0 END) AS C03_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) AND dat.employee_cnt <![CDATA[>]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C03_GT_ORG_SUM
						<if test="ksicCdLen gte 4">
							<!-- 세분류 BSCA 계산용 -->
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C04_LE_ORG_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) AND dat.employee_bsca = 3 THEN 1 ELSE 0 END) AS C04_EQ_SCA_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C04_LE_ORG_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_bsca ELSE 0 END) AS C04_LE_SCA_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) AND dat.employee_cnt <![CDATA[>]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C04_GT_ORG_SUM
						</if>
						<if test="ksicCdLen gte 5">
							<!-- 세세분류 BSCA 계산용 -->
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} AND dat.employee_cnt <![CDATA[<=]]> 3 THEN 1 ELSE 0 END) AS C05_LE_ORG_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} AND dat.employee_bsca = 3 THEN 1 ELSE 0 END) AS C05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C05_LE_ORG_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} AND dat.employee_cnt <![CDATA[<=]]> 3 THEN dat.employee_bsca ELSE 0 END) AS C05_LE_SCA_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} AND dat.employee_cnt <![CDATA[>]]> 3 THEN dat.employee_cnt ELSE 0 END) AS C05_GT_ORG_SUM
						</if>
					</when>
					<otherwise>					
						<!-- 대분류 BSCA 계산용 -->
						SUM(dat.employee_lk) AS C01_LE_ORG_CNT
						, SUM(dat.employee_sk) AS C01_EQ_SCA_CNT
						, SUM(dat.employee_d1) AS C01_LE_ORG_SUM
						, SUM(dat.employee_d2) AS C01_LE_SCA_SUM
						, SUM(dat.employee_dd1z) AS C01_GT_ORG_SUM
						<!-- 중분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) THEN dat.employee_lk ELSE 0 END) AS C02_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) THEN dat.employee_sk ELSE 0 END) AS C02_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) THEN dat.employee_d1 ELSE 0 END) AS C02_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) THEN dat.employee_d2 ELSE 0 END) AS C02_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 2) = left(#{employee_ksic_3_cd}, 2) THEN dat.employee_dd1z ELSE 0 END) AS C02_GT_ORG_SUM
						<!-- 소분류 BSCA 계산용 -->
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) THEN dat.employee_lk ELSE 0 END) AS C03_LE_ORG_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) THEN dat.employee_sk ELSE 0 END) AS C03_EQ_SCA_CNT
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) THEN dat.employee_d1 ELSE 0 END) AS C03_LE_ORG_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) THEN dat.employee_d2 ELSE 0 END) AS C03_LE_SCA_SUM
						, SUM(CASE WHEN left(dat.ksic_5_cd, 3) = left(#{employee_ksic_3_cd}, 3) THEN dat.employee_dd1z ELSE 0 END) AS C03_GT_ORG_SUM
						<if test="ksicCdLen gte 4">
							<!-- 세분류 BSCA 계산용 -->
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) THEN dat.employee_lk ELSE 0 END) AS C04_LE_ORG_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) THEN dat.employee_sk ELSE 0 END) AS C04_EQ_SCA_CNT
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) THEN dat.employee_d1 ELSE 0 END) AS C04_LE_ORG_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) THEN dat.employee_d2 ELSE 0 END) AS C04_LE_SCA_SUM
							, SUM(CASE WHEN left(dat.ksic_5_cd, 4) = left(#{employee_ksic_3_cd}, 4) THEN dat.employee_dd1z ELSE 0 END) AS C04_GT_ORG_SUM						
						</if>
						<if test="ksicCdLen gte 5">
							<!-- 세세분류 BSCA 계산용 -->
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} THEN dat.employee_lk ELSE 0 END) AS C05_LE_ORG_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} THEN dat.employee_sk ELSE 0 END) AS C05_EQ_SCA_CNT
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} THEN dat.employee_d1 ELSE 0 END) AS C05_LE_ORG_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} THEN dat.employee_d2 ELSE 0 END) AS C05_LE_SCA_SUM
							, SUM(CASE WHEN dat.ksic_5_cd = #{employee_ksic_3_cd} THEN dat.employee_dd1z ELSE 0 END) AS C05_GT_ORG_SUM						
						</if>										
					</otherwise>
				</choose>
				, MAX(dat.ksic_1_cd) as ksic_1_cd
				, (select ksic_1_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_5_cd like #{employee_ksic_3_cd} || '%' limit 1) as ksic_1_cd_nm
				, MAX(left(#{employee_ksic_3_cd}, 2)) as ksic_2_cd
				, (select ksic_2_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_2_cd = left(#{employee_ksic_3_cd}, 2) limit 1) as ksic_2_cd_nm
				, MAX(left(#{employee_ksic_3_cd}, 3)) as ksic_3_cd
				, (select ksic_3_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_3_cd = left(#{employee_ksic_3_cd}, 3) limit 1) as ksic_3_cd_nm
				<if test="ksicCdLen gte 4">
					, MAX(left(#{employee_ksic_3_cd}, 4)) as ksic_4_cd
					, (select ksic_4_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_4_cd = left(#{employee_ksic_3_cd}, 4) limit 1) as ksic_4_cd_nm						
				</if>						
				<if test="ksicCdLen gte 5">
					, MAX(left(#{employee_ksic_3_cd}, 5)) as ksic_5_cd
					, (select ksic_5_nm from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_5_cd = #{employee_ksic_3_cd} limit 1) as ksic_5_cd_nm						
				</if>		
			</otherwise>
		</choose>	
		from srv_dt_grid_totidx_theme_bsca with (nolock) dat	
		where
			dat.ksic_5_cd != '00000'
			<if test="copr_base_year != null and copr_base_year != ''"> 
				and dat.BASE_YEAR = #{copr_base_year}
			</if>
			<if test="area != null and area != ''"> 
				and dat.GRID_CD IN (
							SELECT GRID_${grid_level}_CD
							FROM SRV_PG_GRID_${grid_level}_BORD with (nolock)
							<choose>
								<when test="srvAreaType == 1">
									WHERE st_intersects(BORD, st_polyfromtext(#{area},0))=1	
								</when>
								<otherwise>
									WHERE st_intersects(BORD, (select ST_BUFFER(ST_POINTFROMTEXT(#{area},0), #{radius}) from DUAL))=1	
								</otherwise>
							</choose>								
				)
			</if>
			<choose>
				<when test='isCharacteristicsCopr == "Y"'>		
					and dat.ksic_1_cd = (select ksic_1_cd from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_5_cd like #{copr_ksic_3_cd} || '%' limit 1)
				</when>		
				<otherwise>	
					and dat.ksic_1_cd = (select ksic_1_cd from cmm_cd_corpclass with (nolock) where class_deg = #{classDeg} and ksic_5_cd like #{employee_ksic_3_cd} || '%' limit 1)
				</otherwise>
			</choose>
	</select>
	<!-- SGIS4_1025_생활권역 끝 -->
</mapper>