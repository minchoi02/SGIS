
   //왼쪽 메뉴 초기화 하는 함수 
    function fn_init_left_menu(){
    	 //임시로 막아둔다 doka todo
	     //let main_contents_condition1 = main_contents_condition_temp1 +"" ;
	     let main_contents_condition1 = "" ;	     
    	 
	     //let main_contents_condition2 = main_contents_condition_temp2 +"" ;
	     let main_contents_condition2 = "" ;	     
	     
	     $(".main_contents_all_stat_condition").empty();
		 $(".main_contents_all_stat_condition").append(main_contents_condition1);
		 $(".main_contents_all_stat_condition").append(main_contents_condition2);	
		 
		 $(".checkbox_listWrap").empty();
	     $(".checkbox_listWrap").html(fn_data_kind_all_menu());
	     setTimeout(fn_left_tooltip_event,200);
    }
    
    
    //툴팁이벤트
    function fn_left_tooltip_event(){
    	const hint = document.querySelectorAll('.tooltip');
	    let i=1 ;
    	hint.forEach(function(hintTarget){
    	    let tipText = $(hintTarget).data('tip');

	        let findId = "tooltip"+i ;    	    
	        let id = "tipLayer"+i ;
	        
	        $("#"+findId).mouseover(function(e){
    	        let divX = e.pageX ;
    	        let divY = e.pageY;
    	        $("#"+id).css({'display':'block',
    	                            'left':divX,
    	                            'top':divY,
    	                            'position':'absolute'});
	        });
	        
	        $("#"+findId).mouseout(function(e){
    	        $("#"+id).css('display',"none");
    	    });
    	    i++ ;
    	});
    }
    
    // 주소변경시 실행되는 함수
    function fn_curArea(boardType){
    	
		$.ajax({
              url : openApiPath + "/OpenAPI3/boundary/hadmarea.geojson?accessToken="+mapInfo.accessToken+"&year="+mapInfo.base_year+"&adm_cd="+ mapInfo.region_cd,
              type : "get",
				success: function (res, status) {
					// layer add 
					if (res.errMsg !="Success") {
						alert('  경계 데이터 조회 실패입니다. 잠시후에 시도해주세요');
						return ;
					}
					mapInfo.oriArea = res;   //경계는 저장만 한다.
					
				    if (mapInfo.boardType=='board1') {
						fn_getStatistic();   //색지도는 데이터를 가지고 온다음.    // todo				    	
					   fn_init_board_type1();  //  오른쪽 상황판 그리기
				    } else if (mapInfo.boardType=='board2') {
						fn_getStatistic();   //색지도는 데이터를 가지고 온다음.    // todo				    	
					   fn_init_board_type2();  //  오른쪽 상황판 그리기 				    	
				    } else if (mapInfo.boardType=='board3') {
						fn_getStatistic();   //색지도는 데이터를 가지고 온다음.    // todo				    	
				        fn_init_left_menu();   //주소변경시 왼쪽 메뉴도 동적으로 변경필요 
				    }
				},
				complete : function(){

				    
			    },
			});
    }    

    function fn_data_kind_all_menu(){
    	let result = "" ;
    	let i=1 ;
    	for (let id in mapInfo.data_kind_all) {
    		let check_box_html = main_contents_checkbox_list_temp+ "" ;
    		let tooltip_html   = main_contents_checkbox_list_tooltip_temp+ "" ;
    		let checkedTxt = (i==1)?"checked":"";
    		
    	    let obj = mapInfo.data_kind_all[id];
    	    let obj2 = {extypeId:"extype"+ i, exType: obj.type.toLowerCase()+"Type",tooltipId:"tooltip"+i, tipLayerId:"tipLayer"+i, comments:"*이 지표는 시도 현황판에서만 활성화 되는 메뉴입니다.", checked:checkedTxt, statType:id };
    		check_box_html = fn_temp_replaceAll(check_box_html, obj) ;
    		check_box_html = fn_temp_replaceAll(check_box_html, obj2) ;
    		
    		tooltip_html = fn_temp_replaceAll(tooltip_html, obj) ;
    		tooltip_html = fn_temp_replaceAll(tooltip_html, obj2) ;
    		
    		result = result + check_box_html ;
    		result = result + tooltip_html ;    		
    		i++ ;
    	}
    	result = "<form>" + result + "</form>" ; 
    	
    	return result ;
    }
    
    //우리동네상환판
    function fn_board1_fullData(){
    	
    	let infoDiv_cd = (mapInfo.view_cd=='sido')?'2':'3' ;  //시도모드이면 시군구 정보 시군구모드 읍면동 정보
    	const obj = {
    			        boardType: 'board1'
    			    ,   baseYear: mapInfo.base_year
	    			,  thisYear: mapInfo.this_year
	    			, lastYear: mapInfo.last_year
	    			, viewCd: mapInfo.view_cd
	    			, regionCd: mapInfo.region_cd
	    			, sidoCd: mapInfo.sido_cd
	    			, sggCd: mapInfo.sgg_cd
	    			, emdongCd: mapInfo.emdong_cd	    		
	    			, infoDiv: infoDiv_cd 
	    			, list : mapInfo.data_kind[mapInfo.view_cd]
    				, yearList : mapInfo.year_list
    			} ;

         /*    
                 행정구역 데이터 존재하면 바로 리셋모드
    	if (!mapInfoData[mapInfo.region_cd]) {
    		fn_curArea(1);   //걍계부터 그리자
    		return ;    		
    	}
         */
    	
    	$.ajax({
            url : "/view/lvs/dataList" ,
            data: JSON.stringify(obj),
            dataType: "json",
            contentType: "application/json; charset=UTF-8",            
            type : "POST",
				success: function (res, status) {
					if (res[0].errMsg !="Success") {
						alert(' 통계 데이터 조회 실패입니다. 잠시후에 시도해주세요');
						return ;
					}
					
					//console.log(res[0][mapInfo.region_cd]);
					mapInfoData[mapInfo.region_cd] = res[0][mapInfo.region_cd];
					
			   		//mapInfo.map.setView(sop.utmk(mapInfo.x2, mapInfo.y2), mapInfo.level);
				},
				complete : function(){
					fn_curArea('board1');   //걍계부터 그리자
			    },
			});
    }    
    
    //추천지표
    function fn_board2_fullData(){
		//읍면동 모드
    	let infoDiv_cd = (mapInfo.view_cd=="sido")?"2":"3";
        let seekcode = (mapInfo.view_cd=="sido")?mapInfo.sido_cd:mapInfo.sido_cd +""+ mapInfo.sgg_cd +"" ;		
    	const obj = {
		               boardType: 'board2'    
		             , board2Kind: mapInfo.board2Kind  
    			    ,  baseYear: mapInfo.base_year
	    			,  thisYear: mapInfo.this_year
	    			, lastYear: mapInfo.last_year
	    			, viewCd: mapInfo.view_cd
	    			, regionCd: seekcode
	    			, sidoCd: mapInfo.sido_cd
	    			, sggCd: mapInfo.sgg_cd
	    			, emdongCd: mapInfo.emdong_cd	    		
	    			, infoDiv: infoDiv_cd
	    			, list : mapInfo.data_kind[mapInfo.view_cd]
    				, yearList : mapInfo.year_list
    				, orderCd: mapInfo.data_kind_rec[mapInfo.board2Kind][0]
    				, orderMethod: ' desc '	
    			} ;

              //   행정구역 데이터 존재하면 바로 리셋모드
    	
    	$.ajax({
            url : "/view/lvs/dataRecList" ,
            data: JSON.stringify(obj),
            dataType: "json",
            contentType: "application/json; charset=UTF-8",            
            type : "POST",
				success: function (res, status) {
					if (res[0].errMsg !="Success") {
						alert(' 통계 데이터 조회 실패입니다. 잠시후에 시도해주세요');
						return ;
					}
					mapInfoRecData[mapInfo.region_cd] = res[0][mapInfo.region_cd]  ;
			   		//mapInfo.map.setView(sop.utmk(mapInfo.x2, mapInfo.y2), mapInfo.level);
				},
				complete : function(){
					//alert("막자");
					 fn_curArea('board2');   //걍계부터 그리자
			    },
			});
    }
    
    
    // 모든 지표보기 파라메티 설정
    function fn_setBoard3DataParam(){
    	let seekcode = "";
    	if      (mapInfo.view_cd =="sido")  {
    		seekcode = mapInfo.sido_cd ;
    		infoDiv = "1";
    	} else if (mapInfo.view_cd =="sgg") {
    		seekcode = mapInfo.sido_cd + mapInfo.sgg_cd ;
    		infoDiv = "2";
    	} else if (mapInfo.view_cd =="emdong") {
    		infoDiv = "3";    		
    		//seekcode = mapInfo.sido_cd + mapInfo.sgg_cd + mapInfo.emdong_cd ;
    		seekcode = mapInfo.sido_cd + mapInfo.sgg_cd ;    		
    	}
    	
    	const obj = {
    			   boardType: 'board3'    
			    ,  borderYear: mapInfo.base_year
	 			, viewCd: mapInfo.view_cd
	 			, regionCd: seekcode
	 			, sidoCd: mapInfo.sido_cd
	 			, sggCd: mapInfo.sgg_cd
	 			, emdongCd: mapInfo.emdong_cd	    		
	 			, infoDiv: infoDiv
			} ;
    	
    	return obj ;
    }
    
    
    //추천지표
    function fn_board3_fullData(key){
		//읍면동 모드
    	if (key==null || key==undefined)
            mapInfo.dataKind = Object.keys(mapInfo.data_kind_all)[0];
     	else 
     		mapInfo.dataKind = key ;
    	
		 fn_curArea('board3');   //걍계부터 그리자
    }
    
    // 모든지표불려오기   //임시로 불러오기
    function fn_get_board3_data(key,curYear=""){
    	
    	mapInfo.dataKind = key ;
        mapInfo.boardType = "board3";
        //데이터가 존재하면 
        
         /* 캐시기능막기
        if (mapInfoAllData[mapInfo.region_cd] && mapInfoAllData[mapInfo.region_cd][mapInfo.dataKind]){
        	$("#curStat").html(mapInfo.data_kind_all[mapInfo.dataKind].name);
			fn_setDataForLayer3(mapInfo.dataKind);  //색지도 표시				
			fn_init_board_type3();  //보드표시
        }*/
        
        const obj = fn_setBoard3DataParam() ;  //파라메터 수정
        obj.datakind = mapInfo.dataKind ;

        if (curYear!="") {
        	obj.queryYear=curYear ;
        }
        
        mapInfo.region_cd = obj.regionCd ;

        if (!mapInfoAllData[mapInfo.region_cd]){
        	mapInfoAllData[mapInfo.region_cd] =  {} ;
        }
        
    	$.ajax({
            url : "/view/lvs/dataAllStatList" ,
            data: JSON.stringify(obj),
            dataType: "json",
            contentType: "application/json; charset=UTF-8",            
            type : "POST",
				success: function (res, status) {
					if (res[0].errMsg !="Success") {
						alert(' 통계 데이터 조회 실패입니다. 잠시후에 시도해주세요');
						return ;
					}
					
					mapInfoAllData[mapInfo.region_cd][mapInfo.dataKind] = res[0][mapInfo.region_cd]  ;
					//널짜 선택기능이 있는 것들만
					if(curYear !="") mapInfoAllData[mapInfo.region_cd][mapInfo.dataKind].curYear = curYear ; 
					
		        	$("#curStat").html(mapInfo.data_kind_all[mapInfo.dataKind].name);
					fn_setDataForLayer3(mapInfo.dataKind);  //색지도 표시				
					fn_init_board_type3();  //보드표시
				},
				complete : function(){
			    },
			});
    }
    
    
    //토큰발행요청
    function fn_init_map(){
    	if (accessToken!="none"){
    		mapInfo.accessToken = accessToken ;
    		fn_init_map2();    		
    	} else {
    		accessTokenInfo();
    		setTimeout(fn_init_map2,1000);  //1초뒤에 실행
    	}
    }
    
    
    //토큰발행요청
    //개발 시 
    function fn_init_map_dev(){
    	$.ajax({
            url : openApiPath + "/OpenAPI3/auth/authentication.json" +
            		"?consumer_key="+mapInfo.consumer_key+"&consumer_secret="+mapInfo.consumer_secret,
            type : "get",
				success: function (res, status) {
					mapInfo.accessToken = res.result.accessToken;//토큰을 가져온다.
					fn_init_map2();  
				},
				complete : function(){
			    },
			});
    }
    
    function fn_init_slider(){
    	$('.slick_slider').slick({
    	    dots: true,
    	    speed: 300,
    	    prevArrow:".arrows > .prev_arrow",
    	    nextArrow:".arrows > .next_arrow",
    	    autoplay: false,
    	    autoplaySpeed: 13000
    	  });
    }
    
    function fn_init_slider2(){
    	$('#tabType2Content').slick({
            dots: true,
            speed: 300,
            arrows:false,
            autoplay: false,
            autoplaySpeed: 12000,
    	});
    }
    
    function fn_data_display(obj){
        $(this).toggleClass("active");

        mapInfo.mode = (mapInfo.mode=="hide"?"show":"hide"); 
        
		if  (mapInfo.boardType=="board1")
			  fn_setDataForLayer1(mapInfo.dataKind);
		else if (mapInfo.boardType=="board2")
			 fn_setDataForLayer2(mapInfo.dataKind);
		else if (mapInfo.boardType=="board3")
			 fn_setDataForLayer3(mapInfo.dataKind);			
    }
    
    
    function fn_init_event_config() {
        $('.location_more').click(function () {
          if (!$(this).hasClass("active")) {
            $(this).addClass("active");

          } else {
            $(this).removeClass("active");
          }
          //$('.location_more_box').toggle();

          $('.location_more_box').show();
          $('.location_more_box').removeClass("active");
          
        
        });

        $('#btn_close').click(function () {
          $('.location_more_box').hide();
          $('.location_more').removeClass("active");
        });
  	
  	
      // 팝업 레이어 닫기
      
      $(".layer_close").click(function (e) {
          $(e.target).closest('.popup_layer').hide();
      }) ;
      
      fn_tabComon_event_config();

      
      //첫번재 보드 슬라이더 이벤트      
      $('.extend_data_01 .slider_item').click(function (event) {
      	let num =  parseInt($(event.target).closest('.slider_item').find('span.num').text())-1 ;
      	mapInfo.dataKind = mapInfo.data_kind[mapInfo.view_cd][num];
      	fn_slider_click(mapInfo.dataKind);
     });
      
      //두번째 보드 슬라이더 이벤트      
      $('.extend_data_02 .rcmdItem').click(function (event) {
      	let num =  parseInt($(event.target).closest('.rcmdItem').find('span.num').text())-1 ;
        mapInfo.dataKind =mapInfo.data_kind_rec[mapInfo.board2Kind][num];
      	fn_slider_click2(mapInfo.dataKind);
     });
 
    }
    
    function fn_tabComon_event_config(mode) {
    	if(!mode){
    		$(".tabCommon li a").off("click");
    	}
    	
        $(".tabCommon li a").click(function () {
            let activeTab = $(this).attr("rel");
            let tabName = $(this).data('tabname')
            $(this).parent().siblings("li").removeClass("active");
            $(this).parent().addClass("active"); 
            
            if(tabName == "tab2")  $(".tab_container2").children('.tab_content2').hide();  // 우리동네 상황판 차트, 테이블
            else if (tabName == "tab3") $(this).closest('.tab_container').siblings('.tab_content3').hide(); // 추천지표보기, 모든지표 보기
            else if (tabName == "tab4") $(this).closest('.tab_container4').children('.tab4').hide(); // 추천지표 (변화그래프, 지역내 순위, 변화지도, 타 지자체 비교)
            else if (tabName == "tab5") $(this).closest('.tab_container5').children('.tab_content5').hide(); // 소지역보기 팝업 (집계구보기, 변화지도, 변화그래프)
            else if (tabName == "tab6") $(this).closest('.result_box').children('.step_box').hide();
            else if (tabName == "tab8" || tabName == "tab9") $(this).closest('.tabCommon').siblings('.tabContent').children('li').hide();
            
            if(!activeTab) {
                activeTab = $(this).data('tab') ;
                $(this).closest('.tabCommon').siblings('.tabContent').children('li').each(function(i,item) {
                    $(item).removeClass('active')
                    $(item).hide()
                    if(activeTab == $(item).data('link')) {
                        $(item).show();
                        $(item).addClass('active')
                    }
                })
            } else {
                $("#" + activeTab).fadeIn(10);
            }
            
            
            if(activeTab == "tab4_1")  $('#tab4_chart1').highcharts().reflow() // 추천지표 변화그래프
            else if(activeTab == "tab4_3") $('#tab4_chart3').highcharts().reflow()  // 추천지표 지역내 순위
            else if(activeTab == "tab4_4") {                                         // 추천지표 타 지자체 비교
                $('#vrsChartId_row1').highcharts().reflow()
                $('#vrsChartId_row2').highcharts().reflow()
            } else if (activeTab == "tab5_3") $("#popupChart1").highcharts().reflow() // 소지역보기 변화그래프
            

        });
    }
    
    function fn_slider_click(dataKey){
    	//console.log('%c click',"color:red")
    	
    	mapInfo.boardType=="board1";
    	//step1 색지도 변경
    	fn_getStatistic(dataKey);  //색지도다시 그리기
    	//step2 맵 상단 변경
    	obj = mapInfoData[mapInfo.region_cd][dataKey] ;
    	$("#curStat").html(obj.name);
    	
    	//step3 오른쪽 상단 변경
		fn_set_board_top_type1();
    }
    
    function fn_slider_click2(dataKey){
    	//alert('정리하자'); 색지도 다시 그리자
    	//step1 색지도 변경
    	mapInfo.boardType=="board2";    	
    	fn_getStatistic(dataKey);  //색지도다시 그리기
    	//step2 맵 상단 변경
    	let obj = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][dataKey] ;
    	$("#curStat").html(obj.name);
    	
    	//데이터하단을 그리자 작은 모드일때는 다시 조정해야 함.
    	fn_init_board_type2_bottom();    	
    	
    }
    
    function openPopup (type, param) { 
        if (type == 'type1') { // 메인페이지 이동
            $(".popup_layer.type1").show();
        } else if (type == "type2") {  // 소지역 보기 팝업

            let mapStatus = true // 맵 상태가 소지역일때 false, 소지역 이상일때 true 

            if (!mapStatus) {
                $(".popup_layer.failed").show()
                return false;
            }

            $(".popup_layer.type2.success").show() // 소지역 보기 팝업 오픈 

            // chart render 
            let title = "임시타이틀"
            let dummyData = { "title": title, "category": [], "data": [] } // 변화그래프 탭 차트
            let count = makeRandomData(5, 12);
            for (i = 0; i < count; i++) {
                dummyData.category.push(2010 + i);
                dummyData.data.push(makeRandomData(100, 500))
            }

            combiLineColumn('popupChart1', dummyData);
        }
    }

		    
	 function fn_init_map2(){
		if (accessToken !="none") mapInfo.accessToken=accessToken ;

		let url = window.location.href+"" ;
		if (url.indexOf('localhost')>=0 || url.indexOf('https')>=0)
			mapInfo.secure_mode = true ;
		
	   	 if (mapInfo.secure_mode && navigator.geolocation) {
	   		  let check ; 
	   	      navigator.geolocation.getCurrentPosition(function (position) {
		   	      var utmkXY = new sop.LatLng (position.coords.latitude, position.coords.longitude);
		   	  	  mapInfo.x = utmkXY.x;
		   	  	  mapInfo.y = utmkXY.y ;
		   	  	  mapInfo.x2 = parseFloat(parseFloat(mapInfo.x) )  ;
		   	  	  mapInfo.y2 = parseFloat(parseFloat(mapInfo.y) )  ;		   	  	  
		   	  	  
		   	   	  mapInfo.map = sop.map("map",mapInfo.options);
		   		  mapInfo.map.setView(sop.utmk(mapInfo.x2, mapInfo.y2), mapInfo.level);
		   		  getReverseGeo();
		   		 check = true ;
	   	      }); 
	   	      
	   	      if (!check) {
		   	   	  mapInfo.map = sop.map("map",mapInfo.options);
		   		  mapInfo.map.setView(sop.utmk(mapInfo.x, mapInfo.y), mapInfo.level);
		   		  mapInfo.map.dragging.enable();
		   		  getReverseGeo();
	   	      }
	   	      
	   	  } else {
	   	   	  mapInfo.map = sop.map("map",mapInfo.options);
	   		  mapInfo.map.setView(sop.utmk(mapInfo.x, mapInfo.y), mapInfo.level);
	   		  mapInfo.map.dragging.enable();
	   		  getReverseGeo();
	   	  }
   	  }
	 
	 function fn_make_slick_sliderContent(){
		 let cnt = mapInfo.data_kind[mapInfo.view_cd].length ;
		 let pageCnt =  Math.ceil(cnt/6) ;
		 let result = "" ;		 
		 for (let i=0; i<pageCnt; i++){
			 var slick_sliderContent = slick_sliderContent_temp + "" ;
			 let id = "sliderContent" + i  ;
			 slick_sliderContent = slick_sliderContent.replaceAll('#sliderContentId#', id) ;
			 slick_sliderContent = slick_sliderContent.replaceAll('#slick_sliderContent_item#', fn_make_slick_sliderContent_item(i)) ;			 
			 result = result + slick_sliderContent ;
		 }
		 return result ;
	 }
	 
	 
	 function fn_make_slick_sliderContent_item(pageNo){
		 let obj = mapInfo.data_kind[mapInfo.view_cd] ;
		 let code = mapInfo.region_cd ;
		 
		 let cnt = obj.length ;
		 let result = "" ;
		 
		 
		 for (let i=0; i<6; i++){
			 var num = parseInt(pageNo*6 +i+1) ;
			 if (num>cnt) break;
			 let key = obj[num-1];
			 let mode = (mapInfo.data_kind2_list.indexOf(key)>0)?"kind2":"kind1" ;
				 
			 
			 let item = mapInfoData[code][key];			 
			 var id = "chartId" + num ;
			 
			 var slick_sliderContent_item  =   (mapInfo.data_kind2_list.indexOf(key)>0)?slick_sliderContent_item_temp:slick_sliderContent_item_temp2 + "" ;
			 //var slick_sliderContent_item  =  slick_sliderContent_item_temp ;
			 slick_sliderContent_item = fn_temp_replaceAll(slick_sliderContent_item, item) ;
			 slick_sliderContent_item = slick_sliderContent_item.replaceAll("#sliderContent_item_chartId#",id);			 
			 slick_sliderContent_item = slick_sliderContent_item.replaceAll("#num#",num);  
			 result = result + slick_sliderContent_item ;
		 }
		 	 
		 return result ;
	 }
	 
	 function fn_tabContent2_slider_chart(statData){
		 var dataKindObj = mapInfo["data_kind"][mapInfo.view_cd];

        for(let i=0; i<dataKindObj.length; i++){
        	let id = "chartId" + parseInt(i+1);
        	let type = mapInfo.chartType[dataKindObj[i]] ;
        	let item = statData[dataKindObj[i]] ;
        	
            if      (type == 'donut')  fn_layerDonut(id, item );
            else if (type == 'column') fn_layerColumn(id, item);
            else if (type == 'map')    fn_layerMap(id, item);
            else if (type == 'pie')    fn_layerPie(id, item);
            else if (type == 'line')   fn_layerLine(id, item);
            else console.log("nothing");
        }
	 }
	 
	 
     //일괄변환함수하나 만들자
     //숫자|| 문자##
     
     function fn_temp_replaceAll(temp,data){
    	 let result = temp + "" ;
    	 for(key in data) {
    		 if (typeof(data[key])=="object") continue ; 
 		    let tag = "#"+key+"#";
		    let tag2 = "||"+key+"||";
		    
		    result = result.replaceAll(tag, data[key]);
		    result = result.replaceAll(tag2, fn_numberFormat(data[key]));		    


    	 }
    	 return result;
     }
     
     function fn_set_board_top_type1(){
		 let dataKey =  mapInfo.dataKind ;		 
		 let statData = mapInfoData[mapInfo.region_cd] ;
	     let extend_data_01_main_sec01 = extend_data_01_main_sec01_temp +"" ;
	     let extend_data_01_main_sec02 = extend_data_01_main_sec02_temp +"" ;
	     let extend_data_01_main_sec01_type2  = extend_data_01_main_sec01_type2_temp +"" ;	     
	     
	     extend_data_01_main_sec01 =  fn_temp_replaceAll(extend_data_01_main_sec01,statData[dataKey]) ;	     
	     extend_data_01_main_sec02 =  fn_temp_replaceAll(extend_data_01_main_sec02,statData[dataKey]) ;
		 let mode = (mapInfo.data_kind2_list.indexOf(dataKey)>0)?"kind2":"kind1" ;
		 
		 if (mode == "kind2"){
			 extend_data_01_main_sec01_type2  =  fn_temp_replaceAll(extend_data_01_main_sec01_type2,statData[dataKey]) ;			 
		 } else {
			 extend_data_01_main_sec01_type2 ="" ;
		 }
		 
		 extend_data_01_main_sec01 =  extend_data_01_main_sec01.replaceAll('#extend_data_01_main_sec01_type2#', extend_data_01_main_sec01_type2) ;   //두개짜리 처리
		 let extend_data_01_sub = extend_data_01_sub_temp +""  ;
		 extend_data_01_sub  = extend_data_01_sub.replaceAll('#extend_data_01_main_sec01#', extend_data_01_main_sec01) ; 
		 extend_data_01_sub = extend_data_01_sub.replaceAll('#extend_data_01_main_sec02#', extend_data_01_main_sec02) ;
	     //extend_data_01  = extend_data_01.replaceAll('#extend_data_01_sub#', extend_data_01_sub) ;
	     
	     $(".extend_data_01 .main").empty();
		 $(".extend_data_01 .main").html(extend_data_01_sub);
		 fn_tabContent2_chart(statData[dataKey]['yearData']);		 
     }
     
	 function fn_init_board_type1(){
		 let dataKey =  mapInfo.dataKind ;		 
		 let statData = mapInfoData[mapInfo.region_cd] ;
		 
		 let extend_data_01 = extend_data_01_temp +""  ;
		 
	     extend_data_01 = extend_data_01.replaceAll('#slick_sliderContent#', fn_make_slick_sliderContent()) ;		 
		 
	     $(".extend_data_01").empty();
		 $(".extend_data_01").html(extend_data_01);
		 
	     fn_set_board_top_type1();
		 let statName = mapInfo.data_kind[mapInfo.view_cd][0] ;
		 //fn_tabContent2_slider_chart(statData);
		 fn_init_event_config();
		 setTimeout(fn_init_slider, 100);//슬라이더 초기화
		 setTimeout(fn_tabContent2_slider_chart, 100,statData);		 

	 }
	 
	 
	 //두번째 상황판그리기
	 function fn_init_board_type2(num){
		 let dataKey =  mapInfo.dataKind;
		 let statData =  mapInfoRecData[mapInfo.region_cd];
		 
		 let curAreaName = "" ;
		 let curAreaUpName = "" ;		 
		 

		 if (mapInfo.view_cd=="sido") {
			 curAreaName = $("#curSido").html() ;
			 curAreaUpName = "전국" ;			 
		 } else  {
			 curAreaName = $("#curSido").html()+" "+$("#curSgg").html() ;
			 curAreaUpName = $("#curSido").html() ;			 
		 }
		 
		 const obj = statData[mapInfo.board2Kind][dataKey] ;
		 const obj2 = {"adm_nm": curAreaName, "adm_up_nm": curAreaUpName};
		 
		 
		 let extend_data_02_tab4_1 = extend_data_02_tab4_1_temp +""  ;
		 extend_data_02_tab4_1 = fn_temp_replaceAll(extend_data_02_tab4_1, obj) ;
		 
		 let extend_data_02_tab4_2 = extend_data_02_tab4_2_temp +""  ;
		 extend_data_02_tab4_2 = fn_temp_replaceAll(extend_data_02_tab4_2, obj) ;
		 extend_data_02_tab4_2 = fn_temp_replaceAll(extend_data_02_tab4_2, obj2) ;		 
		 
		 let extend_data_02_tab4_3 = extend_data_02_tab4_3_temp +""  ;
		 let extend_data_02_tab4_3_select  =  fn_make_select_option(obj["yearData"],obj["base_year"] );
		 extend_data_02_tab4_3 = extend_data_02_tab4_3.replaceAll("#extend_data_02_tab4_3_select#",extend_data_02_tab4_3_select);
		 
		 extend_data_02_tab4_3 = fn_temp_replaceAll(extend_data_02_tab4_3, obj) ;
		 extend_data_02_tab4_3 = fn_temp_replaceAll(extend_data_02_tab4_3, obj2) ;		 
		 
		 let extend_data_02_tab4_4 = extend_data_02_tab4_4_temp +""  ;
		 let extend_data_02_tab4_4_row1 = extend_data_02_tab4_4_row_temp +""  ;
		 let extend_data_02_tab4_4_row2 = extend_data_02_tab4_4_row_temp +""  ;
		 
		 //todo 모드에 따라 수정하자
		 obj2["rowNo"] = 'row1';
		 extend_data_02_tab4_4_row1 = fn_temp_replaceAll(extend_data_02_tab4_4_row1, obj) ;		 
		 extend_data_02_tab4_4_row1 = fn_temp_replaceAll(extend_data_02_tab4_4_row1, obj2) ;
		 
		 obj2["rowNo"] = 'row2';
		 obj2["adm_nm"] = curAreaUpName ;	 
		 extend_data_02_tab4_4_row2 = fn_temp_replaceAll(extend_data_02_tab4_4_row2, obj) ;		 
		 extend_data_02_tab4_4_row2 = fn_temp_replaceAll(extend_data_02_tab4_4_row2, obj2) ;
		 
		 extend_data_02_tab4_4 = extend_data_02_tab4_4.replaceAll("#extend_data_02_tab4_4_row1#",extend_data_02_tab4_4_row1);
		 extend_data_02_tab4_4 = extend_data_02_tab4_4.replaceAll("#extend_data_02_tab4_4_row2#",extend_data_02_tab4_4_row2);
		 
		 
		 extend_data_02_tab4_4 = fn_temp_replaceAll(extend_data_02_tab4_4, obj2) ;		 
		 
		 let vrs_region_popup = vrs_region_popup_temp +""  ;
		 vrs_region_popup = fn_temp_replaceAll(vrs_region_popup, obj) ;
		 extend_data_02_tab4_4 = extend_data_02_tab4_4.replaceAll('#vrsRegionPopup#', vrs_region_popup) ;
		 //시도정보는 그냥 가져오자.                                        
		 
		 let extend_data_02 = extend_data_02_temp +""  ;
	     extend_data_02 = extend_data_02.replaceAll('#extend_data_02_slider_item#', fn_make_slick_sliderBoard2Content()) ;
	     extend_data_02 = extend_data_02.replaceAll('#extend_data_02_tab4_1#', extend_data_02_tab4_1) ;	     
	     extend_data_02 = extend_data_02.replaceAll('#extend_data_02_tab4_2#', extend_data_02_tab4_2) ;	     
	     extend_data_02 = extend_data_02.replaceAll('#extend_data_02_tab4_3#', extend_data_02_tab4_3) ;	     
	     extend_data_02 = extend_data_02.replaceAll('#extend_data_02_tab4_4#', extend_data_02_tab4_4) ;

	     
	     $(".extend_data_02").empty();
		 $(".extend_data_02").html(extend_data_02);
		 
		 fn_board2_topslider_chart(dataKey);
		 fn_board2_tab4_1_chart(dataKey);
		 
		 fn_board2_3_init_chart();   //
		 
		 fn_board2_4_init_top();
		 fn_board2_4_init_bottom();		 
		 
		 let board2KindLen = mapInfo.data_kind_rec[mapInfo.board2Kind].length

		 if(board2KindLen > 4) fn_init_slider2()	 
		 fn_init_event_config();
	 }
	 
	 //하단만 변경하기
	 function fn_init_board_type2_bottom(){
		 let dataKey =  mapInfo.dataKind;
		 let statData =  mapInfoRecData[mapInfo.region_cd];
		 
		 let curAreaName = "" ;
		 let curAreaUpName = "" ;		 
		 

		 if (mapInfo.view_cd=="sido") {
			 curAreaName = $("#curSido").html() ;
			 curAreaUpName = "전국" ;			 
		 } else  {
			 curAreaName = $("#curSido").html()+" "+$("#curSgg").html() ;
			 curAreaUpName = $("#curSido").html() ;			 
		 }
		 
		 const obj = statData[mapInfo.board2Kind][dataKey] ;
		 const obj2 = {"adm_nm": curAreaName, "adm_up_nm": curAreaUpName};
		 
		 
		 let extend_data_02_tab4_1 = extend_data_02_tab4_1_temp +""  ;
		 extend_data_02_tab4_1 = fn_temp_replaceAll(extend_data_02_tab4_1, obj) ;
		 
		 let extend_data_02_tab4_2 = extend_data_02_tab4_2_temp +""  ;
		 extend_data_02_tab4_2 = fn_temp_replaceAll(extend_data_02_tab4_2, obj) ;
		 extend_data_02_tab4_2 = fn_temp_replaceAll(extend_data_02_tab4_2, obj2) ;		 
		 
		 let extend_data_02_tab4_3 = extend_data_02_tab4_3_temp +""  ;
		 let extend_data_02_tab4_3_select  =  fn_make_select_option(obj["yearData"],obj["base_year"] );
		 extend_data_02_tab4_3 = extend_data_02_tab4_3.replaceAll("#extend_data_02_tab4_3_select#",extend_data_02_tab4_3_select);
		 
		 extend_data_02_tab4_3 = fn_temp_replaceAll(extend_data_02_tab4_3, obj) ;
		 extend_data_02_tab4_3 = fn_temp_replaceAll(extend_data_02_tab4_3, obj2) ;		 
		 
		 let extend_data_02_tab4_4 = extend_data_02_tab4_4_temp +""  ;
		 let extend_data_02_tab4_4_row1 = extend_data_02_tab4_4_row_temp +""  ;
		 let extend_data_02_tab4_4_row2 = extend_data_02_tab4_4_row_temp +""  ;
		 
		 //todo 모드에 따라 수정하자
		 obj2["rowNo"] = 'row1';
		 extend_data_02_tab4_4_row1 = fn_temp_replaceAll(extend_data_02_tab4_4_row1, obj) ;		 
		 extend_data_02_tab4_4_row1 = fn_temp_replaceAll(extend_data_02_tab4_4_row1, obj2) ;
		 
		 obj2["rowNo"] = 'row2';
		 obj2["adm_nm"] = curAreaUpName ;	 
		 extend_data_02_tab4_4_row2 = fn_temp_replaceAll(extend_data_02_tab4_4_row2, obj) ;		 
		 extend_data_02_tab4_4_row2 = fn_temp_replaceAll(extend_data_02_tab4_4_row2, obj2) ;
		 
		 extend_data_02_tab4_4 = extend_data_02_tab4_4.replaceAll("#extend_data_02_tab4_4_row1#",extend_data_02_tab4_4_row1);
		 extend_data_02_tab4_4 = extend_data_02_tab4_4.replaceAll("#extend_data_02_tab4_4_row2#",extend_data_02_tab4_4_row2);
		 extend_data_02_tab4_4 = fn_temp_replaceAll(extend_data_02_tab4_4, obj2) ;		 
		 
		 let vrs_region_popup = vrs_region_popup_temp +""  ;
		 vrs_region_popup = fn_temp_replaceAll(vrs_region_popup, obj) ;
		 extend_data_02_tab4_4 = extend_data_02_tab4_4.replaceAll('#vrsRegionPopup#', vrs_region_popup) ;
		 //시도정보는 그냥 가져오자.                                        
		 
	     $("#tab4_1").empty();
		 $("#tab4_1").html(extend_data_02_tab4_1);
		 
	     $("#tab4_2").empty();
		 $("#tab4_2").html(extend_data_02_tab4_2);
		 
	     $("#tab4_3").empty();
		 $("#tab4_3").html(extend_data_02_tab4_3);
		 
	     $("#tab4_4").empty();
		 $("#tab4_4").html(extend_data_02_tab4_4);
		 
		 fn_board2_tab4_1_chart(dataKey);
		 fn_board2_3_init_chart();   //
		 fn_board2_4_init_top();
		 fn_board2_4_init_bottom();		 
		 
		 $('#tab4_chart1').highcharts().reflow() // 추천지표 변화그래프
		 $('#tab4_chart3').highcharts().reflow()  // 추천지표 지역내 순위
         $('#vrsChartId_row1').highcharts().reflow()
         $('#vrsChartId_row2').highcharts().reflow()
         $(".tabs4.tabCommon").children('ul').children('li:first-child').children('a').click();
	 }
	 
	 
	 function fn_make_select_option(yearData, thisYear){
		 const option_temp = "<option value='#code#' #selected# >#val#년</option>";
		 const arr  = yearData.category ; 
		 var result = "" ;
		 
		 for(let i=arr.length-1; i>=0; i--){
			 const selectObj = {code:arr[i],selected:(thisYear==arr[i])?"selected":"",val:arr[i] };
			 const option_html = option_temp +"";
			 result = result + fn_temp_replaceAll(option_html, selectObj);
		 }
		 return result ;
	 }
	 
	 
	 function data_02_tab4_3(thisObj){
		 //doka mapInfo.dataKind
		 fn_board2_3_init_chart($("select[name=tab4_3_year]").val())		 
	 }
	 
	 function fn_board2_topslider_chart(dataKey){
		 let obj = mapInfo.data_kind_rec[mapInfo.board2Kind] ; 	

		 for (let i=0; i<obj.length; i++){
			 var num = parseInt(i)+1 ;
			 var chartid = "chartBoard2Id" + num ;
			 var key = obj[i];			 
			 let item = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][key];  
			 fn_layerColumnType2(chartid,item, mapInfo.view_cd);
		 }
	 }
	 

	 function fn_board2_tab4_1_chart(dataKey){
		 let item = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][dataKey]["yearData"];		 
		 var chartid = "tab4_chart1"  ;		 
		 fn_combiLineColumn(chartid,item);
	 }
	 
	 function fn_make_slick_sliderBoard2Content(){
		 let obj = mapInfo.data_kind_rec[mapInfo.board2Kind] ;   
		 let result = "" ;
		 
		 for (let i=0; i<obj.length; i++){
			 var num = parseInt(i)+1 ;
			 var key = obj[i];
			 var id = "chartBoard2Id" + num ;
			 let firstDiv = "", lastDiv ="" ;
			 if (i%4==0) firstDiv = "<div class='sliderStart'>";
			 if (i%4==3) lastDiv = "</div>";			 
			 let extend_data_02_slider_item = firstDiv + extend_data_02_slider_item_temp +""  ;
			 
			 let item = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][key];			 
			 extend_data_02_slider_item = fn_temp_replaceAll(extend_data_02_slider_item, item) ;
			 extend_data_02_slider_item = extend_data_02_slider_item.replaceAll("#chartId#",id);			 
			 extend_data_02_slider_item = extend_data_02_slider_item.replaceAll("#num#",num);  
			 result = result + extend_data_02_slider_item + lastDiv ;
			 
		 }
		 return result ;
	 }
	 
	 //
	 function fn_get_data_nm(boardType,num,mode){
		 let dataKey  ;	
		 let statData  ;
		 let region_cd = mapInfo.region_cd;
		 if (mapInfo.view_cd=="emdong") region_cd = mapInfo.sido_cd + mapInfo.sgg_cd;
		 
		 if(boardType=="board1") {
			 dataKey =  mapInfo.data_kind[mapInfo.view_cd][num] ;
			 statData = mapInfoData[region_cd] ;			 
		 } else if (boardType=="board2"){
			 let key =  mapInfo.board2_data_kind_rec[num];
			 dataKey =  mapInfo.data_kind_rec[key][num] ;
 			 statData = mapInfoRecData[region_cd] ;
		 } else if (boardType=="board3"){
			 dataKey = mapInfo.dataKind ;
			 statData = mapInfoAllData[region_cd][dataKey] ;
		 }
		 
		 if (mode=="dataKey"){
			 return dataKey ;
		 } else if (mode=="statData"){
			 return statData ;
		 }
		 
		 return dataKey;
	 }
	 
	 function fn_board2_2(){
		 
		 let extend_data_02_tab4_2 = extend_data_02_tab4_2_temp +""  ;
		 //let item = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][key];

		 let item = {"adm_nm": $("#curSido").html()+" "+$("#curSgg").html()};
		 extend_data_02_tab4_2 = fn_temp_replaceAll(extend_data_02_tab4_2, item) ;
		 
		 $("#tab4_2").html(extend_data_02_tab4_2);
		 
  	   	  mapInfo.map21 = sop.map("map_board2_1",mapInfo.options);
   		  mapInfo.map21.setView(sop.utmk(mapInfo.x2, mapInfo.y2), mapInfo.level);
   		  
   	   	  mapInfo.map22 = sop.map("map_board2_2",mapInfo.options);
   		  mapInfo.map22.setView(sop.utmk(mapInfo.x2, mapInfo.y2), mapInfo.level);
   		  
   	   	  mapInfo.map23 = sop.map("map_board2_3",mapInfo.options);
   		  mapInfo.map23.setView(sop.utmk(mapInfo.x2, mapInfo.y2), mapInfo.level);
   		  
	 }
	 
	 function fn_board2_3(){
		 let extend_data_02_tab4_3 = extend_data_02_tab4_3_temp +""  ;		 
		 let item = {"adm_nm": $("#curSido").html()+" "+$("#curSgg").html()};

		 //let item = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][key];
		 extend_data_02_tab4_3 = fn_temp_replaceAll(extend_data_02_tab4_3, item) ;
		 $("#tab4_3").html(extend_data_02_tab4_3);
		 
		 fn_board2_3_init_chart();
	 }
	 
	 function fn_getCensusYearData(obj2, dataKind){
		 const obj = obj2 ;
		 for(let i=0; i<obj.length; i++){
			 for(let j=0; j<obj.length-1; j++){
				 if (obj[j][dataKind]<obj[j+1][dataKind]){
					 const tempObj = obj[j] ;
					 obj[j] = obj[j+1] ;
					 obj[j+1] = tempObj ;
				 }
			 }
		 }   //버블정렬 내림차순으로 정렬

		 const resultObj = {category:[], data:[]} ;
		 for(let i=0; i<obj.length; i++){
			 resultObj.category[i] = obj[i]["adm_nm"] ;
			 resultObj.data[i]     = obj[i][dataKind] ;			 
		 }
		 return resultObj  ;
	 }
	 
	 
	 function fn_getCensusYearCmpData(obj, dataKind){
		 const resultObj = {category:[], data:[]} ;
		 for(let i=0; i<obj.length; i++){
			 resultObj.category[i] = obj[i]["base_year"] ;
			 resultObj.data[i]     = obj[i][dataKind] ;			 
		 }
		 return resultObj  ;
	 }
	 
	 function fn_setBoard2DataParam(queryYear){
    	 let infoDiv_cd = (mapInfo.view_cd=="sido")?"2":"3";
    	 let infoDiv_cd_board2 = (mapInfo.view_cd=="sido")?"1":"2";		
         let seekcode = mapInfo.sido_cd +""+ mapInfo.sgg_cd +"";
         if (queryYear==null||queryYear==undefined) queryYear = mapInfo.this_year ; 
		 
		 const obj ={
	               boardType: 'board2'    
			             , board2Kind: mapInfo.board2Kind  
	    			    ,  baseYear: mapInfo.base_year
		    			,  thisYear: queryYear
		    			, lastYear: mapInfo.last_year
		    			, viewCd: mapInfo.view_cd
		    			, regionCd: seekcode
		    			, sidoCd: mapInfo.sido_cd
		    			, sggCd: mapInfo.sgg_cd
		    			, emdongCd: mapInfo.emdong_cd	    		
		    			, infoDiv: infoDiv_cd
		    			, list : mapInfo.data_kind[mapInfo.view_cd]
	    				, yearList : mapInfo.year_list
	    			} ;
		return obj ; 
		 
	   }
	 
	    function fn_board2_3_init_chart_getData(queryYear){
			//읍면동 모드
	    	const obj = fn_setBoard2DataParam(queryYear);
	    	obj.viewCd = (mapInfo.view_cd=="sido")?"sido":"sgg";
	    	obj.regionCd = (mapInfo.view_cd=="sido")?obj.regionCd.substr(0,2):obj.regionCd.substr(0,5);
	    	obj.infoDiv = (mapInfo.view_cd=="sido")?"2":"3"; 
	    	
	    	$.ajax({
	            url : "/view/lvs/dataCensusIndexList" ,
	            data: JSON.stringify(obj),
	            dataType: "json",
	            contentType: "application/json; charset=UTF-8",            
	            type : "POST",
					success: function (res, status) {
				        const resultObj =fn_getCensusYearData(res,mapInfo.dataKind);
				        let chartData = { "title": $("#curStat").html(), "category": resultObj.category, "data": resultObj.data } ;// 변화그래프 탭 차트
				        fn_combiLineColumn('tab4_chart3', chartData) //  차트 아아디 + 데이터
					},
					complete : function(){
				    },
				});
	    }
	    
         ////////////////
	    function fn_board2_4_vrs_chart_getData(cd, div, rowNo, regionTitle){
	    	
			//읍면동 모드
	    	const obj = fn_setBoard2DataParam();
			obj["regionCd"] = cd ;
			obj["infoDiv"] = div ;
			
	    	$.ajax({
	            url : "/view/lvs/dataCensusIndexYearList" ,
	            data: JSON.stringify(obj),
	            dataType: "json",
	            contentType: "application/json; charset=UTF-8",            
	            type : "POST",
					success: function (res, status) {
						 const item = Object.assign({}, mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["yearDataUp"]);  // yearDataup
						 item.data = fn_data_downsize(item.data) ;
						 if (rowNo=="row1")
							 item.originTitle = (mapInfo.view_cd=="sgg")?$("#curSido").html()+" " +$("#curSido").html():$("#curSgg").html();
					     else if(rowNo=="row2")    
						    item.originTitle = (mapInfo.view_cd=="sgg")?$("#curSido").html():"전국";
						    
						    
						 item["vrsTitle"] = regionTitle ;
				         const vrsItem =fn_getCensusYearCmpData(res,mapInfo.dataKind);
				         vrsItem.data = fn_data_downsize(vrsItem.data) ;
				        
				        let chartId ="" ;
				        let tableId  ="" ;
				        
					     if(rowNo == "row1") { 
					         chartId = 'vrsChartId_row1';
					         tableId = 'vrs2TableId_row1';
					     } else if (rowNo == "row2") { 
					         chartId = 'vrsChartId_row2';
					         tableId = 'vrs2TableId_row2';
					     };
					     
					     
						 fn_board2_4_init_chart(chartId, item, vrsItem);
						 $("#"+tableId).html(fn_board2_4_init_table(vrsItem));
				        
					},
					complete : function(){
				    },
				});
	    }
	    
	 
	 
	 //doka
	 function fn_board2_3_init_chart(queryYear){
	        if(queryYear==undefined||queryYear==null) 
	        	queryYear= mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["base_year"];
	        
	        if (mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["subDiv"][queryYear]==null){
	        	fn_board2_3_init_chart_getData(queryYear);
	        	return ;
	        }
	        
	        const obj = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["subDiv"][queryYear];
	        const resultObj =fn_getCensusYearData(obj,mapInfo.dataKind);
	        
	        let chartData = { "title": $("#curStat").html(), "category": resultObj.category, "data": resultObj.data } ;// 변화그래프 탭 차트
	        fn_combiLineColumn('tab4_chart3', chartData) //  차트 아아디 + 데이터
	 }
	 
	 
	 function fn_board2_4(){
		 let extend_data_02_tab4_4 = extend_data_02_tab4_4_temp +""  ;		 
		 let item = {"adm_nm": $("#curSido").html()+" "+$("#curSgg").html()};

		 //let item = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][key];
		 extend_data_02_tab4_4 = fn_temp_replaceAll(extend_data_02_tab4_4, item) ;
		 $("#tab4_4").html(extend_data_02_tab4_4);
		 

	 }
	 
	 function fn_data_downsize(data){
		 let resultData = [];
		 for(let i=0; i<data.length; i++){
			 resultData[i] = parseInt(data[i]/1000);
		 }
		 return resultData;
	 }
	 
	 function fn_board2_4_init_top(){
		 const item = Object.assign({}, mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["yearData"]);
		 item.data = fn_data_downsize(item.data) ;
		 item.originTitle = (mapInfo.view_cd=="sgg")?$("#curSido").html()+" " +$("#curSgg").html():$("#curSido").html();
		 let vrsItem = [];
		 item.vrsTitle ="" ;		 
		 fn_board2_4_init_chart("vrsChartId_row1", item, vrsItem);
		 $("#vrsTableId_row1").html(fn_board2_4_init_table(item));
		 
         $(".row1Target").hide();
         $("#row1_vrs_on").hide();
         $("#row1_vrs_off").show();
		 
	 }
	 
	 function fn_board2_4_init_bottom(){
		 const item = Object.assign({}, mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["yearDataUp"]);  // yearDataup
		 item.data = fn_data_downsize(item.data) ;
		 item.originTitle = (mapInfo.view_cd=="sgg")?$("#curSido").html():"전국";		 
		 item.vrsTitle ="" ;
		 let vrsItem = [];
		 fn_board2_4_init_chart("vrsChartId_row2", item, vrsItem);
		 $("#vrsTableId_row2").html(fn_board2_4_init_table(item));

         $(".row2Target").hide();
         $("#row2_vrs_on").hide();
         $("#row2_vrs_off").show();
	 }
	 
	 function fn_board2_4_init_chart(id,item, vrsItem){
	            // 더미 데이터 생성

	            let vrsChart1Data = {"title":item.title,"category":item.category,
	                            "originTitle":item.originTitle,
	                            "vrsTitle": item.vrsTitle,
	                            "originData":item.data,
	                            'vrsData':vrsItem.data}; // 타 자자체 비교 탭 차트
	                            
	                                
	            fn_multiAxisLineColumn(id,vrsChart1Data)
	 }
	 
	 
	 function fn_board2_4_init_table(item){
		  let result ="";

		  for(let i=0; i<item.data.length; i++){
			  result = result + "<tr><td>"+item.category[i]+"</td><td>"+fn_numberFormat(item.data[i])+"</td></tr>\n";
		  }
		  return result;
	 }
	 
	 //합산 
	 function fn_tot_sum(obj){
		 let sum=0;
		 for(let i=0; i<obj.length; i++){
			 sum += obj[i];
		 }
		 return sum ;
	 }
	 
	 //세번째 모든 지표보기
	 function fn_init_board_type3(){
		 let dataKind =  mapInfo.dataKind ;
		 
	     const objInfo = Object.assign({}, mapInfo.data_kind_all[dataKind]);  // 깊은복사

	     if (mapInfo.view_cd=="sido")
	    	 objInfo["region_name"] = mapInfo.sido_nm;
	     else if (mapInfo.view_cd=="sgg")
	    	 objInfo["region_name"] = mapInfo.sido_nm + " " + mapInfo.sgg_nm;
	     else if (mapInfo.view_cd=="emdong")
	    	 objInfo["region_name"] = mapInfo.sido_nm + " " + mapInfo.sgg_nm + " " + mapInfo.emdong_nm;
	     
	     const objStat = mapInfoAllData[mapInfo.region_cd][dataKind];
	     
	     objInfo["tot_sum"] = fn_tot_sum(objStat.data);
	     objInfo["display_large"] = (mapInfo.boardSize=="large")?"block":"none" ;   //  큰창     
	     objInfo["display_small"] =(mapInfo.boardSize=="small")?"block":"none" ; ;   // 작은창
	     
			 
		 let extend_data_03 = extend_data_03_temp + "" ;
		 extend_data_03 = fn_temp_replaceAll(extend_data_03, objInfo);
		 
		 let exboardType = "" ;
		 
		 
		 if      (objInfo.type =="A") exboardType = extend_data_03_typeA_temp + "" ;
		 else if (objInfo.type =="B") { 
			 exboardType = extend_data_03_typeB_temp + "" ;
			 exboardType = exboardType.replaceAll("#yearlist#",fn_extend_data_03_typeB_yearlist(objStat));
		 }
		 else if (objInfo.type =="C") exboardType = extend_data_03_typeC_temp + "" ;		 
		 else if (objInfo.type =="D") exboardType = extend_data_03_typeD_temp + "" ;
		 
		 extend_data_03 = extend_data_03.replaceAll("#exboardType#", exboardType);
	     $(".extend_data_03").empty();
		 $(".extend_data_03").html(extend_data_03);
		 
		 fn_extend_data_03_init_chart(objInfo,objStat);
		 fn_tabComon_event_config("remove");		 
	 }
	 

	 //년도 표시아이콘 만들기
	 function fn_extend_data_03_typeB_yearlist(objStat){
		 if (!objStat.yearlist) return "<li></li>" ;
		 let temp = `<li #active# onclick="fn_board3_type2('#year#')" id="data_03_typeB_#year#">#year#</li>`;
		 let result = "";
		 
		 if (!objStat.curYear){
			 objStat.curYear =  objStat.yearlist[objStat.yearlist.length-1] ;			 
		 }
		 
		 for(let i=0; i<objStat.yearlist.length; i++){
			 let temp1 = temp + "" ;
			 let activeTxt = (objStat.yearlist[i]==objStat.curYear)?` class="active" `:""; 
			 const obj = {year:objStat.yearlist[i], active:activeTxt};
			 result = result + fn_temp_replaceAll(temp1,obj);
		 }

		 return result;
	 }
	 
	 
	 //데이터를 다시 가져와서, 색지도 그리고, 오른쪽 보드 다시 그린다.
	 function fn_board3_type2(year){
		 fn_get_board3_data(mapInfo.dataKind,year);
	 }
	 
	 
	 //테이블 높이 재조정
	 function fn_extend_data_03_bType_init_height_calc(){
         let type = "bType"
         let parentTarget = $(".extend_data_03 .main .main_wrap");
         let conatinerHeight = $(parentTarget).height() - $(parentTarget).children('.headerWrap').outerHeight() - $(parentTarget).children('.text').outerHeight() - 15  // padding 15    
         let sectionType = $('.main_wrap').find('.' + type); // sectionHeight
         let headerHeight = $(sectionType).children('.section.chartArea').find('.accHeader').eq(0).outerHeight(true);
         let tabHeight = $(sectionType).children('.section.chartArea').find('.tabCommon').eq(0).outerHeight(true);
         let yearHeight = $(sectionType).children('.section.year').outerHeight(true);
         let chartType = $(".exboardType." + type).find('.chart_wrap')
         let tableType = $(".exboardType." + type).find('.table_wrap')

         let chartHeight = 0;

         if (type == 'aType') chartHeight = conatinerHeight - headerHeight - 10 // padding
         else if (type == 'bType' || type == 'cType') chartHeight = conatinerHeight - headerHeight - tabHeight - yearHeight - 30 // margin
         else if (type == 'dType') chartHeight = conatinerHeight - headerHeight - tabHeight - 20 // padding
         console.log("conatinerHeight", conatinerHeight)
         $(".exboardType." + type).css('height', conatinerHeight)
         chartType.css('height', chartHeight)
         tableType.css('height', chartHeight)
	 }
	 
	 function fn_replace_focus_dong(tmepObj){
		 let num = -1 ;
		 for(i=0; i<tmepObj.category.length; i++){
			 if(tmepObj.category[i]==mapInfo.emdong_nm){
				 num =i ;
				 break ;
			 }
		 }
		 return num ;
	 }
	 

	 function fn_extend_data_03_init_chart(objInfo, objStat){
		// 컬럼+라인 더미데이터
		 //깊은복사
     	 
		 if (objInfo.type=="A") {
		   fn_columnLineLarge('chartAId',objStat) // chartId , data
		 } else if (objInfo.type=="B") {
	        $("#chartBId").css('height', objStat.length * 25); // 행 갯수에 따라 높이 조절 (고정폭 25 * 데이터 길이)
	        
		    const objStat2 = Object.assign({}, objStat);  // 깊은복사

	        if(mapInfo.view_cd=="emdong"){
	        	let num = fn_replace_focus_dong(objStat2);   // 바 차트
			    const copyData = objStat2.data.slice();
	        	if (num>=0){
	        		const obj ={y:objStat2.data[num]+0, color:'red'};
	        		copyData[num] =obj ;
	        	}
		        objStat2.data = copyData.slice();	        	
	        }
	        
	        fn_barLarge('chartBId',objStat2);   // 바 차트	        
	        
		    fn_makeEx3BoardTable1('bType_table',objStat.tableData); // 바 차트 테이블	        

	        fn_extend_data_03_bType_init_height_calc();
	        
		 } else if (objInfo.type=="C") {
		        $("#cType_chart1").css('height', objStat.length * 25) // 행 갯수에 따라 높이 조절 (고정폭 25 * 데이터 길이)
		        $("#cType_chart2").css('height', objStat.length * 25) // 행 갯수에 따라 높이 조절 (고정폭 25 * 데이터 길이)
		        
		        fn_barLarge('cType_chart1',objStat)   // 바 차트 
		        fn_makeEx3BoardTable1('cType_table1', objStat.table_data) // 바 차트 테이블
		        fn_solidgauge('cType_chart2',objStat.table_data2)  // 서클 게이지 차트 
		        fn_makeEx3BoardTable2('cType_table2', objStat.table_data2) // 서클 게이지 테이블
		 } else if (objInfo.type=="D") {
		        $("#dType_chart").css('height', objStat.length * 25) // 행 갯수에 따라 높이 조절 (고정폭 25 * 데이터 길이)
		        
		        fn_barLarge('dType_chart',objStat)   // 바 차트 
		        fn_makeEx3BoardTable1('dType_table', objStat.table_data) // 바 차트 테이블
		        
		 }
		 
	 }
	 //테이블그리기 
	 function fn_makeEx3BoardTable1(id,data){
		 let html_temp = `<tr>
			 			<td #style#>#adm_nm#</td>
			 			<td #style#>#region_cd#</td>
			 			<td #style#>#rnk#</td>
			 			<td #style#>||val||</td>
			 			<td #style#>#rt#</td>
			 		  </tr>`;
		 
		    let result = "" ;
		    data.forEach(function(obj) {
		        let html =  html_temp + "" ;
		        if (mapInfo.view_cd =="emdong" && mapInfo.emdong_nm == obj.adm_nm) {
		        	obj.style = ` style="background-color:yellow;" `; 	
		        } else {
		        	obj.style = "" ;
		        }
		        html = fn_temp_replaceAll(html_temp,obj);
		        result = result + html ;
		    });
	        $("#"+id).append(result) ;
		}
	 
	// 전체지표 상위지역비교 데이터 보기 테이블 생성
	 function fn_makeEx3BoardTable2(id,data) {
	     data.forEach(function(element){
	         let html = "";
	         html += '<tr>'
	         html += '<td>'+element.title+'</td>'
	         html += '<td>'+element.data+'</td>'
	         html += '</tr>'
	         $("#"+id).append(html)
	     });
	 }	 
	 
	 
	 /**
	  * 추천지표 타 지자체 비교 비교지역 추가 버튼 클릭 이벤트
	  * @param {element} obj 클릭 대상 엘리먼트
	  * @returns 지역 이름
	  */
	  
	 function fn_openVrsRegionPopup(obj) {
		 fn_makeSelect("board2_sido_select", mapInfo.sidoObj, mapInfo.sido_cd, "<option selected='selected' disabled >시/도</option>" );
		 fn_makeSelect("board2_sgg_select", mapInfo.sggObj, "", "<option selected='selected' value='0'>시/군/구</option>" );
		 

	     $("#vrsRegionElement").val($(obj).data('target'))
	     $("#vrsRegionNmElement").val($(obj).data('admnm'))	     
	     
	     $(".vrsRegionPopup").show();
	     $(".vrsRegionPopup").css('left',event.layerX)
	     $(".vrsRegionPopup").css('top',event.layerY)

	 }

	 // 비교지역선택 팝업 닫기
	 function fn_selectVrsRegionPopupClose() {
	     $(".vrsRegionPopup").hide();
	 }
	 
	 // 비교지역 선택하여 차트 및 테이블 그리기
	 function fn_vrsRegionPopupSelect() {
	     $(".vrsRegionPopup").hide();
	     let targetValue = $("#vrsRegionElement").val();   //row1 or row2
	     let targetNm =  $("#vrsRegionNmElement").val();   //row1 or row2

	     let nameLevel1 = $('select[name=level1] option:selected').text();  // 시도 네임
	     let nameLevel2 = $('select[name=level2] option:selected').text();  // 시군구 네임
	     let nameLevel3 = $('select[name=level3] option:selected').text();  // 읍면동 네임
	     
	     let cd1 = $('select[name=level1] option:selected').val();  // 시도 네임
	     let cd2 = $('select[name=level2] option:selected').val();  // 시군구 네임
	     let cd3 = $('select[name=level3] option:selected').val();  // 읍면동 네임
	     
	     
	     if(nameLevel1 == "시/도") nameLevel1 = "";
	     if(nameLevel2 == "시/군/구") nameLevel2 = "";
	     if(nameLevel3 == "읍/면/동") nameLevel3 = "";
	     
	     if(nameLevel1 == "") {
	         alert("지역을 선택해주세요.") 
	         return false;
	     }
	     
	     let infoDiv ="1" ;
	     let selectRegionName = nameLevel1;
	     let cd = cd1 ;
	     
	     if(nameLevel2 !="" && nameLevel3 == ""){
	    	 infoDiv ="2";
	         selectRegionName = nameLevel1+ " " + nameLevel2;
	         cd = cd2 ;
	     }
	     
	     if(nameLevel2!="" && nameLevel3 != ""){
	    	 infoDiv ="3";
	    	 selectRegionName = nameLevel1 + " " + nameLevel2+ " " +nameLevel3;
	    	 cd = cd3 ;
	     }
	     

	     
	     if(targetValue == "row1") {
	         $(".row1Target").css('display','flex');;
	         $(".row1Target").children('.regionName').html(selectRegionName)
	         $("#row1_vrs_off").hide();
	         $("#row1_vrs_on").show();
	     } else if (targetValue == "row2") {
	         $(".row2Target").css('display','flex');;
	         $(".row2Target").children('.regionName').html(selectRegionName)
	         $("#row2_vrs_off").hide();
	         $("#row2_vrs_on").show();
	     }  
	     
	     $(".vrsRegionPopup").hide();	     
	     fn_board2_4_vrs_chart_getData(cd,infoDiv,targetValue,selectRegionName);
	 }
	 
	 /**
	  * 추천지표 타 지자체 비교 비교지역 삭제
	  * @param {string} row 대상 구분 파라미터
	  */
	 function fn_vrsRegionDelete(row) {
	    let chartId; 
	    if(row == "row1") {
	        $(".row1Target").hide();
	        $("#row1_vrs_on").hide();
	        $("#row1_vrs_off").show();
	         chartId = "vrsChartId_row1";

	    } else if (row == "row2") {
	        $(".row2Target").hide();
	        $("#row2_vrs_on").hide();
	        $("#row2_vrs_off").show();
	         chartId = "vrsChartId_row2";
	    }

	     $("#"+chartId).highcharts().series[1].setData();
	     $("#"+chartId).highcharts().series[1].name = ""
	 }
	 
	 
	 function fn_changeLocation(mode){
		    fn_getSggInfo($("#sido_select option:selected").val(), 'all');
	 }
	 
	 function fn_changeLocation_board2(mode){
		 if (mode=="sido")  //시도정보가 변경되면
		    fn_getSggInfo($("#board2_sido_select option:selected").val(), 'board2_sub');
		 else if (mode=="sgg") //시군구정보가 변경되면
		    fn_getEmdongInfo($("#board2_sgg_select option:selected").val(), 'board2_sub');
	 }
	 
	 
	 
	 
	 function selectViewMode(mode){
		 var obj = null ;
		 var seekCode = "" ;
		 
		 $('.subCounty').hide();
		 
		 
		 if(mode==1) {
			 $('.province').addClass('active');  // 시도
			 $('.county').removeClass('active');  //시군구
			 $('.subCounty').removeClass('active');  //읍면동
			 obj = mapInfo.sidoObj;
			 mapInfo.view_cd = "sido";
			 mapInfo.region_cd = mapInfo.sido_cd ;			 
			 mapInfo.emdong_cd = "" ;			 
		 } else if (mode==2) {
			 $('.province').removeClass('active');
			 $('.county').addClass('active');			 
			 $('.subCounty').removeClass('active');
			 mapInfo.view_cd = 'sgg';
			 obj = mapInfo.sggObj;		
			 mapInfo.region_cd = mapInfo.sido_cd + mapInfo.sgg_cd ;
			 mapInfo.emdong_cd = "";
			 $("#sgg_select").val(mapInfo.region_cd).prop("selected", true); //값이  시군구 선택
		 } else if (mode==3) {
			 $('.province').removeClass('active');
			 $('.county').removeClass('active');			 
			 $('.subCounty').addClass('active');
			 $('.subCounty').show();
			 mapInfo.view_cd = 'emdong';			 
			 obj = mapInfo.sggObj;		
			 mapInfo.region_cd = mapInfo.sgg_cd ;
		 }
		 
		 for(let i=0; i< obj.length; i++){
			 if (obj[i].cd == mapInfo.region_cd ){
				 mapInfo.x =  obj[i].x_coor ;
				 mapInfo.y =  obj[i].y_coor ;
	 	  	     mapInfo.x2 = parseFloat(parseFloat(mapInfo.x) )  ;
	  	  	     mapInfo.y2 = parseFloat(parseFloat(mapInfo.y) )  ;
			 }
		 }
		 
		 $("#btn_close").trigger("click");
		 
		   //일단경계를 지운다.
	     fn_setFixedMapView(mapLocationInfo[mapInfo.region_cd]);   // 맵의크기 위치값을 보정한다
	     
	     if      (mapInfo.boardType=="board1") fn_board1_fullData(); // 경계 다시 그리기
	     else if (mapInfo.boardType=="board2") fn_board2_fullData(); // 경계 다시 그리기
	     else if (mapInfo.boardType=="board3") fn_board3_fullData(); // 경계 다시 그리기
		 
	 }
	 
	 
	 // board타입에 따른 분기
	 function fn_redrawMap(){
		 //선택된 시도/시군구 여부에 따라 x, y좌표를 알아온다.
		 if ($("#sgg_select option:selected").val()=="0"){
			 alert("시군구를 선택해주세요");
			 return ;
		 }
		 
		 mapInfo.sido_cd = $("#sido_select option:selected").val() ;
		 mapInfo.sgg_cd = $("#sgg_select option:selected").val().substr(-3) ;
		 mapInfo.sido_nm = $("#sido_select option:checked").text() ; 
		 mapInfo.sgg_nm = $("#sgg_select option:checked").text() ;
		 
		 mapInfo.view_cd = "sgg";

		 selectViewMode(2);
		 $("#curSido").html(mapInfo.sido_nm);
		 $("#curSgg").html(mapInfo.sgg_nm);		 
		 $('#btn_close').trigger("click");
	 }
	 
	 
	 function getToken(){
		 //https://sgisapi.kostat.go.kr
		 //openApiPath

			$.ajax({
	              url : openApiPath + "/OpenAPI3/auth/authentication.json" +
	              		"?consumer_key="+mapInfo.consumer_key+"&consumer_secret="+mapInfo.consumer_secret,
	              type : "get",
					success: function (res, status) {
						mapInfo.accessToken = res.result.accessToken;

					},
					complete : function(){
						getReverseGeo();
				    },
					
				});
	 }

	 
	 
	 function getReverseGeo(){
		 if (mapInfo.accessToken ==null || accessToken == null){
			 alert("토큰 정보가 없습니다. ");
			 return ;
		 }
		 
		 if (mapInfo.accessToken ==null ){
			 mapInfo.accessToken = accessToken ;
		 }
		 
		 
		 var url_str = openApiPath + "/OpenAPI3/addr/rgeocode.json?accessToken="+mapInfo.accessToken+"&x_coor="+mapInfo.x+"&y_coor="+mapInfo.y+"&addr_type=20" ;
	 
			$.ajax({
  	              url : url_str ,	              				
	              type : "get",
					success: function (res, status) {
						if (res.errMsg !="Success") {
							alert('주소데이터 조회 실패입니다. 잠시후에 시도해주세요');
							return ;
						}
						mapInfo.addrObj = res.result[0] ;
						mapInfo.sido_cd = mapInfo.addrObj.sido_cd ;
						mapInfo.sido_nm = mapInfo.addrObj.sido_nm ;
						mapInfo.sgg_cd = mapInfo.addrObj.sgg_cd ;
						mapInfo.sgg_nm = mapInfo.addrObj.sgg_nm ;
						mapInfo.emdong_cd = mapInfo.addrObj.emdong_cd ;
						mapInfo.emdong_nm = mapInfo.addrObj.emdong_nm ;
						
						
						if (mapInfo.view_cd=="sido")
						    mapInfo.region_cd  = mapInfo.sido_cd ;
						else if (mapInfo.view_cd=="sgg")
						    mapInfo.region_cd  = mapInfo.sido_cd + mapInfo.sgg_cd ;
						else if (mapInfo.view_cd=="emdong")
						    mapInfo.region_cd  = mapInfo.sido_cd + mapInfo.sgg_cd + mapInfo.emdong_cd;						
						
						$("#curSido").html(mapInfo.sido_nm);
						$("#curSgg").html(mapInfo.sgg_nm);
						$("#curEmd").html("");						
						
						fn_setFixedMapView(mapLocationInfo[mapInfo.region_cd]);   // 맵의크기 위치값을 보정한다 
				   		
						fn_getSidoInfo();   // 
						//getArea();  //지도그리기
						fn_board1_fullData();   //전체데이터가져오기						
 
					},
					complete : function(){
				    },
				});
	 }
	 
	 function fn_setFixedMapView(objXY){
		 let x2,y2,level ;
		 if (objXY != undefined) {
			 x = objXY['x2'];
			 y = objXY['y2'];
			 mapInfo.level = objXY['level']; 
		 } else {
			 //좌우크기를 감안, 해상도를 감안해서  위치 및 레벨을 조정한다.
			 x =  mapInfo.x ;
			 y =  mapInfo.y ;
			 
			 if (mapInfo.view_cd=="sido")
				 mapInfo.level = 4 ;
			 else 
				 mapInfo.level = 5 ;
		 }
		 
	     mapInfo.map.setView(sop.utmk(x, y), mapInfo.level);		 
	 }
	 
	 function displayAddrInfo(){
			if (mapInfo.view_cd =="sido") { 
				fn_makeSelect("sgg_select", mapInfo.sggObj, "0", "<option selected='selected' value='0'>시/군/구</option>" );
			} else if(mapInfo.view_cd =="sgg") {
				$("#myFullAddr").html(mapInfo.addrObj.sido_nm + " " + mapInfo.addrObj.sgg_nm);
				fn_makeSelect("sgg_select", mapInfo.sggObj, mapInfo.region_cd, "<option selected='selected' value='0'>시/군/구</option>" );				
			}
			else if(mapInfo.view_cd =="emdong")  $("#myFullAddr").html(mapInfo.addrObj.full_addr);

	 }
	 
	 function fn_getSidoInfo(){
			$.ajax({
	              url : openApiPath + "/OpenAPI3/addr/stage.json?accessToken="+mapInfo.accessToken,	              				
	              type : "get",
					success: function (res, status) {
						if (res.errMsg !="Success") {
							alert('시도 정보 데이터 조회 실패입니다. 잠시후에 시도해주세요');
							return ;
						}
						
						mapInfo.sidoObj = res.result ;
						fn_makeSelect("sido_select",mapInfo.sidoObj, mapInfo.addrObj.sido_cd, "<option selected='selected' disabled >시/도</option>" );
						fn_getSggInfo(mapInfo.addrObj.sido_cd,'all');						
					},
					complete : function(){
				    },
				});
	 }
	 
	 function fn_getSggInfo(cd, mode){
			$.ajax({
	              url :  openApiPath + "/OpenAPI3/addr/stage.json?accessToken="+mapInfo.accessToken+"&cd="+cd,	              				
	              type : "get",
					success: function (res, status) {
						if (res.errMsg !="Success") {
							alert('시군구 정보 데이터 조회 실패입니다. 잠시후에 시도해주세요');
							return ;
						}
						mapInfo.sggObj = res.result ;						
						if (mode=="all") {   //메인 주소창 변경
							mapInfo.sggObj = res.result ;							
						} else if (mode=="board2_sub") {  //타지자체 비교하는 주소창 변경
							mapInfo.board2_sggObj = res.result ;
							mapInfo.board2_emdongObj = {};
						}
						
						displaySggCombo(mode);
						
					},
					complete : function(){
				    },
				});
	 }
	 
	 function fn_getEmdongInfo(cd, mode){
			$.ajax({
	              url :  openApiPath + "/OpenAPI3/addr/stage.json?accessToken="+mapInfo.accessToken+"&cd="+cd,	              				
	              type : "get",
					success: function (res, status) {
						if (res.errMsg !="Success") {
							alert('시군구 정보 데이터 조회 실패입니다. 잠시후에 시도해주세요');
							return ;
						}
						
						if (mode=="board2_sub") {
							mapInfo.board2_emdongObj = res.result ;
						}
						
						displayEmdongCombo(mode);
						
					},
					complete : function(){
				    },
				});
	 }
	 
	 
     //
	 function displaySggCombo(mode){
		   if (mode=="all") {
			  fn_makeSelect("sgg_select", mapInfo.sggObj, mapInfo.sgg_cd, "<option selected='selected' value='0'>시/군/구</option>" );
		   }  else if(mode=="board2_sub") {
			  fn_makeSelect("board2_sgg_select", mapInfo.board2_sggObj, '', "<option selected='selected' value='0'>시/군/구</option>" );
			  fn_makeSelect("board2_emdong_select", {},'', "<option selected='selected' value='0'>읍/면/동</option>" );			  
		   }
	 }
     
     //
	 function displayEmdongCombo(mode){
		 if(mode=="board2_sub") {
			  fn_makeSelect("board2_emdong_select",mapInfo.board2_emdongObj,'', "<option selected='selected' value='0'>읍/면/동</option>" );
		 }
	 }
	 
	 function fn_makeSelect(id,obj,curValue,preOption){
		 $("#"+id).empty();
	     $("#"+id).append(preOption);
         for (var i=0; i<obj.length; i++ ) {
        	 let selected = "" ;
        	 if (obj[i].cd == curValue) selected = " selected " ;
	         $("#"+id).append("<option value='"+obj[i].cd+"' "+selected+">" + obj[i].addr_name+"</option>");
	      }			
	 }
	 
	 
	 //현재 영역선택
	 function fn_selectDong1(cd, nm) {
 		 if   (mapInfo.view_cd=="sido") {
			 mapInfo.sgg_cd = cd.substr(-3) ;
			 $("#curSgg").html(nm);			 
			 selectViewMode(2);
		 } else  {
			 mapInfo.view_cd="emdong";
			 mapInfo.emdong_cd = cd ;
			 $("#curEmd").html(nm);
			 fn_dongReDisplay();
		 } 
	 }
	 
	 //보드 현재 영역선택
	 function fn_selectDong2(cd, nm) {
 		 if   (mapInfo.view_cd=="sido") {
			 mapInfo.sgg_cd = cd.substr(-3) ;
			 $("#curSgg").html(nm);			 
			 selectViewMode(2);
		 } else  {
			 mapInfo.view_cd="emdong";
			 mapInfo.emdong_cd = cd ;
			 $("#curEmd").html(nm);
			 fn_dongReDisplay();   
		 } 
	 }
	 
	 //현재 영역선택
	 function fn_selectDong3(cd, nm) {
 		 if   (mapInfo.view_cd=="sido") {
			 mapInfo.sgg_cd = cd.substr(-3) ;
			 $("#curSgg").html(nm);			 
			 selectViewMode(2);
		 } else  {
			 mapInfo.view_cd="emdong";
			 mapInfo.emdong_cd = cd ;
			 mapInfo.emdong_nm = nm ;
			 $("#curEmd").html(nm);
			 $('.province').removeClass('active');
			 $('.county').removeClass('active');			 
			 $('.subCounty').addClass('active');
			 $('.subCounty').show();
			 obj = mapInfo.sggObj;		
			 fn_setDataForLayer3(mapInfo.dataKind);  //색지도 표시				
			 fn_init_board_type3();  //보드표시
		 } 
	 }
	 
	 function fn_dongReDisplay(){
		 $('.province').removeClass('active');
		 $('.county').removeClass('active');			 
		 $('.subCounty').addClass('active');
		 $('.subCounty').show();
		 mapInfo.view_cd = 'sgg';			 
		 obj = mapInfo.sggObj;		
		 fn_getStatistic() ;
	 }
	 
	 //통계올리기
	 function fn_getStatistic(){
		if  (mapInfo.boardType=="board1") {
			fn_setDataForLayer1(mapInfo.dataKind);
		} else if (mapInfo.boardType=="board2") {
			fn_setDataForLayer2(mapInfo.dataKind);
		} else if (mapInfo.boardType=="board3") {
			fn_get_board3_data(mapInfo.dataKind,""); //데이터가져오고 맵그리고, 데이터보드 처리하고			
		} 
	 }
	 
	 function fn_number_format(str){
		 return str.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
	 }

	 //경계를 지우고 다시 경계를 그린다.
	 function fn_reset_areaLayer(){
		//경계는 있으면 지운다. 
		if (mapInfo.sopArea) {
			mapInfo.sopArea.remove();
	 	    mapInfo.sopArea = null;
	 	    mapInfo.sopArea = undefined ;
		}
			
     	mapInfo.sopArea = sop.geoJson(mapInfo.oriArea).addTo(mapInfo.map);
	 }
	 
	 function fn_setDataForLayer1(dataKind){
			//let target = mapInfoData[mapInfo.region_cd]["censusIndex"] ;

			
			let conComplite = {} ;
			let key, value, strToolTip;
			let dataKindNm = mapInfoData[mapInfo.region_cd][mapInfo.dataKind]["name"] ;
			
			
			
			//경계를 다시 그린다.
			fn_reset_areaLayer() ;
			//경계에 대한 데이터가 없으면 색지도를 그리지 않는다.
			if (mapInfoData[mapInfo.region_cd][mapInfo.dataKind]["subDiv"] == null) 
				return ;  
			
			
			let target = mapInfoData[mapInfo.region_cd][mapInfo.dataKind]["subDiv"] ;
			
			for (var idx=0; idx<target.length; idx++) {
				conComplite[target[idx].region_cd] = target[idx];     
			}
			
			var objectList = new Array();
			
			mapInfo.sopArea.eachLayer(function (layer) {
				key = layer.feature.properties.adm_cd;
				value = conComplite[key];

				if (!value) { return; }
				
				let cd = value.region_cd + "" ;//값으로 전달
				let nm = value.adm_nm + "" ;  //값으로 전달				
				
				strToolTip = "<p>지역(구)명 : " + value.adm_nm + "("+cd+")</p>";
				strToolTip += "<p>"+ dataKindNm + " : " + fn_number_format(value[dataKind]) + "</p>";
				
				layer.bindToolTip(strToolTip);
				
				layer.on("click",function(e){fn_selectDong1(cd, nm);});
				let  rNUm =  fn_number_format(value[dataKind]) ;
				
				if (mapInfo.mode=="show") 
					layer.setCaption({title:rNUm, color:"black"});
				
				var object = new Object();
				object.value = value[dataKind];
				object.admCd = key;
				objectList.push(object);
			});
			
			//var legend = calculateLegend(objectList);
			var legend = fn_calLegend(objectList);						
			fn_areaFillColor(objectList,legend);
	 }
	 
	 
	 function fn_setDataForLayer2(){
		 
			//경계를 다시 그린다.
			fn_reset_areaLayer() ;
			//경계에 대한 데이터가 없으면 색지도를 그리지 않는다.
			if(mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]==null) return ;
			let base_year = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["base_year"];
			
			if (mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["subDiv"][base_year]== null) 
				return ;  
			
			let dataKind = mapInfo.dataKind ;
		   
			let target = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["subDiv"][base_year] ;  // todo
			let conComplite = {} ;
			let key, value, strToolTip;
			let dataKindNm = mapInfoRecData[mapInfo.region_cd][mapInfo.board2Kind][mapInfo.dataKind]["name"] ;
			
			for (var idx=0; idx<target.length; idx++) {
				conComplite[target[idx].region_cd] = target[idx];     
			}
			
			var objectList = new Array();
			
			mapInfo.sopArea.eachLayer(function (layer) {
				key = layer.feature.properties.adm_cd;
				value = conComplite[key];

				if (!value) { return; }
				
				strToolTip = "<p>지역(구)명 : " + value.adm_nm + "</p>";
				strToolTip += "<p>"+ dataKindNm + " : " + fn_number_format(value[dataKind]) + "</p>";
				
				layer.bindToolTip(strToolTip);
				let cd = value.region_cd + "" ;//값으로 전달
				let nm = value.adm_nm + "" ;  //값으로 전달				
				
				layer.on("click",function(e){fn_selectDong2(cd, nm);});
				let  rNUm =  fn_number_format(value[dataKind]) ;
				
				if (mapInfo.mode=="show") 
					layer.setCaption({title:rNUm, color:"black"});
				
				var object = new Object();
				object.value = value[dataKind];
				object.admCd = key;
				objectList.push(object);
			});
			
			//var legend = calculateLegend(objectList);
			var legend = fn_calLegend(objectList);						
			fn_areaFillColor(objectList,legend);					 
		 
	 }
	 
	 function fn_setDataForLayer3(){
			//경계를 다시 그린다.
			fn_reset_areaLayer() ;
			//경계에 대한 데이터가 없으면 색지도를 그리지 않는다.
			
            if(mapInfoAllData[mapInfo.region_cd] == null) return ;
			if(mapInfoAllData[mapInfo.region_cd][mapInfo.dataKind]==null) return ;
			if(mapInfoAllData[mapInfo.region_cd][mapInfo.dataKind]["subDiv"]== null) return ;
			
				  
			let dataKind = mapInfo.dataKind ;
			let target = mapInfoAllData[mapInfo.region_cd][mapInfo.dataKind]["subDiv"] ;  // todo
			let conComplite = {} ;
			let key, value, strToolTip;
			let dataKindNm = mapInfoAllData[mapInfo.region_cd][mapInfo.dataKind]["title"] ;
			
			for (var idx=0; idx<target.length; idx++) {
				let tempKey = target[idx].region_cd ;
				conComplite[tempKey] = target[idx];
			}
			
			var objectList = new Array();
			
			mapInfo.sopArea.eachLayer(function (layer) {
				key = layer.feature.properties.adm_cd;
				value = conComplite[key];

				if (!value) { return; }
				
				
				strToolTip = "<p>지역(구)명 : " + value.adm_nm + "</p>";
				strToolTip += "<p>"+ dataKindNm + " : " + fn_number_format(value["val"]) + "</p>";
				
				layer.bindToolTip(strToolTip);
				let cd = value.region_cd + "" ;//값으로 전달
				let nm = value.adm_nm + "" ;  //값으로 전달				
				
				layer.on("click",function(e){fn_selectDong3(cd, nm);});
				let  rNUm =  fn_number_format(value["val"]) ;
				
				if (mapInfo.mode=="show") 
					layer.setCaption({title:rNUm, color:"black"});
				
				var object = new Object();
				object.value = value["val"];
				object.admCd = key;
				objectList.push(object);
			});
			
			//var legend = calculateLegend(objectList);
			var legend = fn_calLegend(objectList);						
			fn_areaFillColor(objectList,legend);					 
		 
	 }
	 
	 
	 
	 
	 
	function fn_calLegend(objectList){
		var minVal = -999;
		var maxVal = -999;
		var arithmeticVal = 0.00 ;
		var arData = [] ;
		
		if(objectList == null || objectList.length == 0){
			return arData;
		}
		
		for(var i=0; i<objectList.length; i++){
			if (minVal== -999 || objectList[i].value < minVal)
			    minVal  = parseFloat(parseFloat(objectList[i].value).toFixed(2));				
			
			if (maxVal== -999 || objectList[i].value >= maxVal)
			    maxVal  = parseFloat(parseFloat(objectList[i].value).toFixed(2));
		}
		
		arithmeticVal = parseFloat(parseFloat((maxVal + minVal)/7).toFixed(2));
		
		arData[0] = minVal ;
		arData[6] = maxVal ;
		
		for(var i=1; i<=5; i++){
			arData[i] = parseFloat(parseFloat(i*arithmeticVal+minVal).toFixed(2));
		}
		return arData ;
	}
	 
		
	function fn_areaFillColor(objectList,legend){
			
			mapInfo.sopArea.eachLayer(function (layer) {
				var admCd = layer.feature.properties.adm_cd;
				
				for(var i =0; i < objectList.length; i++){
					if(objectList[i].admCd == admCd){
						var pos = -1 ;
						
						if(objectList[i].value <=legend[0]){
							pos = 0 ;
						} 
						
						if(objectList[i].value >=legend[legend.length-1]){
							pos = legend.length-1 ;
						} 
						
						for(var j=0; j<legend.length-1; j++){
							if(objectList[i].value  < legend[j+1] ){
								pos = j ;
								break;
							}
						}
						
						var  weight_val = 1 ;
						if (admCd == mapInfo.emdong_cd) weight_val = 5 ;
 
						let opactiy = (1+pos)* 0.125 ;
						layer.setStyle({
							weight : weight_val,
							color : mapInfo.borderColor[mapInfo.borderColor.length-1],
							fillColor : mapInfo.legendColor[mapInfo.legendColor.length-1],
							fillOpacity : opactiy,    //투명도
						});
					}
				}
			});
		}
		
	 function map_area_clear(){
		if (mapInfo.sopArea) {
			mapInfo.sopArea.remove();
		}
		
	 }
	 
	 // dokadoka
	 function  fn_hichart_option(){
		    Highcharts.setOptions({

		        chart: {style: {fontFamily: 'Pretendard'}},
		        title: {text: ''},
		        subtitle: {text: ''},
		        yAxis: {
		            title: {text: ''},
		            labels: {enabled : false},
		        },
		        credits: {enabled: false},
		        exporting : {enabled : false},
		        xAxis: {
		            labels: {
		                style: {
		                    color: '#666',
		                    fontSize:'10px',
		                    fontWeight: '400',
		                    letterSpacing: '-1px',
		                }
		            },
		            categories: ["",""]
		        },
		        legend: {
		            layout: "horizontal",
		            verticalAlign: "bottom",
		            align: "center",
		            // itemWidth: 200,
		            symbolWidth: 8,
		            symbolHight: 8,
		            floating: false,
		            borderWidth: 0,
		            backgroundColor: "#FFFFFF",
		            shadow: false,
		            itemStyle: {
		                color: "#333",
		                align: "center"
		            }
		        },
		        plotOptions: {
		            series: {
		                marker: {
		                    enabled: true, //마커 보이기 / 안보이기 [true : 보이기, false : 안보이기]
		                },
		                dataLabels: {
		                    enabled: true, //데이터레이블 보이기/안보이기 [true : 보이기, false : 안보이기]
		                    allowOverlap: true //데이터레이블 겹치기/안겹치기 (안겹치기시 겹치는 데이터레이블 안보임) [true : 겹치다, false : 안겹치다]
		                }
		            }
		        }
		    }) ;
	 }
	 
	 function  fn_tabContent2_chart(statData){
		 Highcharts.chart('tab_content2_chart', {
			    chart : {
			        height : '175px',
			        marginTop: 10,
			        marginBottom:25
			    },
			    legend: {enabled:false},
			    plotOptions: {series: {dataLabels: {enabled:false}}},
			    xAxis:{
			            categories:statData['year'] 
			    },
			    yAxis:{visible:false},
			    
			    series: [{
			                type:'column',
			                name: statData['title1'],
			                data: statData['title1_data'],
			                color: mapInfo.colorPl[0]  },
			            {
			                type:'column',
			                name: statData['title2'],
			                data: statData['title2_data'],
			                color: mapInfo.colorPl[1]},
			            {
			                type: 'spline',
			                name: '합계',
			                data: statData['tot_data'],
			                color: mapInfo.colorPl[2],
			                marker: {
			                    lineWidth: 2,
			                    lineColor: mapInfo.colorPl[2],
			                    fillColor: 'white'
			                }
			            }
			        ]
			});
	   }
	 
	 function  fn_tabContent2_single_chart(statData){
		 Highcharts.chart('tab_content2_chart', {
			    chart : {
			        height : '175px',
			        marginTop: 10,
			        marginBottom:25
			    },
			    legend: {enabled:false},
			    plotOptions: {series: {dataLabels: {enabled:false}}},
			    xAxis:{
			            categories:statData['year'] 
			    },
			    yAxis:{visible:false},
			    
			    series: [
			    	
			            {
			                type: 'spline',
			                name: '합계',
			                data: statData['tot_data'],
			                color: mapInfo.colorPl[2],
			                marker: {
			                    lineWidth: 2,
			                    lineColor: mapInfo.colorPl[2],
			                    fillColor: 'white'
			                }
			            }
			        ]
			});
	   }
	 
	 /**
	  * 데이터 확장보드 컨트롤러
	  * @param {Element} obj this 
	  * @param {string} type type1: 우리동네 상황판, type2: 테마별 추천지표, type3: 테마별 모든지표
	  * @param {string} target 하위 지표 선택 파라미터 
	  */
	  
	 function fn_boardController(obj, type,target,board2Kind) {
			 if(!board2Kind) board2Kind = "ppltn_fmly";
			 
			 mapInfo.board2Kind = board2Kind ;
			 
			 
	         let boardTitle = "데이터보드";
	         let sub = $(obj).data('link') // sub1 추천지표, sub2 모든지표 보기
	         

	         $(".extendBoard").hide(); 
	         
	         // 추천지표 테마 가져오기
	         if(!target) {
	             $("#tabIndicator").children('li').each(function(i, item) {
	                 if($(item).hasClass('active')) target = $(item).data('link')
	             })
	         }

	         if(type == 'type1') { 
	             boardTitle = "우리동네 상황판";
	             $(".extend_data_01").show();
	             $(".data_player").show();
	             $(".tab_content3").hide();
	             mapInfo.boardType = 'board1' ;
			     mapInfo.dataKind = mapInfo.data_kind[mapInfo.view_cd][0];	             
	         } else if (type == "type2") {
	             // 테마별 지표 
	             $(".extend_data_02").show();
	             $(".data_player").hide(); 
	             $(".tab_content3").hide();
	             
	             mapInfo.boardType = 'board2' ;
		         mapInfo.dataKind = mapInfo.data_kind_rec[mapInfo.board2Kind][0];	             
	             
	         } else if (type == "type3" && sub == "sub1") {

	             // 추천지표
	             $(".extend_data_02").show();
	             $(".data_player").hide(); 
	             $(".tab_content3").hide();
	             
		         mapInfo.dataKind = fn_get_data_nm('board2',0, 'dataKey');
	             mapInfo.boardType = 'board2' ; 

	         } else if (type == "type3" && sub == "sub2") {
	             //viewAllIndicator(target); // 인구가구, 주거교통 옵션값 보여주기
	             
	             $(".extend_data_03").show(); 
	             $(".data_player").hide();
	             
	             mapInfo.boardType = 'board3' ;
	             mapInfo.dataKind = Object.keys(mapInfo.data_kind_all)[0];
	             
	             /*
	             if(target == "tab1") {  // 인구가구 모든지표
	                 ageRangeSlider.destroy();
	                 ageRangeSlider.init();
	             } else if (target == "tab2"){ // 주거교통 모든지표
	                 setTimeout(function() {
	                     theme2SizeSlider.destroy();
	                     theme2SizeSlider.init();
	                 },1000)
	             }
	             */
	             // 
	             //$(".checkbox_listWrap .checkbox_list:first-child .list_text input").prop('checked',true)
	             // allIndicatorSelector(type)
	             //excuteIndicator('aType')
	             
	         }

	         $("#exBoardTitle").text(boardTitle);
	         fn_boardClassController(obj,type);
	      }	 
	      
	      function   fn_boardClassController(obj,type){
	     		    function removeType1Class() { $('#btn_extend').removeClass('active')}
	     		    function removeType2Class() { $('#tabIndicator li').removeClass('active')}
	     		    function removeType3Class() { $('#tabIndicatorSub li').removeClass('active')}
	     		    
	     		    // 클래스 Toggle
	     		    switch(type) {
	     		        case "type1":  //우리  동네 상환판
	     		            $(obj).addClass('active')
	     		            removeType2Class();
	     		            removeType3Class()
	     		            $('.tab_container').hide();
	     		            fn_board1_fullData();
	     		            break;
	     		        case "type2":    //추천지표
	     		            removeType1Class();
	     		            removeType2Class();
	     		            removeType3Class();
	     		            $(obj).addClass('active');
	     		            $('#tabIndicatorSub li:first-child').addClass('active')
	     		            $('.tab_container').show();
	     		            fn_board2_fullData();
	     		            break;
	     		        case "type3":  //모든지표
	     		            removeType3Class();
	     		            $(obj).closest('li').addClass('active');
					        fn_init_left_menu();   //주소변경시 왼쪽 메뉴도 동적으로 변경필요 
					        fn_get_board3_data(mapInfo.dataKind,"");
	     		            break;
	     		        default:
		     		        //fn_board2_4()	     		        	
	     		            break;
	     		    }
	      }
	   
	      /*
  	   function fn_excuteIndicator(type){
  		    alert(type);
  	   }
	      */
  	   
  	   
  	// 보드 확대, 축소
  	 function fn_toggleBoard(){
  		 
  	     let boardSts = $("#extendBoard").hasClass('active');
  	     $("#extendBoard").toggleClass('active');
  	     
  	     
  	     $(".control_foot").toggleClass('extend'); 
  	     
  	     
  	     setTimeout(function() {
  	     	$('.slick_slider').slick('refresh')     
  	     },500)
  	     
  	     setTimeout(function() {
  	    	// 슬라이더 동작시에만 refresh
  	    	if($('#tabType2Content').hasClass('slick-initialized')) $('#tabType2Content').slick('refresh')
  	     	     
  	     },500)
  	     
  	    
  	       
  	     // board status 

  	     // 확대, 축소일 때 처리해야할 것들
  	      if(boardSts) {   //큰창
  	    	  mapInfo.boardSize = "small" ;
  	          $("#extend_data_03").css("display","none");
  	          $("#extend_data_03_small").css("display","block");    	 
  	      } else {
  	    	  mapInfo.boardSize = "large" ;  	    	  
  	          //$("#extend_data_03").css("display","block");
  	          //$("#extend_data_03_small").css("display","none");
  	          fn_board3_fullData(mapInfo.dataKind);
  	      }
  	 }
	      
      function fn_numberFormat(x){
          if (!x) return 0;
          return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }