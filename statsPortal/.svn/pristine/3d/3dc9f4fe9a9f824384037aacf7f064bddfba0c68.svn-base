<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu_gallery">

	<!-- 갤러리 목록 갯수 조회 -->
	<select id="selectGalleryListTotalCnt" parameterType="hashmap" resultType="int">	
		SELECT count(*) 
		FROM SRV_DT_EDU_GALLERYLIST a
		WHERE 1=1
		AND a.WRITER = #{writer}
		
		<!-- mng_s 20210729 srv_type은 공개여부인데 1,2이면 공개 3,4이면 비공개 인것 같다. 에듀에서는 이런 개념 없으므로 srv_type은 주석처리한다.
		<if test='null != srv_type and "" != srv_type'>
			<if test='1 == srv_type'>
				AND (a.SRV_TYPE = '1' or a.SRV_TYPE = '3') 		
			</if>
			<if test='2 == srv_type'>
				AND (a.SRV_TYPE = '2' or a.SRV_TYPE = '4') 		
			</if>
		</if>
		-->

		<if test='searchWord !="" and searchWord != null'>
			<choose>
				<when test="searchType == 1"><!-- 해시태그 -->
					AND a.TAG LIKE '%'||#{searchWord}||'%' 
				</when>
				<when test="searchType == 2"><!-- 제목 -->
					AND a.TITLE LIKE '%'||#{searchWord}||'%'
				</when>
				<when test="searchType == 3"><!-- 작성자 -->
					AND a.WRITER LIKE '%'||#{searchWord}||'%'
				</when>
			</choose>
		</if>
	</select>
	
	
	<!-- 수집 갤러리 목록 갯수 조회 -->
	<select id="selectMyGalleryListTotalCnt" parameterType="hashmap" resultType="int">	
		SELECT count(*) 
		FROM SRV_DT_EDU_GALLERYCOLLECTLIST a
		WHERE 1=1
		AND a.member_id = #{writer}
	</select>
	
	
	<!-- 가르치는 지도, 배우는 지도 목록 갯수 조회 -->
	<select id="selectGalleryListTotalCntResult" parameterType="hashmap" resultType="int">	
		SELECT COUNT(*) 
		FROM SRV_DT_EDUTCHPGM a
		WHERE 1=1
			<if test='my_teach_list == "2" '><!-- 내가만든 자료만 보기인데 이 조건의 순서가 바뀌면 결과가 달라지므로 여기에 고정시킬것 -->
				AND a.member_id = #{member_id} 
		    </if>
		    AND del_yn = 'N'
		    <if test='   null != ss_page_info and "S" == ss_page_info    '><!-- 이 조건의 순서가 바뀌면 결과가 달라지므로 여기에 고정시킬것 -->
				AND a.open_yn = 'Y'
			</if>
			
			<if test='searchWord !="" and searchWord != null'>
				<choose>
					<when test="searchType == 1"><!-- 전체 -->
						AND (a.TCHPGM_TITLE LIKE '%'||#{searchWord}||'%' OR a.TCHPGM_CN LIKE '%'||#{searchWord}||'%')
					</when>
					<when test="searchType == 2"><!-- 제목 -->
						AND a.TCHPGM_TITLE LIKE '%'||#{searchWord}||'%'
					</when>
					<when test="searchType == 3"><!-- 내용 -->
						AND a.TCHPGM_CN LIKE '%'||#{searchWord}||'%'
					</when>
				</choose>
			</if>
			
			<if test='   null != ss_page_info and "T" == ss_page_info    '>
				AND (a.open_yn = 'Y' or ( a.open_yn = 'N' and a.member_id = #{member_id} ) )
			</if>
			<if test='   null != ss_school_grade and "" != ss_school_grade    '>
				AND a.school_grade = #{ss_school_grade}
			</if>
	</select>
	

	<!-- 갤러리 목록 조회 -->
	<select id="selectGalleryList" parameterType="hashmap" resultType="hashmap">
		SELECT *
		FROM ( 
				SELECT *
					<!-- 조회순, 추천순, 종류별, 최신순-->
					<choose>
						<when test='orderType == "hits"'>, ROW_NUMBER() OVER (ORDER BY HITS DESC) as rowIdx</when>
						<when test='orderType == "like"'>, ROW_NUMBER() OVER (ORDER BY LIKE_CNT DESC) as rowIdx</when>
					<!-- 	<when test='orderType == "type"'></when> -->
						<otherwise>, ROW_NUMBER() OVER (ORDER BY REG_DT DESC) as rowIdx</otherwise>
					</choose>
				 FROM ( 
						SELECT 
							a.DATA_ID
							,NVL(support_type,'') support_type
							, a.TITLE
							, a.CONTENT
							, a.WRITER
							, TO_CHAR(a.REG_DT, 'YYYY.MM.DD') AS REG_DT
							, a.SURVEY_SURV_START_DT
							, a.SURVEY_SURV_END_DT
							, a.TAG
							, a.HITS
							, a.SRV_TYPE 
							--, DECODE(b.SURVEY_TYPE, null, '', b.SURVEY_TYPE  ) AS SURVEY_TYPE 
							--, DECODE(b.SURVEY_TITLE, null, '', b.SURVEY_TITLE ) AS SURVEY_TITLE
							, '' AS SURVEY_TYPE 
							, '' AS SURVEY_TITLE
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYLIKEINFO s WHERE s.DATA_ID = a.DATA_ID) AS LIKE_CNT	 <!-- 추천 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYREPLY s WHERE s.DATA_ID = a.DATA_ID) AS REPLY_CNT	 <!-- 댓글 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYIMGLIST s WHERE s.DATA_ID = a.DATA_ID) AS IMG_CNT	 <!-- 이미지 수 -->
							, (select param_info from SRV_DT_EDU_GALLERYIMGLIST where data_id = a.DATA_ID order by img_id limit 1) AS PARAM_INFO <!-- 첫번째 이미지 파람 정보 -->
						FROM  SRV_DT_EDU_GALLERYLIST a 
									--LEFT JOIN SRV_DT_EDU_GALLERYPOLL b ON	a.DATA_ID = b.DATA_ID
						WHERE 1=1
						AND a.WRITER = #{writer}
						<if test='null != data_id and "" != data_id'>
							AND a.DATA_ID = #{data_id}
						</if>
						
						<!-- mng_s 20210729 srv_type은 공개여부인데 1,2이면 공개 3,4이면 비공개 인것 같다. 에듀에서는 이런 개념 없으므로 srv_type은 주석처리한다.
						<if test='null != srv_type and "" != srv_type'>
							<if test='1 == srv_type'>
								AND (a.SRV_TYPE = '1' or a.SRV_TYPE = '3') 		
							</if>
							
							<if test='2 == srv_type'>
								AND (a.SRV_TYPE = '2' or a.SRV_TYPE = '4') 		
							</if>	
						</if>
						-->
						
						
						<if test='searchWord !="" and searchWord != null'>
							<choose>
								<when test="searchType == 1"><!-- 해시태그 -->
									AND a.TAG LIKE '%'||#{searchWord}||'%' 
								</when>
								<when test="searchType == 2"><!-- 제목 -->
									AND a.TITLE LIKE '%'||#{searchWord}||'%'
								</when>
								<when test="searchType == 3"><!-- 작성자 -->
									AND a.WRITER LIKE '%'||#{searchWord}||'%'
								</when>
							</choose>
						</if>

			<!-- 조회순, 추천순, 종류별, 최신순-->
			<choose>
				<when test='orderType == "hits"'>ORDER BY a.HITS DESC</when>
				<when test='orderType == "like"'>ORDER BY LIKE_CNT DESC</when>
			<!-- 	<when test='orderType == "type"'>ORDER BY </when> -->
				<otherwise>ORDER BY a.REG_DT DESC</otherwise>
			</choose>
						)
				)
<![CDATA[		
		WHERE rowIdx >= #{startRow}
		   AND rowIdx <= #{endRow}
 ]]>		
	</select>
	
	
	<!-- 우수활용사례 조회 -->
	<select id="selectGalleryExcellent" parameterType="hashmap" resultType="hashmap">
		SELECT *
		FROM ( 
				SELECT *
					<!-- 조회순, 추천순, 종류별, 최신순-->
					<choose>
						<when test='orderType == "hits"'>, ROW_NUMBER() OVER (ORDER BY HITS DESC) as rowIdx</when>
						<when test='orderType == "like"'>, ROW_NUMBER() OVER (ORDER BY LIKE_CNT DESC) as rowIdx</when>
					<!-- 	<when test='orderType == "type"'></when> -->
						<otherwise>, ROW_NUMBER() OVER (ORDER BY REG_DT DESC) as rowIdx</otherwise>
					</choose>
				 FROM ( 
						SELECT 
							a.DATA_ID
							,NVL(support_type,'') support_type
							, a.TITLE
							, a.CONTENT
							, a.WRITER
							, TO_CHAR(a.REG_DT, 'YYYY.MM.DD') AS REG_DT
							, a.SURVEY_SURV_START_DT
							, a.SURVEY_SURV_END_DT
							, a.TAG
							, a.HITS
							, a.SRV_TYPE 
							--, DECODE(b.SURVEY_TYPE, null, '', b.SURVEY_TYPE  ) AS SURVEY_TYPE 
							--, DECODE(b.SURVEY_TITLE, null, '', b.SURVEY_TITLE ) AS SURVEY_TITLE
							, '' AS SURVEY_TYPE 
							, '' AS SURVEY_TITLE
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYLIKEINFO s WHERE s.DATA_ID = a.DATA_ID) AS LIKE_CNT	 <!-- 추천 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYREPLY s WHERE s.DATA_ID = a.DATA_ID) AS REPLY_CNT	 <!-- 댓글 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYIMGLIST s WHERE s.DATA_ID = a.DATA_ID) AS IMG_CNT	 <!-- 이미지 수 -->
							, (select param_info from SRV_DT_EDU_GALLERYIMGLIST where data_id = a.DATA_ID order by img_id limit 1) AS PARAM_INFO <!-- 첫번째 이미지 파람 정보 -->
						FROM  SRV_DT_EDU_GALLERYLIST a 
									--LEFT JOIN SRV_DT_EDU_GALLERYPOLL b ON	a.DATA_ID = b.DATA_ID
						WHERE 1=1
						
						<if test='null != data_id and "" != data_id'>
							AND a.DATA_ID = #{data_id}
						</if>
						
						<!-- mng_s 20210729 srv_type은 공개여부인데 1,2이면 공개 3,4이면 비공개 인것 같다. 에듀에서는 이런 개념 없으므로 srv_type은 주석처리한다.
						<if test='null != srv_type and "" != srv_type'>
							AND a.SRV_TYPE = #{srv_type} 		
						</if>
						-->
						
						<if test='searchWord !="" and searchWord != null'>
							<choose>
								<when test="searchType == 1"><!-- 해시태그 -->
									AND a.TAG LIKE '%'||#{searchWord}||'%' 
								</when>
								<when test="searchType == 2"><!-- 제목 -->
									AND a.TITLE LIKE '%'||#{searchWord}||'%'
								</when>
								<when test="searchType == 3"><!-- 작성자 -->
									AND a.WRITER LIKE '%'||#{searchWord}||'%'
								</when>
							</choose>
						</if>

			<!-- 조회순, 추천순, 종류별, 최신순-->
			<choose>
				<when test='orderType == "hits"'>ORDER BY a.HITS DESC</when>
				<when test='orderType == "like"'>ORDER BY LIKE_CNT DESC</when>
			<!-- 	<when test='orderType == "type"'>ORDER BY </when> -->
				<otherwise>ORDER BY a.REG_DT DESC</otherwise>
			</choose>
						)
				)
	<![CDATA[		
		where EXCELLENT_CASE_SLCTN_YN = 'Y'
 	]]>		
	</select>
	
	
	
	<!--(일반) 가르치는 지도, 배우는 지도  목록 조회 -->
	<select id="selectGalleryListResult" parameterType="hashmap" resultType="hashmap">
		SELECT *
		  FROM ( 
				SELECT *
					<!-- 조회순, 추천순, 최신순-->
					<choose>
						<when test='orderType == "hits"'>, ROW_NUMBER() OVER (ORDER BY HITS DESC) as rowIdx</when>
						<when test='orderType == "like"'>, ROW_NUMBER() OVER (ORDER BY LIKE_CNT DESC) as rowIdx</when>
						<otherwise>, ROW_NUMBER() OVER (ORDER BY REG_TS DESC) as rowIdx</otherwise>
					</choose>
				  FROM (
			  		  		SELECT TCHPGM_SEQ   
								 , SCHOOL_GRADE 
								 , TCHPGM_TITLE 
								 , TCHPGM_CN	
								 , IMG_FILE_NM	
								 , HITS	        
								 , OPEN_YN	    
								 , MEMBER_ID	
								 , to_char(REG_TS, 'YYYY.mm.dd') REG_TS	    
								 , MOD_TS	    
								 , DEL_YN
								 , fn_get_edu_tags(TCHPGM_SEQ) kwrd
								 , REG_TS as order_reg_ts
							  FROM  SRV_DT_EDUTCHPGM a 
							 WHERE 1=1
							  <if test='my_teach_list == "2" '><!-- 내가만든 자료만 보기인데 이 조건의 순서가 바뀌면 결과가 달라지므로 여기에 고정시킬것 -->
								 AND a.member_id = #{member_id} 
							  </if>
							  AND del_yn = 'N'
							  
							<if test='   null != ss_page_info and "S" == ss_page_info    '><!--이 조건의 순서가 바뀌면 결과가 달라지므로 여기에 고정시킬것 -->
								AND a.open_yn = 'Y'
							</if>
							
							<if test='searchWord !="" and searchWord != null'>
                				<choose>
                					<when test="searchType == 1"><!-- 전체 -->
                						AND (a.TCHPGM_TITLE LIKE '%'||#{searchWord}||'%' OR a.TCHPGM_CN LIKE '%'||#{searchWord}||'%' )
                					</when>
                					<when test="searchType == 2"><!-- 제목 -->
                						AND a.TCHPGM_TITLE LIKE '%'||#{searchWord}||'%'
                					</when>
                					<when test="searchType == 3"><!-- 내용 -->
                						AND a.TCHPGM_CN LIKE '%'||#{searchWord}||'%'
                					</when>
                				</choose>
                			</if>
                			
                			
							<if test='   null != ss_page_info and "T" == ss_page_info    '>
								AND (a.open_yn = 'Y' or ( a.open_yn = 'N' and a.member_id = #{member_id} ) )
							</if>
							
							<if test='   null != ss_school_grade and "" != ss_school_grade    '>
								AND a.school_grade = #{ss_school_grade}
							</if>
							
							<!-- 조회순, 추천순, 최신순-->
							<choose>
								<when test='orderType == "hits"'>ORDER BY a.HITS DESC</when>
								<when test='orderType == "like"'>ORDER BY LIKE_CNT DESC</when>
								<otherwise>ORDER BY a.REG_TS DESC</otherwise>
							</choose>
			  		  		
					)
				)
		<![CDATA[		
		 WHERE rowIdx >= #{startRow}
		   AND rowIdx <= #{endRow}
 		]]>
 		ORDER BY order_reg_ts DESC
	</select>
	
	
	<!-- 갤러리 목록 (my)조회 -->
	<select id="selectGalleryListMyGallery" parameterType="hashmap" resultType="hashmap">
		SELECT *
		FROM ( 
				SELECT *
					<!-- 조회순, 추천순, 종류별, 최신순-->
					<choose>
						<when test='orderType == "hits"'>, ROW_NUMBER() OVER (ORDER BY HITS DESC) as rowIdx</when>
						<when test='orderType == "like"'>, ROW_NUMBER() OVER (ORDER BY LIKE_CNT DESC) as rowIdx</when>
					<!-- 	<when test='orderType == "type"'></when> -->
						<otherwise>, ROW_NUMBER() OVER (ORDER BY REG_DT DESC) as rowIdx</otherwise>
					</choose>
				 FROM ( 
						SELECT 
							a.DATA_ID
							,NVL(support_type,'') support_type
							, a.TITLE
							, a.CONTENT
							, a.WRITER
							, TO_CHAR(a.REG_DT, 'YYYY.MM.DD') AS REG_DT
							, a.SURVEY_SURV_START_DT
							, a.SURVEY_SURV_END_DT
							, a.TAG
							, a.HITS
							, a.SRV_TYPE 
							--, DECODE(b.SURVEY_TYPE, null, '', b.SURVEY_TYPE  ) AS SURVEY_TYPE 
							--, DECODE(b.SURVEY_TITLE, null, '', b.SURVEY_TITLE ) AS SURVEY_TITLE
							, '' AS SURVEY_TYPE 
							, '' AS SURVEY_TITLE
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYLIKEINFO s WHERE s.DATA_ID = a.DATA_ID) AS LIKE_CNT	 <!-- 추천 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYREPLY s WHERE s.DATA_ID = a.DATA_ID) AS REPLY_CNT	 <!-- 댓글 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_EDU_GALLERYIMGLIST s WHERE s.DATA_ID = a.DATA_ID) AS IMG_CNT	 <!-- 이미지 수 -->
							, (select param_info from SRV_DT_EDU_GALLERYIMGLIST where data_id = a.DATA_ID order by img_id limit 1) AS PARAM_INFO <!-- 첫번째 이미지 파람 정보 -->
							, (select data_id from SRV_DT_EDU_GALLERYCOLLECTLIST where member_id = #{writer} and data_id = a.DATA_ID) as cData_id
						FROM  SRV_DT_EDU_GALLERYLIST a 
									JOIN SRV_DT_EDU_GALLERYCOLLECTLIST c on a.data_id = c.data_id
									--LEFT JOIN SRV_DT_EDU_GALLERYPOLL b ON	a.DATA_ID = b.DATA_ID
						WHERE c.member_id = #{writer}
						
						<if test='null != data_id and "" != data_id'>
							AND a.DATA_ID = #{data_id}
						</if>
						
						<!-- mng_s 20210729 srv_type은 공개여부인데 1,2이면 공개 3,4이면 비공개 인것 같다. 에듀에서는 이런 개념 없으므로 srv_type은 주석처리한다.
						<if test='null != srv_type and "" != srv_type'>
							AND a.SRV_TYPE = #{srv_type} 		
						</if>
						-->
						
						<if test='searchWord !="" and searchWord != null'>
							<choose>
								<when test="searchType == 1"><!-- 해시태그 -->
									AND a.TAG LIKE '%'||#{searchWord}||'%' 
								</when>
								<when test="searchType == 2"><!-- 제목 -->
									AND a.TITLE LIKE '%'||#{searchWord}||'%'
								</when>
								<when test="searchType == 3"><!-- 작성자 -->
									AND a.WRITER LIKE '%'||#{searchWord}||'%'
								</when>
							</choose>
						</if>
							

			<!-- 조회순, 추천순, 종류별, 최신순-->
			<choose>
				<when test='orderType == "hits"'>ORDER BY a.HITS DESC</when>
				<when test='orderType == "like"'>ORDER BY LIKE_CNT DESC</when>
			<!-- 	<when test='orderType == "type"'>ORDER BY </when> -->
				<otherwise>ORDER BY a.REG_DT DESC</otherwise>
			</choose>
						)
				)
<![CDATA[		
		WHERE rowIdx >= #{startRow}
		   AND rowIdx <= #{endRow}
 ]]>		
	</select>
	
	

	<!-- 가르치는 지도/ 배우는 지도 조회 -->
	<select id="selectGallery" parameterType="hashmap" resultType="hashmap">
		SELECT 
			a.tchpgm_seq
			, a.school_grade
			, a.tchpgm_title
			, a.tchpgm_cn
			, a.member_id
			, a.open_yn
			, FN_GET_MEMBERNM( a.member_id ) AS MEMBER_NM
			, TO_CHAR(a.REG_TS, 'YYYY.MM.DD') AS REG_TS
			, fn_get_edu_tags(TCHPGM_SEQ) kwrd
			, a.HITS
			, (SELECT COUNT(*) FROM SRV_DT_EDUTCHPGM_REPLY s WHERE s.tchpgm_seq = a.tchpgm_seq) AS REPLY_CNT	 <!-- 댓글 수 -->
		FROM  SRV_DT_EDUTCHPGM a 
		WHERE a.tchpgm_seq = #{data_id}
		<if test='   null != ss_page_info and "S" == ss_page_info    '>
			AND a.open_yn = 'Y'
		</if>
		
			
	</select>
	
	
	<!-- imgIcon 조회 -->
	 <select id="selectGalleryImgIconList" parameterType="hashmap" resultType="hashmap">
	 	
	 	SELECT tchpgm_seq DATA_ID, icon_seq ICON_ID, ICON_TYPE ICON_TYPE, icon_cn EXP, 
	 		icon_x_coor X_COOR, icon_y_coor Y_COOR, html_src, icon_file_nm icon_nm
	 	FROM SRV_DT_EDUTCHPGM_IMGICON
	 	WHERE tchpgm_seq = #{data_id}
	 	
	 </select>
	 
	
	<!-- 가르치는 지도/ 배우는 지도 댓글 조회 -->
	<select id="selectGalleryReplyList" parameterType="hashmap" resultType="hashmap">
		
		SELECT	 tchpgm_seq DATA_ID
				, reply_seq REPLY_ORDER
				, reply_cn REPLY_CONTENT
				, reply_reg_id REPLY_WRITER
				, reply_reg_id MEMBER_NM
				, to_char(reg_ts, 'YYYY.mm.dd')  REPLY_REG_DT
				, (SELECT count(*) FROM SRV_DT_EDUTCHPGM_REPLY  WHERE	tchpgm_seq = #{data_id} and del_yn='N' ORDER BY	to_number(reply_seq) ) as reply_cnt
				, (SELECT b.member_id FROM SRV_DT_EDUTCHPGM b  WHERE	tchpgm_seq = #{data_id}  ) as pg_writer_id
		FROM    SRV_DT_EDUTCHPGM_REPLY a
		WHERE	tchpgm_seq = #{data_id}
		    and del_yn='N'
		ORDER BY	to_number(reply_seq) 
	</select>
	
	<!-- 가르치는 지도/ 배우는 지도 댓글 Next reply_order 조회 -->
	<select id="selectGalleryReplyNextOrder" parameterType="hashmap" resultType="int">
		
		SELECT	DECODE(MAX(to_number(reply_seq)), null, 1, MAX(to_number(reply_seq))+1)			
		FROM		SRV_DT_EDUTCHPGM_REPLY
		WHERE	tchpgm_seq = #{data_id}
	</select>
	
	<!-- 가르치는지도 갤러리 댓글 등록 -->
	<insert id="insertGalleryReply" parameterType="hashmap">
		
		INSERT INTO SRV_DT_EDUTCHPGM_REPLY
		(
			tchpgm_seq 
			, reply_seq 
			, reply_cn 
			, reply_reg_id 
			, reg_ts  
			, del_yn
		)
		VALUES
		(
			#{data_id}
			, #{reply_order}
			, #{reply_content}
			, #{reply_writer}
			, SYSDATE 
			, 'N'
		)
	</insert>
	
	<!-- 설문조사 조회 -->
	<select id="selectGalleryPollCount" parameterType="hashmap" resultType="java.lang.Integer">
		select NVL(count(*),0) from srv_dt_EDU_GALLERYPoll where data_id =#{data_id}
	</select>
	<!-- 설문조사 상세 개수 -->
	<select id="selectGalleryPollDetailCount" parameterType="hashmap" resultType="java.lang.Integer">
		select NVL(count(*),0) from srv_dt_EDU_GALLERYPollDetail where data_id =#{data_id}
	</select>
	<!-- 설문조사 상세조회	 -->
	<select id="selectGalleryPollDetailList" parameterType="hashmap" resultType="hashmap">
			SELECT 	a.DATA_ID
						, a.SURVEY_SURV_ID
						, a.SURVEY_TITLE
						, a.SURVEY_TYPE
						, b.ANS_SERIAL
						, b.ANS_CONTENT
						, (SELECT TO_CHAR(s.SURVEY_SURV_END_DT, 'YYYY"년 "MM"월 "DD"일"') FROM SRV_DT_EDU_GALLERYLIST s WHERE  s.DATA_ID = a.DATA_ID) AS SURVEY_SURV_END_DT
						, DECODE(b.ANS_SERIAL, null, 0, (	SELECT COUNT(*) 
														 FROM SRV_DT_EDU_GALLERYPOLLVOTEINFO s 
														WHERE s.DATA_ID = a.DATA_ID
														   AND s.SURVEY_SURV_ID = a.SURVEY_SURV_ID
														   AND s.ANS_SERIAL = b.ANS_SERIAL
													  )
							) AS VOTE_CNT  <!-- 설문자수 -->
						, DECODE(b.ANS_SERIAL, null, 'N', (SELECT DECODE(COUNT(*), 0, 'N', 'Y') 
																 FROM SRV_DT_EDU_GALLERYPOLLVOTEINFO s 
																WHERE s.DATA_ID = a.DATA_ID
																   AND s.SURVEY_SURV_ID = a.SURVEY_SURV_ID
																   AND s.ANS_SERIAL = b.ANS_SERIAL 
																   AND s.MEMBER_ID = #{member_id}
																 )
									) AS VOTE_YN   <!-- 설문여부 -->
			FROM SRV_DT_EDU_GALLERYPOLL a 
					LEFT JOIN SRV_DT_EDU_GALLERYPOLLDETAIL b ON a.DATA_ID = b.DATA_ID AND a.SURVEY_SURV_ID = b.SURVEY_SURV_ID
			WHERE a.DATA_ID= #{data_id}
	</select>
	
	<select id="selectGalleryImg" parameterType="hashmap" resultType="hashmap">
		<!--
		SELECT 	DATA_ID
					, IMG_ID
					, API_CALL_URL
					, PARAM_INFO
		FROM 	SRV_DT_EDU_GALLERYIMGLIST
		WHERE DATA_ID = #{data_id}
		-->
		SELECT 	tchpgm_seq
					, img_file_nm
		FROM 	SRV_DT_EDUTCHPGM
		WHERE tchpgm_seq = #{data_id}
	</select>
	
	<!-- 갤러리 추천 등록 -->
	<insert id="insertGalleryLikeInfo" parameterType="hashmap">
		INSERT INTO SRV_DT_EDU_GALLERYLIKEINFO 
		VALUES 
		(   
			#{data_id}
			, #{member_id}
		)
	</insert>
	
	<!-- 갤러리 추천 삭제	 -->
	<delete id="deleteGalleryLikeInfo" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYLIKEINFO
		WHERE DATA_ID = #{data_id}
		<if test=' null != member_id and "" != member_id'>
		AND MEMBER_ID = #{member_id}
		</if>
	</delete>
	
	<!-- 설문조사 참여자 삭제 -->
	<delete id="deleteGalleryPollVoteInfo" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYPOLLVOTEINFO
		WHERE DATA_ID = #{data_id}
	</delete>
	
	<!-- 설문조사 참여자 항목 삭제 (재 투표를 위하여) -->
	<delete id="deleteGalleryPollVoteInfoUser" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYPOLLVOTEINFO
		WHERE DATA_ID = #{data_id} AND SURVEY_SURV_ID = #{survey_surv_id} AND member_id = #{member_id}
	</delete>
	
	
	
	<!-- 설문조사 문항 상세 삭제 -->
	<delete id="deleteGalleryPollDetail" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYPOLLDETAIL
		WHERE DATA_ID = #{data_id}
	</delete>
	
	<!-- 설문조사 문항 상세 일부 삭제 -->
	<delete id="deleteGalleryPollDetailAns" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYPOLLDETAIL
		WHERE DATA_ID = #{data_id} and survey_surv_id = #{survey_surv_id} and ans_serial = #{ans_serial}
	</delete>
	<!-- 설문조사 참여자 상세 삭제 -->
	<delete id="deleteGalleryPollVoteInfoDetail" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYPOLLVOTEINFO
		WHERE DATA_ID = #{data_id} and survey_surv_id = #{survey_surv_id} and ans_serial = #{ans_serial}
	</delete>
	
	
	<!-- 설문조사 문항 삭제 -->
	<delete id="deleteGalleryPoll" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYPOLL
		WHERE DATA_ID = #{data_id}
	</delete>
	
	<!-- 통계갤러리 이미지 아이콘 리스트 삭제 -->
	<delete id="deleteGalleryImgIconList" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYIMGICONLIST
		WHERE DATA_ID = #{data_id}
	</delete>
	
	
	<!-- 통계갤러리 이미지 아이콘 개별 -->
	<delete id="deleteGalleryImgIconOri" parameterType="hashmap">
		DELETE FROM SRV_DT_EDUTCHPGM_IMGICON
		WHERE tchpgm_seq = #{data_id} and icon_seq = #{icon_id}; 
	</delete>
	
	
	<!-- 통계갤러리 이미지 리스트 삭제 -->
	<delete id="deleteGalleryImgIcon" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYIMGICONLIST
		WHERE DATA_ID = #{data_id} AND IMG_ID = #{img_id}
	</delete>
	
	
	<!-- 통계갤러리 이미지 리스트 삭제 -->
	<delete id="deleteGalleryImgList" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYIMGLIST
		WHERE DATA_ID = #{data_id}
	</delete>
	
	<!-- 통계갤러리 이미지 리스트 개별 삭제 -->
	<delete id="deleteGalleryImg" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYIMGLIST
		WHERE DATA_ID = #{data_id} and img_id = #{img_id}
	</delete>
	
	
	<!-- 댓글 리스트 삭제 -->
	<delete id="deleteReply" parameterType="hashmap">
		DELETE FROM SRV_DT_EDU_GALLERYREPLY
		WHERE DATA_ID = #{data_id}
	</delete>
	
	<delete id="deleteGalleryReply" parameterType="hashmap">
		<!--
		DELETE FROM SRV_DT_EDUTCHPGM_REPLY
		WHERE DATA_ID = #{data_id} and reply_order = #{replyOrder}
		-->
		update SRV_DT_EDUTCHPGM_REPLY set del_yn='Y'
		WHERE tchpgm_seq = #{data_id} and reply_seq = #{replyOrder}
	</delete>
	
	<!-- 가르치는 지도 데이터 리스트 삭제 -->
	<delete id="deleteGallery" parameterType="hashmap">
		update SRV_DT_EDUTCHPGM set del_yn='Y'
		WHERE tchpgm_seq = #{data_id} and member_id = #{member_id}
	</delete>
	
	<delete id="deleteGalleryMyGallery" parameterType="hashmap">
		Delete from SRV_DT_EDU_GALLERYCOLLECTLIST 
		where data_id =#{data_id} and member_id = #{member_id}
	</delete>
	
	<!-- 설문조사 투표	 -->
	<insert id="insertGalleryPollVoteInfo" parameterType="hashmap">
		INSERT INTO SRV_DT_EDU_GALLERYPOLLVOTEINFO 
		VALUES 
		(   
			#{survey_surv_id}
			, #{data_id}
			, #{ans_serial}
			, #{member_id}
		)
	</insert>
	
	<!-- 설문조사 재투표	 -->
	<update id="updateGalleryPollVoteInfo" parameterType="hashmap">
		UPDATE	SRV_DT_EDU_GALLERYPOLLVOTEINFO 
		SET 
				ANS_SERIAL = #{ans_serial}
		WHERE 	SURVEY_SURV_ID = #{survey_surv_id}
		AND 		DATA_ID = #{data_id}
		AND 		MEMBER_ID = #{member_id}
	</update>
	
	<select id="selectGalleryPollVoteInfo" parameterType="hashmap" resultType="hashmap">
		select * from SRV_DT_EDU_GALLERYPOLLVOTEINFO
		where DATA_ID = #{data_id}
			AND SURVEY_SURV_ID = #{survey_surv_id}
			AND MEMBER_ID = #{member_id}
	</select>
	
	<insert id="addGallery" parameterType="hashmap">
		insert into SRV_DT_EDUTCHPGM
		(
			tchpgm_seq
			,school_grade
			,tchpgm_title
			,tchpgm_cn
			,pswd
			,img_file_nm
			,hits
			,open_yn
			,member_id
			,reg_ts
			,mod_ts
			,del_yn
		)
		
		VALUES
		(
			#{data_id},
			#{school_grade},
			#{title},
			#{content},
			#{teach_pwd},
			#{img_file_nm},
			0,
			#{open_yn},
			#{member_id},
			sysdate,
			sysdate,
			'N'
		)
	</insert>
	
	<insert id="insertSurveyPoll" parameterType="hashmap">
		insert into SRV_DT_EDU_GALLERYPOLL
		(
			data_id
			,survey_surv_id
			,survey_title
			,survey_type
		)
		values
		(
			#{data_id}
			,#{survey_surv_id}
			,#{survey_title}
			,#{survey_type}
		)
	</insert>
	<insert id="insertSurveyDetail" parameterType="hashmap">
		insert into SRV_DT_EDU_GALLERYPOLLDETAIL
		(
			data_id
			,survey_surv_id
			,ans_serial
			,ans_content
		)
		values
		(
			#{data_id}
			,#{survey_surv_id}
			,#{ans_serial}
			,#{ans_content}
		)
		
	</insert>
	
	<insert id="insertGalleryImg" parameterType="hashmap">
		insert into SRV_DT_EDU_GALLERYIMGLIST
		(
			data_id,
			img_id,
			api_call_URL,
			param_info
		)
		values
		(
			#{data_id},
			#{img_id},
			#{api_call_URL},
			#{param_info}
		)
	</insert>
	
	<insert id="insertIconList" parameterType="hashmap">
		insert into SRV_DT_EDUTCHPGM_IMGICON
		(
			tchpgm_seq
			,icon_seq
			,icon_type
			,icon_cn
			,icon_x_coor
			,icon_y_coor
			,icon_file_nm
			,html_src
			
		)values
		(
			#{data_id},
			#{icon_id},
			#{icon_type},
			#{exp},
			#{x_coor},
			#{y_coor},
			#{icon_nm},
			#{html_src}
		)
	
	</insert>
	
	<insert id="insertGalleryTag" parameterType="hashmap">
		insert into SRV_DT_EDUTCHPGM_HASHTAG
		(
			hashtag_seq,
			tchpgm_seq,
			kwrd
		)values
		(
			#{tag_id},
			#{data_id},
			#{kwrd}
		)
	
	</insert>
	
	
	<insert id="addMyGallery" parameterType="hashmap">
		insert into srv_dt_EDU_GALLERYcollectlist 
		(data_id,collect_id,member_id) 
		values (#{data_id} , #{collect_id} , #{member_id})
	</insert>
	
	
	<!-- 가르치는 지도 편집하기 클릭시 기존 스티커를 제거하거나 추가하지 않고 수정시 -->
	<update id="updateIconList" parameterType="hashmap">
		update SRV_DT_EDUTCHPGM_IMGICON
		set icon_type = #{icon_type}, icon_cn = #{exp}, icon_x_coor = #{x_coor}, icon_y_coor = #{y_coor}, icon_file_nm = #{icon_nm}, html_src = #{html_src}
		where tchpgm_seq=#{data_id} and icon_seq=#{icon_id} 
	</update>

	<!-- <select id="selectBookMarkList" parameterType="String" resultType="hashmap">
		SELECT * FROM srv_dt_statsearchhist 
	    WHERE member_id= #{member_id} and hist_type='BMARK' order by reg_ts desc
	</select> -->
	
	<select id="selectBookMarkListCount" parameterType="hashmap" resultType="java.lang.Integer">
		SELECT count(*) FROM srv_dt_statsearchhist 
	    WHERE member_id= #{member_id} and hist_type='BMARK' order by reg_ts desc
	</select>
	
	
	<!-- 가르치는 지도/ 배우는 지도 교안 작성시 사용 즐겨찾기 리스트 가져오기  -->
	<select id="selectBookMarkList" parameterType="hashmap" resultType="hashmap">
				SELECT *
					FROM ( 
							SELECT *
								, ROW_NUMBER() OVER (ORDER BY reg_ts DESC) as rowIdx
				 			FROM ( 
									SELECT * FROM  srv_dt_statsearchhist
									WHERE 1=1
									AND member_id = #{member_id}
									AND hist_type='BMARK'
									<if test='searchWord !="" and searchWord != null'>
										AND hist_nm '%'||#{searchWord}||'%'
									</if>

									<!-- 조회순 -->
										ORDER BY reg_ts DESC
									)
							)
						<if test='startRow !="" and startRow != null'>
							<![CDATA[		
								WHERE rowIdx >= #{startRow}
								AND rowIdx <= #{endRow}
							]]>		
						</if>
						
	</select>
	
	<select id="selectBookMarkData" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM srv_dt_statsearchhist 
	    WHERE hist_type='BMARK' and trim(hist_id)=#{hist_id} order by reg_ts desc
	</select>
	
	
	<!-- 가르치는 지도/ 배우는 지도 교안 작성 시 사용 갤러리 리스트 가져오기  -->
	<select id="selectBookMarkList2" parameterType="hashmap" resultType="hashmap">
		SELECT *
		FROM ( 
				SELECT *
					<!-- 조회순, 추천순, 종류별, 최신순-->
					<choose>
						<when test='orderType == "hits"'>, ROW_NUMBER() OVER (ORDER BY HITS DESC) as rowIdx</when>
						<when test='orderType == "like"'>, ROW_NUMBER() OVER (ORDER BY LIKE_CNT DESC) as rowIdx</when>
						<otherwise>, ROW_NUMBER() OVER (ORDER BY REG_DT DESC) as rowIdx</otherwise>
					</choose>
				 FROM ( 
						SELECT 
							a.DATA_ID
							,NVL(support_type,'') support_type
							, a.TITLE
							, a.CONTENT
							, a.WRITER
							, TO_CHAR(a.REG_DT, 'YYYY.MM.DD') AS REG_DT
							, a.SURVEY_SURV_START_DT
							, a.SURVEY_SURV_END_DT
							, a.TAG
							, a.HITS
							, a.SRV_TYPE 
							, '' AS SURVEY_TYPE 
							, '' AS SURVEY_TITLE
							, (SELECT COUNT(*) FROM SRV_DT_GALLERYLIKEINFO s WHERE s.DATA_ID = a.DATA_ID) AS LIKE_CNT	 <!-- 추천 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_GALLERYREPLY s WHERE s.DATA_ID = a.DATA_ID) AS REPLY_CNT	 <!-- 댓글 수 -->
							, (SELECT COUNT(*) FROM SRV_DT_GALLERYIMGLIST s WHERE s.DATA_ID = a.DATA_ID) AS IMG_CNT	 <!-- 이미지 수 -->
							, (select param_info from SRV_DT_GALLERYIMGLIST where data_id = a.DATA_ID order by img_id limit 1) AS PARAM_INFO <!-- 첫번째 이미지 파람 정보 -->
						FROM  SRV_DT_GALLERYLIST a 
						WHERE a.WRITER = #{member_id}
						and srv_type in ('1','2','3','4')
						<if test='null != data_id and "" != data_id'>
							AND a.DATA_ID = #{data_id}
						</if>
							
						<choose>
							<when test='orderType == "hits"'>ORDER BY a.HITS DESC</when>
							<when test='orderType == "like"'>ORDER BY LIKE_CNT DESC</when>
							<otherwise>ORDER BY a.REG_DT DESC</otherwise>
						</choose>
					)
				)
		<if test='startRow !="" and startRow != null'>
			<![CDATA[		
			WHERE rowIdx >= #{startRow}
			   AND rowIdx <= #{endRow}
	 		]]>
 		</if>
						
	</select>
	
	<select id="existMyGallery" parameterType="hashmap" resultType="java.lang.Integer">
		select count(*)as cnt from srv_dt_EDU_GALLERYcollectList where data_id=#{data_id} and member_id=#{member_id}
	</select>
	
	<select id="selectGalleryAllCountList" parameterType="String" resultType="hashmap">
		 select NVL(a.bookMarkCount,0) as bookMarkCount, NVL(b.writeCount,0) as writeCount, NVL(c.collectCount,0) as collectCount, NVL(d.likeCount,0) as likeCount, NVL(e.writeCount,0) as tempWrite
		 from 
            (select NVL(count(*),0) as bookMarkCount, NVL(member_id,#{member_id}) as member_id
                from srv_dt_statsearchhist
                where member_id = #{member_id} and hist_type='BMARK'
                group by member_id
             )as a join
             (select NVL(count(*),0) as writeCount, NVL(writer,#{member_id}) as writer
                from srv_dt_EDU_GALLERYlist
                where writer = #{member_id}
                
                
                <!-- mng_s 20210729 srv_type은 공개여부인데 1,2이면 공개 3,4이면 비공개 인것 같다. 에듀에서는 이런 개념 없으므로 srv_type은 주석처리한다.
                AND srv_type='1' or srv_type='2'
                -->
                
                
                group by writer
              ) as b ON a.member_id = b.writer (+)
			  join
			 (select NVL(count(*),0) as collectCount , NVL(member_id,#{member_id}) as member_id
				from SRV_DT_EDU_GALLERYCOLLECTLIST 
				where member_id = #{member_id}
				group by member_id
				)as c ON a.member_id = c.member_id (+)
			   join 
			   (
				select data_cnt as likeCount ,writer from 
					(select NVL(count(likeInfo.data_id),0) as data_cnt , NVL(galleryList.writer,#{member_id}) as writer
						from SRV_DT_EDU_GALLERYLIST as galleryList ,SRV_DT_EDU_GALLERYLIKEINFO as likeInfo
						where writer = #{member_id} and galleryList.data_id = likeInfo.data_id(+)
						group by writer
					) 
					
			   ) as d ON a.member_id = d.writer (+)
			   
			   join
			   (
				select NVL(count(*),0) as writeCount , NVL(writer,#{member_id}) as writer
					from srv_dt_EDU_GALLERYlist
					where writer = #{member_id}
					
					
					<!-- mng_s 20210729 srv_type은 공개여부인데 1,2이면 공개 3,4이면 비공개 인것 같다. 에듀에서는 이런 개념 없으므로 srv_type은 주석처리한다.
					and srv_type='3' or srv_type='4'
					-->
					
					
					group by writer
			   )as e ON a.member_id = e.writer(+)
			   
	</select>
	
	<select id="selectAllCountWriteCount"  parameterType="hashmap" resultType="java.lang.Integer">
			select NVL(count(*),0) as writeCount
                from srv_dt_EDU_GALLERYlist
                where writer = #{member_id} <!-- AND (srv_type='1' or srv_type='2') --> <!-- 2017.03.28 비공개 카운트 제거 --> 
	</select>
	
	<select id="selectAllCountCollectCount"  parameterType="hashmap" resultType="java.lang.Integer">
			select NVL(count(*),0) as collectCount 
				from SRV_DT_EDU_GALLERYCOLLECTLIST 
				where member_id =  #{member_id}
	</select>
	
	<select id="selectAllCountLikeCount"  parameterType="hashmap" resultType="java.lang.Integer">
			select NVL(count(likeInfo.data_id),0) as likeCount
				from SRV_DT_EDU_GALLERYLIST as galleryList ,SRV_DT_EDU_GALLERYLIKEINFO as likeInfo
				where writer = #{member_id} and galleryList.data_id = likeInfo.data_id(+)
	</select>
	
	<select id="selectAllTempWriteCount"  parameterType="hashmap" resultType="java.lang.Integer">
			select NVL(count(*),0) as writeCount
					from srv_dt_EDU_GALLERYlist
					where writer = #{member_id}
					
					<!-- mng_s 20210729 srv_type은 공개여부인데 1,2이면 공개 3,4이면 비공개 인것 같다. 에듀에서는 이런 개념 없으므로 srv_type은 주석처리한다.
					and (srv_type='3' or srv_type='4')
					-->
	</select>
	
	<!-- 댓글의 비밀번호 일치여부 조회 -->
	<select id="selectGalleryReplyPwd"  parameterType="hashmap" resultType="java.lang.Integer">
			select NVL(count(*),0) as replyPwdCount
					from SRV_DT_EDUTCHPGM
					where tchpgm_seq = #{data_id} and pswd = #{replyPwd}
	</select>
	
	<!-- 댓글의 닉네임 일치여부 조회 -->
	<select id="selectGalleryReplyNick"  parameterType="hashmap" resultType="java.lang.Integer">
			select NVL(count(*),0) as replyNickCount
					from SRV_DT_EDUTCHPGM_REPLY
					where tchpgm_seq = #{data_id} and reply_seq = #{replyOrder} and reply_reg_id = #{del_reply_nick}
	</select>
	
	
	<!--  갤러리 업데이트 -->
	<update id="updateGalleryList" parameterType="hashmap">
		update SRV_DT_EDUTCHPGM 
			set 
			tchpgm_title = #{title}
			,tchpgm_cn = #{content}
			,pswd = #{teach_pwd}
			, open_yn = #{open_yn}
			,mod_ts = sysdate
			where tchpgm_seq = #{data_id}
	</update>
	
	<delete id="deleteGalleryTag" parameterType="hashmap">
		DELETE 
		FROM SRV_DT_EDUTCHPGM_HASHTAG 
		WHERE tchpgm_seq = #{data_id}
	</delete>
	
	<!-- 설문조사 수정 -->
	<update id="updateGalleryPoll" parameterType="hashmap">
		update SRV_DT_EDU_GALLERYPOLL set
			survey_title = #{survey_title},
			survey_type = #{survey_type}
		where data_id = #{data_id} and survey_surv_id=#{survey_surv_id}
				
					
	</update>
	<!-- 설문조사 상세 수정 -->
	<update id="updateGalleryPollDetail" parameterType="hashmap">
		update SRV_DT_EDU_GALLERYPOLLDETAIL set ans_content = #{ans_content} 
		where data_id = #{data_id} and survey_surv_id = #{survey_surv_id} 
		and ans_serial = #{ans_serial} 
	 
	</update> 
	
	<!-- 이미지 리스트 수정 -->
	<update id="updateGalleryImgList" parameterType="hashmap">
		update SRV_DT_EDU_GALLERYIMGLIST set api_call_URL = #{api_call_URL} , param_info = #{param_info}
		where data_id = #{data_id} and img_id = #{img_id} 
	</update>
	
	<!-- 이미지 아이콘 리스트 수정 -->
	<update id="updateGalleryImgIconList" parameterType="hashmap">
	</update>

	<!-- 통계갤러리 histID 삭제 -->
	<delete id="deleteGalleryHist" parameterType="hashmap">
		DELETE 
		FROM srv_dt_statsearchhist 
		WHERE member_id=#{member_id} and hist_type=#{hist_type} and hist_id=#{hist_id};
	</delete>
	
		<!-- 통계히스토리 파라미터정보 삭제 -->
	<delete id="deleteStatistcsHistoryParamInfo"  parameterType="hashmap">
		DELETE	 	
		FROM     	srv_dt_stathistparaminfo
		WHERE	 	hist_id = #{hist_id};
	</delete>
	
	<update id="updateGalleryHit" parameterType="String">
		update SRV_DT_EDUTCHPGM set hits = hits +1 
		where tchpgm_seq=#{data_id}
	</update>
	
	<!-- 유저이름 가져오기 -->
	<select id="getMemberNm" parameterType="hashmap" resultType="hashmap">
		select * from srv_dt_memberinfo where member_id = #{member_id}
	</select>
	
	<!-- 답변 업데이트 -->
	<update id = "updateReply" parameterType="hashmap">
		update SRV_DT_EDU_GALLERYREPLY set reply_content = #{reply_content} where data_id = #{data_id} and reply_order = #{reply_order}
	</update>

	<!-- 자동화 공격 방지 -->
	<select id="defenceAutometicAttack" parameterType="hashmap" resultType="String">
		select top 1 
			<![CDATA[		
			case when a.reg_ts > sysdate - 60/24/60/60  then 'N'
				 when a.reg_ts < sysdate - 60/24/60/60  then 'Y' end as flag
			]]>
		from SRV_DT_EDUTCHPGM a
		where 
			member_id = #{usr_id}
		order by a.reg_ts desc 
	</select>
</mapper>