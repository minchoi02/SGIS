(function(W, D){
	W.$more3DashDetail = W.$more3DashDetail || {};
	
	$(document).ready(function(){
	});
	$(window).load(function(){
	});
	
	$more3DashDetail.ui = { // 3 : $more3DashDetail.ui.init();
		init : function(){
			console.log(gv_url+" : ===임금근로 일자리동향===");
			$administStatsMain.ui.appendContent("/view/administStatsDetail/more3Dash/main");
			setTimeout(function(){
				$more3DashDetail.ui.ready();
			},500);
		},
		ready : function(){
			$more3DashDetail.ui.more3Api();
			setTimeout(function(){
				$administStatsMain.ui.loading(false);
			},1000);
		},
		more3Api : function() {
			let proxy = "/view/totSurv/proxy?";
			var parameter ={
				 method:"getList"
				,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc="
				,vwCd:"MT_OTITLE"
				,parentListId:"101_003"
				,format:"json"
				,jsonVD:"Y"
			}
			$.ajax({
				url: proxy+"https://kosis.kr/openapi/statisticsList.do?",
				type: 'get',
				data: parameter,
				dataType: "json"
			}).done(function(result){
				itemInfo = result;
				var list1 = document.getElementById('list1');
				var il1=0;
				for(var i=0;i<itemInfo.length;i++){
					let tblNm = "";
					if(itemInfo[i].TBL_NM.length > 18){
						tblNm = itemInfo[i].TBL_NM.substring(0, 18) + "...";
					} else {
						tblNm = itemInfo[i].TBL_NM;
					}
					var stattb_url = "https://kosis.kr/statHtml/statHtml.do?orgId=101&tblId=" + itemInfo[i].TBL_ID + "&conn_path=I2";
					list1.innerHTML += '<li data-org_id="' + itemInfo[i].ORG_ID + '" data-tbl_id="' + itemInfo[i].TBL_ID +	'" data-tbl_nm="' + itemInfo[i].TBL_NM + '">' +
									   '<a class="searchmenua" style="width: 240px;" href="javascript:void(0);" title="' + itemInfo[i].TBL_NM + '">' + tblNm + 
									   '</a><a onclick="javascript:openPop1('+"'"+stattb_url+"'"+')" class="link-kosis link-btn" title="새창열림">KOSIS' + tblNm + '</a></li>';
					il1++;
				}
				$(".con").css({'display': 'block'});
				$("#list1").css({'overflow-y':'auto', 'overflow-x':'hidden'}).css('height', 41*il1+'px');
				
				for(var i=0;i<$("a.searchmenua").length;i++){
					$("a.searchmenua:eq(" + i + ")").attr("onclick", "javascript:$more3DashDetail.ui.openApiSearch3(this);");
				}
				
				setTimeout(function(){
					$("a.searchmenua:eq(0)").click();
				},500);
			});
		},
		openApiSearch3 : function(li) {
			for(var i=0;i<$("a.searchmenua").length;i++){
				if($("a.searchmenua:eq(" + i + ")").css("color") == "#1772a9"){
					$("a.searchmenua:eq(" + i + ")").css("color", "#666666");
					$("a.searchmenua:eq(" + i + ")").css('font-weight', 400);
				}
			}
			$(li).parent().find('a:eq(0)').css('color','#1772a9');
			$(li).parent().find('a:eq(0)').css('font-weight', 700);
			$(li).parent().find('a:eq(0)').css('color','#1772a9');
			$(li).parent().find('a:eq(0)').css('font-weight', 700);
			var itmId = '';
			var objL1 = '';
			var objL2 = '';
			var objL3 = '';
			var newEstPrdCnt = '6';
			let tblId = "";
			let startPrdDe = "";
			let endPrdDe = "";
			let param = new Array;
			
			let data1 = new Array;
			/*
			 * let data2 = new Array; let data3 = new Array; let data4 = new
			 * Array; let data5 = new Array; let data6 = new Array; let data7 =
			 * new Array;
			 */
			let dataParam = new Array;
			// var startPrdDe = $('#modalSearchYear').val();
			
			tblId = $(li).parent().data('tbl_id');
			var tblNm = $(li).parent().data('tbl_nm');
			var selectedYear = $("#modalSearchYear option:selected").text();
			if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7006'){
				itmId = 'T00';
				newEstPrdCnt = '20';
			}else if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008' || tblId == 'DT_1FL_7009' || tblId == 'DT_1FL_7010'){
				itmId = 'T1';newEstPrdCnt = '20';
			}
			
			/*
			 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7005'){objL1 =
			 * '00';} else if(tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7006' ||
			 * tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){objL1 =
			 * '00';objL2 = '00';} else if(tblId == 'DT_1FL_7002'){objL1 = 'C';}
			 * else if(tblId == 'DT_1FL_7004'){objL1 = 'C';objL2 = '00';} else
			 * if(tblId == 'DT_1FL_7009' || tblId == 'DT_1FL_7010'){objL1 =
			 * '00';objL2 = '00';objL3 = '00';}
			 */
			
			/*
			 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId ==
			 * 'DT_1FL_7005') { var itmId = 'T00+T02+'; var objL1 = '00'; var
			 * objL2 = ''; var objL3 = ''; var itmId = 'ALL'; var objL1 = 'ALL';
			 * var objL2 = ''; var objL3 = ''; }else if(tblId == 'DT_1FL_7003' ||
			 * tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7006' || tblId ==
			 * 'DT_1FL_7007' || tblId == 'DT_1FL_7008') { var itmId = 'ALL'; var
			 * objL1 = 'ALL'; var objL2 = 'ALL'; var objL3 = ''; }else if(tblId ==
			 * 'DT_1FL_7009' || tblId == 'DT_1FL_7010') { var itmId = 'ALL'; var
			 * objL1 = 'ALL'; var objL2 = 'ALL'; var objL3 = 'ALL'; } if(tblId ==
			 * 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7005' ||
			 * tblId == 'DT_1FL_7006' || tblId == 'DT_1FL_7007') { startPrdDe =
			 * 201701; endPrdDe = 202201; }else if(tblId == 'DT_1FL_7003' ||
			 * tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7008' || tblId ==
			 * 'DT_1FL_7010') { startPrdDe = 2015; endPrdDe = 2020; }
			 */
			
			var valueSuffix1 = '만개';
			var valueSuffix2 = '%';
			var valueSuffix3 = '만개';
			var valueSuffix4 = '만개';
			var valueSuffix5 = '만개';
			var valueSuffix6 = '%';
			if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7006'){valueSuffix1 = '%';}
			if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7006' || tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){valueSuffix2 = '만개';}
			if(tblId == 'DT_1FL_7006'){valueSuffix3 = '%';}
			if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7009'){valueSuffix4 = '%';}
			if(tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7005'){valueSuffix5 = '%';}
			if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7005'){valueSuffix6 = '만개';}
			
			if(tblId == 'DT_1FL_7001') {
				dataParam = ['ALL', '00', '', '', 201701, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2
					dataParam = ['T01', 'ALL', '', '', 202201, 202201, tblId];
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3 5
					dataParam = ['T00', 'ALL', '', '', 202201, 202201, tblId];
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 3) { // 4 6
					dataParam = ['T02', 'ALL', '', '', 202201, 202201, tblId];
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == 'DT_1FL_7002') { // 1 4 //제조업 소분류별 임금근로 일자리 구성비
				dataParam = ['T01', 'ALL', '', '', 202201, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2 5 //제조업 소분류별 임금근로 일자리
					dataParam = ['T00', 'ALL', '', '', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3 6 제조업 소분류별 임금근로 일자리 증감
					dataParam = ['T02', 'ALL', '', '', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == 'DT_1FL_7003') { // 1 일자리형태별 임금근로 일자리 및 구성비
				dataParam = ['T02', '00', 'All', '', 202201, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2 산업대분류별 임금근로 일자리 구성비(총계)
					dataParam = ['T01', 'ALL', 'ALL', '', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3 산업대분류별 일자리형태별 임금근로 일자리 및 구성비
					dataParam = ['T00', 'ALL', 'ALL', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 3) { // 4 산업중분류별 일자리형태별 임금근로 일자리 및 구성비(농업, 임업
										// 및 어업)
					dataParam = ['T00', 'ALL', 'ALL', '', 202201, 202201, tblId];
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == 'DT_1FL_7004') { // 1 제조업 일자리형태별 임금근로 일자리 및 구성비
				dataParam = ['T00', 'C', 'All', '', 202201, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2 제조업 소분류별 임금근로 일자리 구성비(총계)
					dataParam = ['T01', 'ALL', 'ALL', '', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3 5제조업 소분류별 일자리형태별 임금근로 일자리 및 구성비
					dataParam = ['T00', 'ALL', 'ALL', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 3) { // 4 6도소매업 일자리형태별 임금근로 일자리 및 구성비
					dataParam = ['T02', 'G', 'ALL', '', 202201, 202201, tblId];
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == "DT_1FL_7005") { // 1 분기별 임금근로 일자리 및 증감
				dataParam = ['ALL', '00', '', '', 201701, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2 4 6 2021년 4분기 성별 임금근로 일자리 및 구성비
					dataParam = ['T00', 'ALL', '', '', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3 5 7 2021년 4분기 성별 임근근로 일자리 증감
					dataParam = ['T02', 'ALL', '', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == "DT_1FL_7006") { // 1 일자리형태별 임금근로 일자리 수 및 구성비
				dataParam = ['T00', 'ALL', 'ALL', '', 202201, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2 4 6 성별 일자리형태별 임금근로 일자리 수 및 구성비
					dataParam = ['ALL', 'ALL', 'ALL', '', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3 5 7 2021년 4분기 성별 임금근로 일자리 구성비
					dataParam = ['T00', 'ALL', 'ALL', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008") { // 1 일자리형태별 임금근로 일자리 수 및 구성비
				dataParam = ['ALL', '00', '00', '', 201801, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2
					dataParam = ['T1', 'ALL', '00', '', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3
					dataParam = ['T4', 'ALL', '00', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 3) { // 4
					dataParam = ['T1', 'ALL', 'ALL', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 4) { // 5
					dataParam = ['T4', 'ALL', 'ALL', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 5) { // 6
					dataParam = ['T2', 'ALL', 'ALL', '', 202201, 202201, tblId];  
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == "DT_1FL_7009") { // 1
				dataParam = ['ALL', '00', 'ALL', 'ALL', 202201, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2
					dataParam = ['T1', '00', 'ALL', 'ALL', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3
					dataParam = ['ALL', '01', 'ALL', 'ALL', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 3) { // 4
					dataParam = ['T1', '01', 'ALL', 'ALL', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 4) { // 5
					dataParam = ['ALL', '02', 'ALL', 'ALL', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 5) { // 6
					dataParam = ['T1', '02', 'ALL', 'ALL', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}else if(tblId == "DT_1FL_7010") { // 1
				dataParam = ['ALL', '00', 'ALL', 'ALL', 202201, 202201, tblId];
				data1.push($more3DashDetail.util.dataAjax(dataParam));
				if(data1.length == 1) { // 2
					dataParam = ['T1', 'ALL', 'ALL', 'ALL', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 2) { // 3
					dataParam = ['ALL', 'ALL', 'ALL', 'ALL', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
				if(data1.length == 3) { // 4
					dataParam = ['T1', 'ALL', 'ALL', '00', 202201, 202201, tblId]; 
					data1.push($more3DashDetail.util.dataAjax(dataParam));
				}
			}
			$more3DashDetail.chart.dataFictional(data1);
		}
	};
	$more3DashDetail.chart = {
		/**
		 * @name : $more3DashDetail.chart.dataFictional
		 * @description : 차트 데이터 가공
		 * @date : 2022.10.19
		 * @author : 조규환
		 * @history :
		 */
		dataFictional : function(res) {
			$('#chart11').empty();
			$('#chart21').empty();
			$('#chart31').empty();
			$('#chart41').empty();
			$('#chart51').empty();
			$('#chart61').empty();
			$('#chart71').empty();
			let chartData1 = res[0];
			let chartData2 = res[1];
			let chartData3 = res[2];
			let chartData4 = res[3];
			let chartData5 = res[4];
			let chartData6 = res[5];
			let chartData7 = res[6];
			let tblId = chartData1[0].TBL_ID;
			console.log(tblId);
			let selectedYear = $("#modalSearchYear option:selected").text();
			let divisionData1 = new Array;
			let divisionData2 = new Array;
			let divisionData3 = new Array;
			let divisionData4 = new Array;
			let divisionData5 = new Array;
			let divisionData6 = new Array;
			let divisionData7 = new Array;
			let overlapRemove1 = new Array;
			let overlapRemove2 = new Array;
			let overlapRemove3 = new Array;
			let overlapRemove4 = new Array;
			let overlapRemove5 = new Array;
			let overlapRemove6 = new Array;
			let overlapRemove7 = new Array;

			let chartVal1 = new Array;
			let chartVal2 = new Array;
			let chartVal3 = new Array;
			let chartVal4 = new Array;
			let chartVal5 = new Array;
			let chartVal6 = new Array;
			let chartVal7 = new Array;
			
			let seriesyearData1 = new Array;  	// 1번 차트에 들어갈 데이터 배열
			let seriesyearData2 = new Array;  	// 2번 차트에 들어갈 데이터 배열
			let seriesyearData3 = new Array; 	// 3번 차트에 들어갈 데이터 배열
			let seriesyearData4 = new Array; 	// 4번 차트에 들어갈 데이터 배열
			let seriesyearData5 = new Array; 	// 5번 차트에 들어갈 데이터 배열
			let seriesyearData6 = new Array; 	// 6번 차트에 들어갈 데이터 배열
			let seriesyearData7 = new Array; 	// 7번 차트에 들어갈 데이터 배열
			
			let categories1 = new Array;
			let categories2 = new Array;
			let categories3 = new Array;
			let categories4 = new Array;
			let categories5 = new Array;
			let categories6 = new Array;
			let categories7 = new Array;
			
			let legendNm1 = new Array;
			let legendNm2 = new Array;
			let legendNm3 = new Array;
			let legendNm4 = new Array;
			let legendNm5 = new Array;
			let legendNm6 = new Array;
			let legendNm7 = new Array;
			
			let chartType1 = new Array;
			let chartType2 = new Array;
			let chartType3 = new Array;
			let chartType4 = new Array;
			let chartType5 = new Array;
			let chartType6 = new Array;
			let chartType7 = new Array;
			
			let selectNm1 = new Array;
			let selectNm2 = new Array;
			let selectNm2_1 = new Array;
			let selectNm3 = new Array;
			let selectNm4 = new Array;
			let selectNm5 = new Array;
			let selectNm6 = new Array;
			let selectNm7 = new Array;
			
			let selectChartData2 = new Array;
			let selectChartData3 = new Array;
			let selectChartData4 = new Array;
			let selectChartData5 = new Array;
			let selectChartData6 = new Array;
			let selectChartData7 = new Array;
			if(tblId == 'DT_1FL_7001'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 전체 및 산업별(대·중분류) 임금근로 일자리");
				$('#title1').text('분기별 임금근로 일자리 및 증감');
				$('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
				$('#title3').text(selectedYear + ' 산업대분류별 임금근로 일자리');
				$('#title4').text(selectedYear + ' 산업대분류별 임금근로 일자리 증감');
				$('#title5').text(selectedYear + ' 산업중분류별 임금근로 일자리');
				$('#title6').text(selectedYear + ' 산업중분류별 임금근로 일자리 증감');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle6').show();
				$('#chartTitle5').hide();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7002'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 산업별(소분류) 임금근로 일자리_제조업 및 도소매업");
				$('#title1').text(selectedYear + ' 제조업 소분류별 임금근로 일자리 구성비');
				$('#title2').text(selectedYear + ' 제조업 소분류별 임금근로 일자리');
				$('#title3').text(selectedYear + ' 제조업 소분류별 임금근로 일자리 증감');
				$('#title4').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리 구성비');
				$('#title5').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리');
				$('#title6').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리 증감');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle5').hide();
				$('#chartTitle6').show();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7003'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 일자리 형태별 산업별(대·중분류) 임금근로 일자리");
				$('#title1').text(selectedYear + ' 일자리형태별 임금근로 일자리 및 구성비');
				$('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
				$('#title4').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 및 구성비');
				$('#title7').text(selectedYear + ' 산업중분류별 일자리형태별 임금근로 일자리 및 구성비');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').hide();
				$('#chartTitle4').show();
				$('#chartTitle5').hide();
				$('#chartTitle6').hide();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7004'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 일자리 형태별 산업별(소분류) 임금근로 일자리_제조업 및 도소매업");
				$('#title1').text(selectedYear + ' 제조업 일자리형태별 임금근로 일자리 및 구성비');
				$('#title2').text(selectedYear + ' 제조업 소분류별 임금근로 일자리 구성비');
				$('#title3').text(selectedYear + ' 제조업 소분류별 일자리형태별 임금근로 일자리 및 구성비');
				$('#title4').text(selectedYear + ' 도소매업 일자리형태별 임금근로 일자리 및 구성비');
				$('#title5').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리 구성비');
				$('#title6').text(selectedYear + ' 도소매업 소분류별 일자리형태별 임금근로 일자리 및 구성비');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle5').hide();
				$('#chartTitle6').show();
				$('#chartTitle7').show();
				/*$('#tabArea').show();
				$('#tabArea2').show();*/
			} else if(tblId == 'DT_1FL_7005'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 근로자 및 기업특성별 임금근로 일자리");
				$('#title1').text('분기별 임금근로 일자리 및 증감');
				$('#title2').text(selectedYear + ' 성별 임금근로 일자리  및 구성비');
				$('#title3').text(selectedYear + ' 성별 임금근로 일자리 증감');
				$('#title4').text(selectedYear + ' 연령별 임금근로 일자리 및 구성비');
				$('#title5').text(selectedYear + ' 조직형태별 임금근로 일자리 및 구성비');
				$('#title6').text(selectedYear + ' 조직형태별 임금근로 일자리 증감');
				$('#title7').text(selectedYear + ' 연령별 임금근로 일자리 증감');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle5').show();
				$('#chartTitle6').show();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7006'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 근로자 및 기업특성별 일자리 형태별 임금근로 일자리 화면구성");
				$('#title1').text(selectedYear + ' 일자리형태별 임금근로 일자리 수 및 구성비');
				$('#title2').text(selectedYear + ' 성별 일자리형태별 임금근로 일자리 수 및 구성비');
				$('#title3').text(selectedYear + ' 성별 임금근로 일자리 구성비');
				$('#title4').text(selectedYear + ' 연령별 일자리형태별 임금근로 일자리 수 및 구성비');
				$('#title5').text(selectedYear + ' 조직형태별 일자리형태별 임금근로 일자리 수 및 구성비');
				$('#title6').text(selectedYear + ' 조직형태별  임금근로 일자리 구성비');
				$('#title7').text(selectedYear + ' 연령별 임금근로 일자리 구성비');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle5').show();
				$('#chartTitle6').show();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7007'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 성 및 산업대분류별 임금근로 일자리");
				$('#title1').text('분기별 임금근로 일자리 수 및 증감');
				$('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 수');
				$('#title3').text(selectedYear + ' 산업대분류별 임금근로 일자리 증감');
				$('#title4').text(selectedYear + ' 성별 산업대분류별 임금근로 일자리 수');
				$('#title5').text(selectedYear + ' 성별 산업대분류별 임금근로 일자리 증감');
				$('#title6').text(selectedYear + ' 성별 산업분류별 임금근로 일자리 구성비');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle5').hide();
				$('#chartTitle6').show();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7008'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 연령 및 산업대분류별 임금근로 일자리");
				$('#title1').text('분기별 임금근로 일자리 수 및 증감');
				$('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 수');
				$('#title3').text(selectedYear + ' 산업대분류별 임금근로 일자리 증감');
				$('#title4').text(selectedYear + ' 연령별 산업대분류별 임금근로 일자리 수');
				$('#title5').text(selectedYear + ' 연령별 산업대분류별 임금근로 일자리 증감');
				$('#title6').text(selectedYear + ' 연령별 산업분류별 임금근로 일자리 구성비');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle5').hide();
				$('#chartTitle6').show();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7009'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 성 및 산업대분류별 일자리형태별 임금근로 일자리");
				$('#title1').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비');
				$('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
				$('#title3').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비(남자)');
				$('#title4').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비(남자)');
				$('#title5').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비(여자)');
				$('#title6').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비(여자)');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').show();
				$('#chartTitle4').show();
				$('#chartTitle5').hide();
				$('#chartTitle6').show();
				$('#chartTitle7').show();
			} else if(tblId == 'DT_1FL_7010'){
				$('.titleChange3').html("임금근로 일자리동향 <i class='fa fa-angle-right'></i> 연령 및 산업대분류별 일자리형태별 임금근로 일자리");
				$('#title1').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비');
				$('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
				$('#title4').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비');
				$('#title6').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
				$('#chartTitle1').show();
				$('#chartTitle2').show();
				$('#chartTitle3').hide();
				$('#chartTitle4').show();
				$('#chartTitle5').hide();
				$('#chartTitle6').hide();
				$('#chartTitle7').hide();
			}
			$('#chartTitle1').removeClass();
			$('#chartTitle2').removeClass();
			$('#chartTitle3').removeClass();
			$('#chartTitle4').removeClass();
			$('#chartTitle5').removeClass();
			$('#chartTitle6').removeClass();
			$('#chartTitle7').removeClass();
			$('#chartBox4').removeClass();
			$('#chartMain6').removeClass();
			
			
			if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008' || tblId == 'DT_1FL_7009') {
				$('#chartBox4').addClass('item-box flex-width-710 flex-height-500');
				$('#chartMain6').addClass('item-box flex-width-720 flex-height-500');
				$('#chartTitle1').addClass('item flex-width-470 flex-height-280 charttitle');
				$('#chartTitle2').addClass('item flex-width-470 flex-height-280 flex-mgL-10 charttitle');
				$('#chartTitle3').addClass('item flex-width-470 flex-height-280 flex-mgL-10 charttitle');
				$('#chartTitle4').addClass('item flex-width-710 flex-height-500 charttitle');
				$('#chartTitle6').addClass('item flex-width-710 flex-height-245 flex-mgL-10 charttitle');
				$('#chartTitle7').addClass('item flex-width-710 flex-height-245 flex-mgL-10 flex-mgT-10 charttitle');
			}else if(tblId == 'DT_1FL_7003') {
				$('#chartBox4').addClass('item-box flex-width-600 flex-height-500');
				$('#chartMain6').addClass('item-box flex-width-830 flex-height-500');
				$('#chartTitle1').addClass('item flex-width-600 flex-height-280 charttitle');
				$('#chartTitle2').addClass('item flex-width-820 flex-height-280 flex-mgL-10 charttitle');
				$('#chartTitle4').addClass('item flex-width-600 flex-height-500');
				$('#chartTitle7').addClass('item flex-width-820 flex-height-500 flex-mgL-10 charttitle');
			}else if(tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7006') {
				$('#chartBox4').addClass('item-box flex-width-600 flex-height-500');
				$('#chartMain6').addClass('item-box flex-width-830 flex-height-500');
				$('#chartTitle1').addClass('item flex-width-600 flex-height-280 charttitle');
				$('#chartTitle2').addClass('item flex-width-405 flex-height-280 flex-mgL-10 charttitle');
				$('#chartTitle3').addClass('item flex-width-410 flex-height-280 flex-mgL-10 charttitle');
				$('#chartTitle4').addClass('item flex-width-600 flex-height-245 charttitle');
				$('#chartTitle5').addClass('item flex-width-780 flex-height-245 flex-mgT-10 charttitle');
				$('#chartTitle6').addClass('item flex-width-780 flex-height-245 flex-mgL-10 charttitle');
				$('#chartTitle7').addClass('item flex-width-780 flex-height-245 flex-mgL-10 flex-mgT-10 charttitle');
			}else if(tblId == 'DT_1FL_7010') {
				$('#chartBox4').addClass('item-box flex-width-1450 flex-height-500');
				$('#chartTitle1').addClass('item flex-width-600 flex-height-380 charttitle');
				$('#chartTitle2').addClass('item flex-width-820 flex-height-380 flex-mgL-10 charttitle');
				$('#chartTitle4').addClass('item flex-width-1450 flex-height-400');
			}
			
			/*if(tblId == 'DT_1FL_7003'){
				$('#charttitle4').removeClass('flex-height-245');
				$('#charttitle4').addClass('flex-height-500');
				$('#charttitle5').addClass('flex-width-830');
				$('#charttitle2').removeClass('flex-height-245');
				$('#charttitle2').removeClass('flex-mgT-10');
				$('#charttitle2').addClass('flex-height-500');
				$('#chart41').css('height','390px');
				$('#chart61').css('height','390px');
				$('#chart21').css('width','785px');
				$('#chart41').css('width','580px');
				$('#chart41').css('height','435px');
				$('#chart71').css('width','785px');
				$('#chart71').css('height','435px');
				$('#chartTitle1_1').removeClass('flex-width-600');
				$('#chartTitle1_1').addClass('flex-width-780');
				$('#charttitle5').removeClass('flex-width-405'); //2
				$('#charttitle5').addClass('flex-width-225'); //2
				$('#charttitle4').removeClass('flex-width-600');
				$('#charttitle4').addClass('flex-width-780');
			} else if(tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7006'){
				$('#charttitle4').removeClass('flex-height-500');
				$('#charttitle4').addClass('flex-height-245');
				$('#charttitle2').removeClass('flex-height-500');
				$('#charttitle2').addClass('flex-mgT-10');
				$('#charttitle2').addClass('flex-height-245');
				$('#charttitle5').removeClass('flex-width-830');
				$('#chart4').css('height','140px');
				$('#chart6').css('height','140px');
				$('#chart21').css('width','350px');
				$('#chart51').css('height','210px');
				$('#chart41').css('height','450px');
				$('#chart61').css('height','450px');
				$('#chart71').css('height','210px');
				if(tblId == 'DT_1FL_7006') {
					$('#chart41').css('width','570px');
					$('#chart41').css('height','200px');
					$('#chart61').css('width','780px');
					$('#chart61').css('height','200px');
					$('#chart71').css('height','450px');
				}
				$('#chart22').css('width','390px');
				$('#chart23').css('width','390px');
				$('#chart24').css('width','390px');
				$('#chart63').css('height','140px');
				$('#chart65').css('height','140px');
			}else if(tblId == 'DT_1FL_7010') {
				$('#chartTitle1_1').removeClass('flex-height-280');
				$('#chartTitle1_1').addClass('flex-height-350');
				$('#charttitle5').removeClass('flex-height-280');
				$('#charttitle5').addClass('flex-height-350');
				$('#charttitle4').removeClass('flex-height-500');
				$('#charttitle4').addClass('flex-height-450');
			}else {
				$('#charttitle4').removeClass('flex-height-245');
				$('#charttitle4').addClass('flex-height-500');
				$('#chart4').css('height','390px');
				$('#charttitle2').removeClass('flex-height-500');
				$('#charttitle2').addClass('flex-mgT-10');
				$('#charttitle2').addClass('flex-height-245');
				$('#chart6').css('height','140px');
				$('#charttitle5').removeClass('flex-width-830');
				$('#chart21').css('width','350px');
				$('#chart21').css('height','200px');
				$('#chart31').css('width','420px');
				$('#chart31').css('height','240px');
				$('#chart41').css('width','570px');
				$('#chart41').css('height','450px');
				$('#chart61').css('width','780px');
				$('#chart61').css('height','210px');
				$('#chart71').css('width','780px');
				$('#chart71').css('height','210px');
			}
			if(tblId == 'DT_1FL_7002'){
				$('#chart21').css('width','350px');
				$('#chart21').css('height','200px');
				$('#chart31').css('width','420px');
				$('#chart31').css('height','240px');
				$('#chart41').css('width','570px');
				$('#chart41').css('height','450px');
				$('#chart61').css('width','780px');
				$('#chart61').css('height','210px');
				$('#chart71').css('width','780px');
				$('#chart71').css('height','210px');
			}*/
			$('.tabArea1').empty();
			$('.tabArea2').empty();
			$('.tabArea3').empty();
			$('.tabArea4').empty();
			$('.tabArea5').empty();
			$('.tabArea6').empty();
			$('.tabArea7').empty();
			
			// 셀렉트차트 페이지 생성
			if(tblId == "DT_1FL_7001" || tblId == "DT_1FL_7002" || tblId == "DT_1FL_7004" || tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008"|| tblId == "DT_1FL_7009") {
				$('.tabArea1').append("<div class='chartbox'><figure class='highcharts-figure'><div id='chart11' style='width:450px; height:220px; margin:0 auto'></div></figure></div>");
				$('.tabArea2').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart21' style='width:450px; height:210px'></div>" +
									  "</figure></div></div>");
				$('.tabArea3').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart31' style='width:450px; height:240px'></div>" +
									  "</figure></div></div>");
				$('.tabArea4').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart41' style='width:690px; height:450px'></div>" +
									  "</figure></div></div>");
				$('.tabArea6').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart61' style='width:690px; height:210px'></div>" +
									  "</figure></div></div>");
				if(tblId == "DT_1FL_7001" || tblId == "DT_1FL_7002" || tblId == "DT_1FL_7004" || tblId == "DT_1FL_7009") {
					$('.tabArea7').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart71' style='width:690px; height:210px'></div>" +
										  "</figure></div></div>");
				}else if(tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008") {
					$('.tabArea7').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart71' style='width:785px; height:420px'></div>" +
										  "</figure></div></div>");
				}
			}else if(tblId == "DT_1FL_7003") {
				$('.tabArea1').append("<div class='chartbox'><figure class='highcharts-figure'><div id='chart11' style='width:570px; height:230px; margin:0 auto'></div></figure></div>");
				$('.tabArea2').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart21' style='width:785px; height:210px'></div>" +
									  "</figure></div></div>");
				$('.tabArea4').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart41' style='width:570px; height:450px'></div>" +
									  "</figure></div></div>");
				$('.tabArea7').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart71' style='width:785px; height:435px'></div>" +
									  "</figure></div></div>");
			}else if(tblId == "DT_1FL_7005" || tblId == "DT_1FL_7006") {
				let height = "";
				if(tblId == "DT_1FL_7005") {height = 450;}
				else if(tblId == "DT_1FL_7006") {height = 210;}
				$('.tabArea1').append("<div class='chartbox'><figure class='highcharts-figure'><div id='chart11' style='width:570px; height:230px; margin:0 auto'></div></figure></div>");
				$('.tabArea2').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart21' style='width:350px; height:210px'></div>" +
									  "</figure></div></div>");
				$('.tabArea3').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart31' style='width:420px; height:210px'></div>" +
									  "</figure></div></div>");
				$('.tabArea4').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart41' style='width:570px; height:"+height+"px'></div>" +
									  "</figure></div></div>");
				$('.tabArea5').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart51' style='width:570px; height:210px'></div>" +
									  "</figure></div></div>");
				$('.tabArea6').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart61' style='width:785px; height:"+height+"px'></div>" +
									  "</figure></div></div>");
				$('.tabArea7').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart71' style='width:785px; height:210px'></div>" +
									  "</figure></div></div>");
			}else if(tblId == "DT_1FL_7010") {
				$('.tabArea1').append("<div class='chartbox'><figure class='highcharts-figure'><div id='chart11' style='width:570px; height:350px; margin:0 auto'></div></figure></div>");
				$('.tabArea2').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart21' style='width:785px; height:330px'></div>" +
									  "</figure></div></div>");
				$('.tabArea4').append("<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart41' style='width:1400px; height:360px'></div>" +
									  "</figure></div></div>");
			}
			if(tblId == 'DT_1FL_7004'){
				$('#division5').css('width','818px');
			}
			if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){
				$('#chart41').css('width','570px');
				$('#chart41').css('height','450px');
				$('#chart71').css('height','420px');
			}
			console.log(chartData1);
			console.log(chartData2);
			console.log(chartData3);
			console.log(chartData4);
			console.log(chartData5);
			console.log(chartData6);
			
			// let selectedYear = ["2015", "2016", "2017", "2018", "2019",
			// "2020"];
			// $more3DashDetail.util.design(tblId);
			if(tblId == "DT_1FL_7001") {
				let color1 = ['#7CB5EC', '#F15C80'];
				let Industry = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U'];
				chartType1 = {zoomType: 'xy', style:{marginTop:20, marginLeft:5}};
				chartType2 = {renderTo: 'dounutChart',type: 'pie',innerSize: '80%',marginTop: 5,style: {/*fontFamily: 'notoSans'*/}}
				chartType3 = {zoomType: 'xy'};
				chartType4 = {zoomType: 'xy'};
				chartType6 = {zoomType: 'xy'};
				chartType7 = {zoomType: 'xy'};
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].ITM_ID == "T00") {
							// legendNm71.push(chartData1[i].ITM_NM);
							overlapRemove1.push(chartData1[i].PRD_DE);
							divisionData1.push(Number(chartData1[i].DT)); 
						}
						if(chartData1[i].ITM_ID == "T02") {
							divisionData1.push(Number(chartData1[i].DT)); 
						}
					}
					chartVal1 = $more3DashDetail.util.division(divisionData1, 21);
					categories1 = $more3DashDetail.util.overlapRemove(overlapRemove1);
				}
				for(let i=0; i<chartData2.length; i++) {
					if(chartData2[i].C1 == 'A' || chartData2[i].C1 == 'B' || chartData2[i].C1 == 'C' || chartData2[i].C1 == 'D' || chartData2[i].C1 == 'E' || chartData2[i].C1 == 'F' ||
					   chartData2[i].C1 == 'G' || chartData2[i].C1 == 'H' || chartData2[i].C1 == 'I' || chartData2[i].C1 == 'J' || chartData2[i].C1 == 'K' || chartData2[i].C1 == 'L' ||
					   chartData2[i].C1 == 'M' || chartData2[i].C1 == 'N' || chartData2[i].C1 == 'O' || chartData2[i].C1 == 'P' || chartData2[i].C1 == 'Q' || chartData2[i].C1 == 'R' ||
					   chartData2[i].C1 == 'S' || chartData2[i].C1 == 'T' || chartData2[i].C1 == 'U') {
						chartVal2.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]);
						categories2.push(chartData2[i].C1_NM);
					}
				}
				for(let i=0; i<chartData3.length; i++) {
					if(chartData3[i].C1 == 'A' || chartData3[i].C1 == 'B' || chartData3[i].C1 == 'C' || chartData3[i].C1 == 'D' || chartData3[i].C1 == 'E' || chartData3[i].C1 == 'F' ||
					   chartData3[i].C1 == 'G' || chartData3[i].C1 == 'H' || chartData3[i].C1 == 'I' || chartData3[i].C1 == 'J' || chartData3[i].C1 == 'K' || chartData3[i].C1 == 'L' ||
					   chartData3[i].C1 == 'M' || chartData3[i].C1 == 'N' || chartData3[i].C1 == 'O' || chartData3[i].C1 == 'P' || chartData3[i].C1 == 'Q' || chartData3[i].C1 == 'R' ||
					   chartData3[i].C1 == 'S' || chartData3[i].C1 == 'T' || chartData3[i].C1 == 'U') {
						categories3.push(chartData3[i].C1_NM);
						chartVal3.push(Number(chartData3[i].DT));
					}
				}
				for(let i=2; i<=categories3.length; i++) {
					$('.tabArea6').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart6"+i+"' style='width:780px; height:210px'></div>" +
					  "</figure></div></div>");
					$('.tabArea7').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart7"+i+"' style='width:780px; height:210px'></div>" +
					  "</figure></div></div>");
				}
				for(let i=0; i<chartData4.length; i++) {
					if(chartData4[i].C1 == 'A' || chartData4[i].C1 == 'B' || chartData4[i].C1 == 'C' || chartData4[i].C1 == 'D' || chartData4[i].C1 == 'E' || chartData4[i].C1 == 'F' ||
					   chartData4[i].C1 == 'G' || chartData4[i].C1 == 'H' || chartData4[i].C1 == 'I' || chartData4[i].C1 == 'J' || chartData4[i].C1 == 'K' || chartData4[i].C1 == 'L' ||
					   chartData4[i].C1 == 'M' || chartData4[i].C1 == 'N' || chartData4[i].C1 == 'O' || chartData4[i].C1 == 'P' || chartData4[i].C1 == 'Q' || chartData4[i].C1 == 'R' ||
					   chartData4[i].C1 == 'S' || chartData4[i].C1 == 'T' || chartData4[i].C1 == 'U') {
						categories4.push(chartData4[i].C1_NM);
						chartVal4.push(Number(chartData4[i].DT));
						selectNm5.push(chartData4[i].C1_NM);
						selectNm6.push(chartData4[i].C1_NM);
					}
				}
				for(let i=0; i<chartData3.length; i++) {
					if(chartData3[i].C1 == "01" || chartData3[i].C1 == "02" || chartData3[i].C1 == "03") {
						categories6.push(chartData3[i].C1_NM);
						chartVal6.push(Number(chartData3[i].DT));
					}
				}
				for(let i=0; i<chartData4.length; i++) {
					if(chartData4[i].C1 == "01" || chartData4[i].C1 == "02" || chartData4[i].C1 == "03") {
						categories7.push(chartData4[i].C1_NM);
						chartVal7.push(Number(chartData4[i].DT));
					}
				}
				selectChartData6 = chartData3;
				selectChartData7 = chartData4;
				// selectNm1
				seriesyearData1 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal1[0], color: color1[0]},
					{name: '증감 동기대비 증감',type: 'line',data: chartVal1[1], color: color1[1]}
				];
				seriesyearData2 = [{
					innerSize: '80%',
					data: chartVal2,
					color: '#7CB5EC',
					dataLabels: {
						enabled: true,
						format: '{point.percentage:.1f} %',
						align: 'center',
						distance:3,
//						y: -30,
//						x: -40,
						style: {fontSize: '14px'}
					}
				}];
				seriesyearData3 = [
					{name: '임금근로 일자리 수',type: 'column',yAxis: 1,data: chartVal3},
				];
				seriesyearData4 = [
					{name: '임금근로 일자리 증감',type: 'column',yAxis: 1,data: chartVal4},
				];
				seriesyearData6 = [
					{name: '임금근로 일자리 수',type: 'column',yAxis: 1,data: chartVal6},
				];
				seriesyearData7 = [
					{name: '임금근로 일자리 증감',type: 'column',yAxis: 1,data: chartVal7},
				];
				
			}else if(tblId == "DT_1FL_7002") {
				chartType1 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType2 = {zoomType: 'xy'};
				chartType3 = {zoomType: 'xy'};
				chartType4 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType6 = {zoomType: 'xy'};
				chartType7 = {zoomType: 'xy'};
				console.log(chartData1); // 1:구성비, 2:일자리, 3:증감
				for(let i=0; i<85; i++) {
					chartVal1.push([chartData1[i].C1_NM, Number(chartData1[i].DT)]); 
					categories2.push(chartData1[i].C1_NM);
					categories3.push(chartData1[i].C1_NM);
					chartVal2.push(Number(chartData2[i].DT)); 
					chartVal3.push(Number(chartData3[i].DT)); 
				}
				for(let i=85; i<100; i++) {
					chartVal4.push([chartData1[i].C1_NM, Number(chartData1[i].DT)]); 
					categories6.push(chartData1[i].C1_NM);
					categories7.push(chartData1[i].C1_NM);
					chartVal6.push(Number(chartData2[i].DT)); 
					chartVal7.push(Number(chartData3[i].DT)); 
				}
				seriesyearData1 = [{
					innerSize: '60%',
					data: chartVal1,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				seriesyearData2 = [
					{name: '임금근로 일자리 수', type: 'column', yAxis: 1,data: chartVal2},
				];
				seriesyearData3 = [
					{name: '임금근로 일자리 증감', type: 'column', yAxis: 1,data: chartVal3},
				];
				seriesyearData4 = [{
					innerSize: '60%',
					data: chartVal4,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				seriesyearData6 = [
					{name: '임금근로 일자리 수', type: 'column', yAxis: 1,data: chartVal6},
				];
				seriesyearData7 = [
					{name: '임금근로 일자리 증감', type: 'column', yAxis: 1,data: chartVal7},
				];
			}else if(tblId == "DT_1FL_7003") {
				chartType1 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType2 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType4 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType7 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				let colors =  ['#7CB5EC', '#F7A35C', '#F15C80', '#90ED7D', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4', '#FFDA55', '#70658B', 
					 	 '#55CCFF', '#AD46E0', '#906D3B', '#A828A8', '#FFCD28', '#DCAD67', '#FF7E9D', '#48DAD2', '#BB55FF', '#B9E2FA'];
				console.log(chartData4);
				let chartVal4_1 = new Array;
				let chartVal4_2 = new Array;
				let chartVal4_3 = new Array;
				let chartVal4_4 = new Array;
				let chartVal7_1 = new Array;
				let chartVal7_2 = new Array;
				let chartVal7_3 = new Array;
				let chartVal7_4 = new Array;
				let overlapRemove4 = new Array;
				let overlapRemove7 = new Array;
				let legendNm4 = new Array;
				let legendNm7 = new Array;
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].C2 == "10" || chartData1[i].C2 == "20" || chartData1[i].C2 == "30") {
							chartVal1.push([chartData1[i].C2_NM, Number(chartData1[i].DT)]);
						}
					}
				}
				for(let i=0; i<chartData2.length; i++) {
					if(chartData2[i].C1 == 'A' || chartData2[i].C1 == 'B' || chartData2[i].C1 == 'C' || chartData2[i].C1 == 'D' || chartData2[i].C1 == 'E' || chartData2[i].C1 == 'F' ||
					   chartData2[i].C1 == 'G' || chartData2[i].C1 == 'H' || chartData2[i].C1 == 'I' || chartData2[i].C1 == 'J' || chartData2[i].C1 == 'K' || chartData2[i].C1 == 'L' ||
					   chartData2[i].C1 == 'M' || chartData2[i].C1 == 'N' || chartData2[i].C1 == 'O' || chartData2[i].C1 == 'P' || chartData2[i].C1 == 'Q' || chartData2[i].C1 == 'R' ||
					   chartData2[i].C1 == 'S' || chartData2[i].C1 == 'T' || chartData2[i].C1 == 'U') {
						if(chartData2[i].C2 == "00") {
							chartVal2.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]);
							categories2.push(chartData2[i].C1_NM);
						}
					}	
				}
				
				for(let i=0; i<chartData3.length; i++) {
					if(chartData3[i].C1 == 'A' || chartData3[i].C1 == 'B' || chartData3[i].C1 == 'C' || chartData3[i].C1 == 'D' || chartData3[i].C1 == 'E' || chartData3[i].C1 == 'F' ||
					   chartData3[i].C1 == 'G' || chartData3[i].C1 == 'H' || chartData3[i].C1 == 'I' || chartData3[i].C1 == 'J' || chartData3[i].C1 == 'K' || chartData3[i].C1 == 'L' ||
					   chartData3[i].C1 == 'M' || chartData3[i].C1 == 'N' || chartData3[i].C1 == 'O' || chartData3[i].C1 == 'P' || chartData3[i].C1 == 'Q' || chartData3[i].C1 == 'R' ||
					   chartData3[i].C1 == 'S' || chartData3[i].C1 == 'T' || chartData3[i].C1 == 'U') {
						if(chartData3[i].C2 == "10") {
							chartVal4_1.push(Number(chartData3[i].DT));
							overlapRemove4.push(chartData3[i].C1_NM);
							legendNm4.push(chartData3[i].C2_NM);
						}else if(chartData3[i].C2 == "20") {
							chartVal4_2.push(Number(chartData3[i].DT));
							overlapRemove4.push(chartData3[i].C1_NM);
							legendNm4.push(chartData3[i].C2_NM);
						}else if(chartData3[i].C2 == "30") {
							chartVal4_3.push(Number(chartData3[i].DT));
							overlapRemove4.push(chartData3[i].C1_NM);
							legendNm4.push(chartData3[i].C2_NM);
						}else if(chartData3[i].C2 == "40") {
							chartVal4_4.push(Number(chartData3[i].DT));
							overlapRemove4.push(chartData3[i].C1_NM);
							legendNm4.push(chartData3[i].C2_NM);
						}
					}
				} 
				for(let i=0; i<chartData4.length; i++) {
					if(chartData4[i].C1 == "01" || chartData4[i].C1 == "02" || chartData4[i].C1 == "03") {
						if(chartData4[i].C2 == "10") {
							overlapRemove7.push(chartData4[i].C1_NM);
							chartVal7_1.push(Number(chartData4[i].DT));
							legendNm7.push(chartData4[i].C2_NM);
						}else if(chartData4[i].C2 == "20") {
							overlapRemove7.push(chartData4[i].C1_NM);
							chartVal7_2.push(Number(chartData4[i].DT));
							legendNm7.push(chartData4[i].C2_NM);
						}else if(chartData4[i].C2 == "30") {
							overlapRemove7.push(chartData4[i].C1_NM);
							chartVal7_3.push(Number(chartData4[i].DT));
							legendNm7.push(chartData4[i].C2_NM);
						}else if(chartData4[i].C2 == "40") {
							overlapRemove7.push(chartData4[i].C1_NM);
							chartVal7_4.push(Number(chartData4[i].DT));
							legendNm7.push(chartData4[i].C2_NM);
						}
					}
				}
				for(let i=0; i<chartData2.length; i++) {
					if(chartData2[i].C1 == "00") {
						if(chartData2[i].C2 == "00" || chartData2[i].C2 == "10" || chartData2[i].C2 == "20" || chartData2[i].C2 == "30" || chartData2[i].C2 == "40") {
							selectNm2.push(chartData2[i].C2_NM);
						}
					}
				}
				for(let i=2; i<=selectNm2.length; i++) {
					$('.tabArea2').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart2"+i+"' style='width:780px; height:210px'></div>" +
										  "</figure></div></div>");
				}
				for(let i=2; i<=categories2.length; i++) {
					$('.tabArea7').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart7"+i+"' style='width:780px; height:435px'></div>" +
										  "</figure></div></div>");
				}
				selectChartData2 = chartData2;
				selectChartData7 = chartData4;
				// selectNm7
				chartVal4.push(chartVal4_1, chartVal4_2, chartVal4_3, chartVal4_4);
				chartVal7.push(chartVal7_1, chartVal7_2, chartVal7_3, chartVal7_4);
				categories4 = $more3DashDetail.util.overlapRemove(overlapRemove4);
				categories7 = $more3DashDetail.util.overlapRemove(overlapRemove7);
				selectNm7 = categories4; 
				seriesyearData1 = [{
					innerSize: '60%',
					data: chartVal1,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				seriesyearData2 = [{
					innerSize: '60%',
					data: chartVal2,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				for(let i=0; i<chartVal4.length; i++) {
					seriesyearData4.push({
						name: legendNm4[i],
						data: chartVal4[i],
						// padding:10,
						// 바 상단의 수치값
						dataLabels: {
							allowOverlap: false,
							enabled: false,
							format: '{point.percentage:.1f} %',
							padding: 0, // 이거 하는중
							align: 'center',
							color:'#000',
							style: {
								fontSize:'1px',
								fontWeight:'600',
							},
						},
						color: colors[i],
					});
				}
				for(let i=0; i<chartVal7.length; i++) {
					seriesyearData7.push({
						name: legendNm7[i],
						data: chartVal7[i],
						// padding:10,
						// 바 상단의 수치값
						dataLabels: {
							allowOverlap: false,
							enabled: false,
							format: '{point.percentage:.1f} %',
							padding: 0, // 이거 하는중
							align: 'center',
							color:'#000',
							style: {
								fontSize:'1px',
								fontWeight:'600',
							},
						},
						color: colors[i],
					});
				}
			}else if(tblId == "DT_1FL_7004") {
				chartType1 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType2 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType3 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType4 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType6 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType7 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				let chartVal3_1 = new Array;
				let chartVal3_2 = new Array;
				let chartVal3_3 = new Array;
				let chartVal3_4 = new Array;
				let chartVal7_1 = new Array;
				let chartVal7_2 = new Array;
				let chartVal7_3 = new Array;
				let chartVal7_4 = new Array;
				let legendNm3 = new Array;
				let legendNm7 = new Array;
				console.log(chartData3);
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C2 == "10" || chartData1[i].C2 == "20" || chartData1[i].C2 == "30") {
						chartVal1.push([chartData1[i].C2_NM, Number(chartData1[i].DT)]);
					}
				}
				for(let i=0; i<chartData2.length; i++) {
					for(let j=101; j<340; j++) {
						if(chartData2[i].C1 == j && chartData2[i].C2 == "00") {
							chartVal2.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]); 
						}
					}
					if(chartData2[i].C1 == '101') {
						if(chartData2[i].C2 == "00" || chartData2[i].C2 == "10" || chartData2[i].C2 == "20" || chartData2[i].C2 == "30" || chartData2[i].C2 == "40") {
							selectNm2.push(chartData2[i].C2_NM); 
							selectNm6.push(chartData2[i].C2_NM); 
						}
					}
				}
				for(let i=2; i<=selectNm2.length; i++) {
					$('.tabArea2').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart2"+i+"' style='width:350px; height:210px'></div>" +
										  "</figure></div></div>");
					$('.tabArea6').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart6"+i+"' style='width:780px; height:210px'></div>" +
										  "</figure></div></div>");
				}
				console.log(selectNm2);
				for(let i=0; i<425; i++) { // 425
					if(chartData3[i].C2 == "10") {
						chartVal3_1.push(Number(chartData3[i].DT)); 
						categories3.push(chartData3[i].C1_NM);
						legendNm3.push(chartData3[i].C2_NM);
					}else if(chartData3[i].C2 == "20") {
						chartVal3_2.push(Number(chartData3[i].DT));
						legendNm3.push(chartData3[i].C2_NM);
					}else if(chartData3[i].C2 == "30") {
						chartVal3_3.push(Number(chartData3[i].DT));
						legendNm3.push(chartData3[i].C2_NM);
					}else if(chartData3[i].C2 == "40") {
						chartVal3_4.push(Number(chartData3[i].DT));
						legendNm3.push(chartData3[i].C2_NM);
					}
				}
				for(let i=0; i<chartData4.length; i++) {
					if(chartData4[i].C2 == "10" || chartData4[i].C2 == "20" || chartData4[i].C2 == "30") {
						chartVal4.push([chartData4[i].C2_NM, Number(chartData4[i].DT)]);
					}
				}
				for(let i=0; i<chartData2.length; i++) {
					for(let j=450; j<470; j++) {
						if(chartData2[i].C1 == j && chartData2[i].C2 == "00") {
							chartVal5.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]); 
						}
					}
				}
				for(let i=425; i<525; i++) {
					if(chartData3[i].C2 == "10") {
						chartVal7_1.push(Number(chartData3[i].DT)); 
						categories7.push(chartData3[i].C1_NM);
						legendNm7.push(chartData3[i].C2_NM);
					}else if(chartData3[i].C2 == "20") {
						chartVal7_2.push(Number(chartData3[i].DT));
						legendNm7.push(chartData3[i].C2_NM);
					}else if(chartData3[i].C2 == "30") {
						chartVal7_3.push(Number(chartData3[i].DT));
						legendNm7.push(chartData3[i].C2_NM);
					}else if(chartData3[i].C2 == "40") {
						chartVal7_4.push(Number(chartData3[i].DT));
						legendNm7.push(chartData3[i].C2_NM);
					}
				} 
				selectChartData2 = chartData2;
				selectChartData6 = chartData2;
				chartVal3.push(chartVal3_1, chartVal3_2, chartVal3_3, chartVal3_4);
				chartVal7.push(chartVal7_1, chartVal7_2, chartVal7_3, chartVal7_4);
				seriesyearData1 = [{
					innerSize: '60%',
					data: chartVal1,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				seriesyearData2 = [{
					innerSize: '60%',
					data: chartVal2,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				for(let i=0; i<chartVal3.length; i++) {
					seriesyearData3.push({
						name: legendNm3[i],
						data: chartVal3[i],
						// padding:10,
						// 바 상단의 수치값
						dataLabels: {
							allowOverlap: false,
							enabled: false,
							format: '{point.percentage:.1f} %',
							padding: 0, // 이거 하는중
							align: 'center',
							color:'#000',
							style: {
								fontSize:'1px',
								fontWeight:'600',
							},
						},
						color: '#7CB5EC',
					});
				}
				seriesyearData4 = [{
					innerSize: '60%',
					data: chartVal4,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				seriesyearData6 = [{
					innerSize: '60%',
					data: chartVal5,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				for(let i=0; i<chartVal7.length; i++) {
					seriesyearData7.push({
						name: legendNm7[i],
						data: chartVal7[i],
						// padding:10,
						// 바 상단의 수치값
						dataLabels: {
							allowOverlap: false,
							enabled: false,
							format: '{point.percentage:.1f} %',
							padding: 0, // 이거 하는중
							align: 'center',
							color:'#000',
							style: {
								fontSize:'1px',
								fontWeight:'600',
							},
						},
						color: '#7CB5EC',
					});
				}
			}else if(tblId == "DT_1FL_7005") {
				chartType1 = {zoomType: 'xy'};
				chartType2 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType3 = {zoomType: 'xy'};
				chartType4 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType5 = {zoomType: 'xy'};
				chartType6 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType7 = {zoomType: 'xy'};
				console.log(chartData3);
				// 357
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].ITM_ID == "T00") {
							// legendNm1.push(chartData1[i].ITM_NM);
							overlapRemove1.push(chartData1[i].PRD_DE);
							divisionData1.push(Number(chartData1[i].DT)); 
						}
						if(chartData1[i].ITM_ID == "T02") {
							divisionData1.push(Number(chartData1[i].DT)); 
						}
					}
					chartVal1 = $more3DashDetail.util.division(divisionData1, 21);
					categories1 = $more3DashDetail.util.overlapRemove(overlapRemove1);
				}
				for(let i=0; i<chartData2.length; i++) {
					if(chartData2[i].C1 == "1001" || chartData2[i].C1 == "1002") {
						chartVal2.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]);
					}
					if(chartData2[i].C1 == "2001" || chartData2[i].C1 == "2002" || chartData2[i].C1 == "2003" || chartData2[i].C1 == "2004" || chartData2[i].C1 == "2005") {
						chartVal4.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]);
					}
					if(chartData2[i].C1 == "3001" || chartData2[i].C1 == "3002" || chartData2[i].C1 == "3003" || chartData2[i].C1 == "3004") {
						chartVal6.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]);
					}
				}
				for(let i=0; i<chartData3.length; i++) {
					if(chartData3[i].C1 == "1001" || chartData3[i].C1 == "1002") {
						categories3.push(chartData3[i].C1_NM);
						chartVal3.push(Number(chartData3[i].DT));
					}
					if(chartData3[i].C1 == "2001" || chartData3[i].C1 == "2002" || chartData3[i].C1 == "2003" || chartData3[i].C1 == "2004" || chartData3[i].C1 == "2005") {
						categories5.push(chartData3[i].C1_NM);
						chartVal5.push(Number(chartData3[i].DT));
					}
					if(chartData3[i].C1 == "3001" || chartData3[i].C1 == "3002" || chartData3[i].C1 == "3003" || chartData3[i].C1 == "3004") {
						categories7.push(chartData3[i].C1_NM);
						chartVal7.push(Number(chartData3[i].DT));
					}
				}
				
				seriesyearData1 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal1[0]},
					{name: '전년 동기대비 증감',type: 'line',data: chartVal1[1]}
				];
				seriesyearData2 = [{
					innerSize: '60%',
					data: chartVal2,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				seriesyearData3 = [
					{name: '',type: 'column',yAxis: 1,data: chartVal3},
				];
				seriesyearData4 = [{
					innerSize: '60%',
					data: chartVal4,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}]
				seriesyearData5 = [
					{name: '',type: 'column',yAxis: 1,data: chartVal5},
				];;
				seriesyearData6 = [{
					innerSize: '60%',
					data: chartVal6,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				seriesyearData7 = [
					{name: '',type: 'column',yAxis: 1,data: chartVal7},
				];
			}else if(tblId == "DT_1FL_7006") {
				chartType1 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType2 = {zoomType: 'xy'};
				chartType3 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType4 = {zoomType: 'xy'};
				chartType5 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				chartType6 = {zoomType: 'xy'};
				chartType7 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				console.log(chartData3);
				let chartVal2_1 = new Array;
				let chartVal2_2 = new Array;
				let chartVal2_3 = new Array;
				let chartVal2_4 = new Array;
				let chartVal4_1 = new Array;
				let chartVal4_2 = new Array;
				let chartVal4_3 = new Array;
				let chartVal4_4 = new Array;
				let chartVal6_1 = new Array;
				let chartVal6_2 = new Array;
				let chartVal6_3 = new Array;
				let chartVal6_4 = new Array;
				
				let categories2_1 = new Array;
				let categories2_2 = new Array;
				let categories4_1 = new Array;
				let categories4_2 = new Array;
				let categories6_1 = new Array;
				let categories6_2 = new Array;
				let overlapRemove2 = new Array;
				legendNm2 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				legendNm4 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				legendNm6 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].C2 == "10" || chartData1[i].C2 == "20") {}
						chartVal1.push([chartData1[i].C2_NM, Number(chartData1[i].DT)]);
					}
				}
				for(let i=0; i<chartData2.length; i++) { // 2, 4, 6
					if(chartData2[i].C1 == "1001" || chartData2[i].C1 == "1002") {
						if(chartData2[i].ITM_ID == "T00" && chartData2[i].C2 == "10") {
							overlapRemove2.push(chartData2[i].C1_NM);
							chartVal2_1.push(Number(chartData2[i].DT));
						}
						if(chartData2[i].ITM_ID == "T00" && chartData2[i].C2 == "20") {chartVal2_2.push(Number(chartData2[i].DT));}
						if(chartData2[i].ITM_ID == "T02" && chartData2[i].C2 == "10") {chartVal2_3.push(Number(chartData2[i].DT));}
						if(chartData2[i].ITM_ID == "T02" && chartData2[i].C2 == "20") {chartVal2_4.push(Number(chartData2[i].DT));}
					}
					if(chartData2[i].C1 == "2001" || chartData2[i].C1 == "2002" || chartData2[i].C1 == "2003" || chartData2[i].C1 == "2004" || chartData2[i].C1 == "2005") {
						if(chartData2[i].ITM_ID == "T00" && chartData2[i].C2 == "10") {
							overlapRemove4.push(chartData2[i].C1_NM);
							chartVal4_1.push(Number(chartData2[i].DT));
						}
						if(chartData2[i].ITM_ID == "T00" && chartData2[i].C2 == "20") {chartVal4_2.push(Number(chartData2[i].DT));}
						if(chartData2[i].ITM_ID == "T02" && chartData2[i].C2 == "10") {chartVal4_3.push(Number(chartData2[i].DT));}
						if(chartData2[i].ITM_ID == "T02" && chartData2[i].C2 == "20") {chartVal4_4.push(Number(chartData2[i].DT));}
					}
					if(chartData2[i].C1 == "3001" || chartData2[i].C1 == "3002" || chartData2[i].C1 == "3003" || chartData2[i].C1 == "3004") {
						if(chartData2[i].ITM_ID == "T00" && chartData2[i].C2 == "10") {
							overlapRemove6.push(chartData2[i].C1_NM);
							chartVal6_1.push(Number(chartData2[i].DT));
						}
						if(chartData2[i].ITM_ID == "T00" && chartData2[i].C2 == "20") {chartVal6_2.push(Number(chartData2[i].DT));}
						if(chartData2[i].ITM_ID == "T02" && chartData2[i].C2 == "10") {chartVal6_3.push(Number(chartData2[i].DT));}
						if(chartData2[i].ITM_ID == "T02" && chartData2[i].C2 == "20") {chartVal6_4.push(Number(chartData2[i].DT));}
					}
				}
				for(let i=0; i<chartData3.length; i++) { // 3, 5, 7
					if(chartData3[i].C2 == "00") {
						if(chartData3[i].C1 == "1001" || chartData3[i].C1 == "1002") {
							chartVal3.push([chartData3[i].C1_NM, Number(chartData3[i].DT)]);
						}
						if(chartData3[i].C1 == "2001" || chartData3[i].C1 == "2002" || chartData3[i].C1 == "2003" || chartData3[i].C1 == "2004" || chartData3[i].C1 == "2005") {
							chartVal5.push([chartData3[i].C1_NM, Number(chartData3[i].DT)]);
						}
						if(chartData3[i].C1 == "3001" || chartData3[i].C1 == "3002" || chartData3[i].C1 == "3003" || chartData3[i].C1 == "3004") {
							chartVal7.push([chartData3[i].C1_NM, Number(chartData3[i].DT)]);
						}
					}
					if(chartData3[i].C1 == "00") {
						if(chartData3[i].C2 == "00" || chartData3[i].C2 == "10" || chartData3[i].C2 == "20") {
							selectNm3.push(chartData3[i].C2_NM);
							selectNm5.push(chartData3[i].C2_NM);
							selectNm7.push(chartData3[i].C2_NM);
						}
					}
				}
				selectChartData3 = chartData3;
				selectChartData5 = chartData3;
				selectChartData7 = chartData3;
				for(let i=2; i<=selectNm3.length; i++) {
					$('.tabArea3').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart3"+i+"' style='width:420px; height:210px'></div>" +
										  "</figure></div></div>");
					$('.tabArea5').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart5"+i+"' style='width:570px; height:210px'></div>" +
										  "</figure></div></div>");
					$('.tabArea7').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart7"+i+"' style='width:785px; height:210px'></div>" +
										  "</figure></div></div>");
				}
				categories2 = $more3DashDetail.util.overlapRemove(overlapRemove2);
				categories4 = $more3DashDetail.util.overlapRemove(overlapRemove4);
				categories6 = $more3DashDetail.util.overlapRemove(overlapRemove6);
				chartVal2.push(chartVal2_1, chartVal2_2, chartVal2_3, chartVal2_4);
				chartVal4.push(chartVal4_1, chartVal4_2, chartVal4_3, chartVal4_4);
				chartVal6.push(chartVal6_1, chartVal6_2, chartVal6_3, chartVal6_4);
				
				seriesyearData1 = [{
					innerSize: '60%',
					data: chartVal1,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				for(let i=0; i<chartVal2.length; i++) {
					seriesyearData2.push({name: legendNm2[i] ,type: 'column',yAxis: 1,data: chartVal2[i]});
				}
				seriesyearData3 = [{
					innerSize: '60%',
					data: chartVal3,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				for(let i=0; i<chartVal4.length; i++) {
					seriesyearData4.push({name: legendNm4[i],type: 'column',yAxis: 1,data: chartVal4[i]});
				}
				seriesyearData5 = [{
					innerSize: '60%',
					data: chartVal5,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
				for(let i=0; i<chartVal6.length; i++) {
					seriesyearData6.push({name: legendNm6[i],type: 'column',yAxis: 1,data: chartVal6[i]});
				}
				seriesyearData7 = [{
					innerSize: '60%',
					data: chartVal7,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
			}else if(tblId == "DT_1FL_7007") {
				chartType1 = {zoomType: 'xy'};
				chartType2 = {zoomType: 'xy'};
				chartType3 = {zoomType: 'xy'};
				chartType4 = {zoomType: 'xy'};
				chartType6 = {zoomType: 'xy'};
				chartType7 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				let Industry = new Array;
				let chartVal4_1 = new Array;
				let chartVal4_2 = new Array;
				let chartVal6_1 = new Array;
				let chartVal6_2 = new Array;
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].ITM_ID == "T1") {
							// legendNm1.push(chartData1[i].ITM_NM);
							overlapRemove1.push(chartData1[i].PRD_DE);
							divisionData1.push(Number(chartData1[i].DT)); 
						}
						if(chartData1[i].ITM_ID == "T4") {
							divisionData1.push(Number(chartData1[i].DT)); 
						}
					}
					chartVal1 = $more3DashDetail.util.division(divisionData1, 17);
					categories1 = $more3DashDetail.util.overlapRemove(overlapRemove1);
				}
				for(let i=1; i<chartData2.length; i++) {
					categories2.push(chartData2[i].C1_NM);
					chartVal2.push(Number(chartData2[i].DT));	
				}
				for(let i=1; i<chartData3.length; i++) {
					categories3.push(chartData3[i].C1_NM);
					chartVal3.push(Number(chartData3[i].DT));	
				}
				for(let i=3; i<chartData4.length; i++) {
					if(chartData4[i].C2 == "01") {
						categories4.push(chartData4[i].C1_NM);
						chartVal4_1.push(Number(chartData4[i].DT));	
					}
					if(chartData4[i].C2 == "02") {
						chartVal4_2.push(Number(chartData4[i].DT));	
					}
				}
				for(let i=3; i<chartData5.length; i++) {
					if(chartData5[i].C2 == "01") {
						categories6.push(chartData5[i].C1_NM);
						chartVal6_1.push(Number(chartData5[i].DT));	
					}
					if(chartData5[i].C2 == "02") {
						chartVal6_2.push(Number(chartData5[i].DT));	
					}
				}
				selectNm7.push('총계');
				for(let i=1; i<chartData6.length; i++) {
					if(chartData6[i].C2 == "00") {
						chartVal7.push([chartData6[i].C1_NM, Number(chartData6[i].DT)]);	
					}
					if(chartData6[i].C1 == "00") {
						if(chartData6[i].C2 == "00" || chartData6[i].C2 == "01" || chartData6[i].C2 == "02") {
							selectNm7.push(chartData6[i].C2_NM);
						}
					}
				}
				for(let i=2; i<=selectNm7.length; i++) {
					$('.tabArea7').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart7"+i+"' style='width:785px; height:420px'></div>" +
										  "</figure></div></div>");
				}
				console.log(selectNm7);
				chartVal4.push(chartVal4_1, chartVal4_2);
				chartVal6.push(chartVal6_1, chartVal6_2);
				
				selectChartData7 = chartData6;
				
				seriesyearData1 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal1[0]},
					{name: '증감',type: 'line',data: chartVal1[1]}
				];
				seriesyearData2 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal2},
				];
				seriesyearData3 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal3},
				];
				seriesyearData4 = [
					{name: '남자',type: 'column',yAxis: 1,data: chartVal4[0]},
					{name: '여자',type: 'column',yAxis: 1,data: chartVal4[1]}
				];
				seriesyearData6 = [
					{name: '남자',type: 'column',yAxis: 1,data: chartVal6[0]},
					{name: '여자',type: 'column',yAxis: 1,data: chartVal6[1]}
				];
				seriesyearData7 = [{
					innerSize: '60%',
					data: chartVal7,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
			}else if(tblId == "DT_1FL_7008") {
				chartType1 = {zoomType: 'xy'};
				chartType2 = {zoomType: 'xy'};
				chartType3 = {zoomType: 'xy'};
				chartType4 = {zoomType: 'xy'};
				chartType6 = {zoomType: 'xy'};
				chartType7 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				let Industry = new Array;
				let chartVal4_1 = new Array;
				let chartVal4_2 = new Array;
				let chartVal6_1 = new Array;
				let chartVal6_2 = new Array;
				console.log(chartData4);
				console.log(chartData5);
				console.log(chartData6);
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].ITM_ID == "T1") {
							// legendNm1.push(chartData1[i].ITM_NM);
							overlapRemove1.push(chartData1[i].PRD_DE);
							divisionData1.push(Number(chartData1[i].DT)); 
						}
						if(chartData1[i].ITM_ID == "T4") {
							divisionData1.push(Number(chartData1[i].DT)); 
						}
					}
					chartVal1 = $more3DashDetail.util.division(divisionData1, 17);
					categories1 = $more3DashDetail.util.overlapRemove(overlapRemove1);
				}
				for(let i=1; i<chartData2.length; i++) {
					categories2.push(chartData2[i].C1_NM);
					chartVal2.push(Number(chartData2[i].DT));	
				}
				for(let i=1; i<chartData3.length; i++) {
					categories3.push(chartData3[i].C1_NM);
					chartVal3.push(Number(chartData3[i].DT));	
				}
				for(let i=3; i<chartData4.length; i++) {
					if(chartData4[i].C2 == "00") {
						categories4.push(chartData4[i].C1_NM);
						chartVal4.push(Number(chartData4[i].DT));	
					}
					
				}
				for(let i=3; i<chartData5.length; i++) {
					if(chartData5[i].C2 == "00") {
						categories6.push(chartData5[i].C1_NM);
						chartVal6.push(Number(chartData5[i].DT));	
					}
				}
				for(let i=1; i<chartData6.length; i++) {
					if(chartData6[i].C2 == "00") {
						chartVal7.push([chartData6[i].C1_NM, Number(chartData6[i].DT)]);	
					}
				}
				for(let i=0; i<chartData4.length; i++) {
					if(chartData4[i].C1 == "00") {
						for(let j=0; j<6; j++) {
							if(chartData4[i].C2 == j) {
								selectNm4.push(chartData4[i].C2_NM);
								selectNm5.push(chartData4[i].C2_NM);
								selectNm6.push(chartData4[i].C2_NM);
							}
						}
					}
				}
				for(let i=2; i<=selectNm4.length; i++) {
					$('.tabArea4').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart4"+i+"' style='width:570px; height:450px'></div>" +
										  "</figure></div></div>");
					$('.tabArea6').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart6"+i+"' style='width:785px; height:210px'></div>" +
										  "</figure></div></div>");
					$('.tabArea7').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart7"+i+"' style='width:785px; height:420px'></div>" +
										  "</figure></div></div>");
				}
				selectChartData4 = chartData4;
				selectChartData6 = chartData5;
				selectChartData7 = chartData6;
				let test = categories3[3].substr(0, 13); // 전기 가스 증기 및 공기 조절
															// 공급업
				console.log(test+"..."); // 전기 가스 증기 및 공기...
				
				seriesyearData1 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal1[0]},
					{name: '증감',type: 'line',data: chartVal1[1]}
				];
				seriesyearData2 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal2},
				];
				seriesyearData3 = [
					{name: '임금근로 일자리',type: 'column',yAxis: 1,data: chartVal3},
				];
				seriesyearData4 = [
					{name: '일자리 수',type: 'column',yAxis: 1,data: chartVal4},
				];
				seriesyearData6 = [
					{name: '증감',type: 'column',yAxis: 1,data: chartVal6},
				];
				seriesyearData7 = [{
					innerSize: '60%',
					data: chartVal7,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
			}else if(tblId == "DT_1FL_7009") { // 123467
				chartType1 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType2 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType3 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType4 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType6 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType7 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				legendNm1 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				legendNm3 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				legendNm6 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				let overlapRemove1 = new Array;
				let overlapRemove3 = new Array;
				let overlapRemove6 = new Array;
				let chartVal1_1 = new Array;
				let chartVal1_2 = new Array;
				let chartVal1_3 = new Array;
				let chartVal1_4 = new Array;
				let chartVal3_1 = new Array;
				let chartVal3_2 = new Array;
				let chartVal3_3 = new Array;
				let chartVal3_4 = new Array;
				let chartVal6_1 = new Array;
				let chartVal6_2 = new Array;
				let chartVal6_3 = new Array;
				let chartVal6_4 = new Array;
				selectNm2 = ['총계', '지속일자리', '신규일자리'];
				selectNm4 = ['총계', '지속일자리', '신규일자리'];
				selectNm7 = ['총계', '지속일자리', '신규일자리'];
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].ITM_ID == "T1" && chartData1[i].C2 != "00" && chartData1[i].C3 == "01") {
							overlapRemove1.push(chartData1[i].C2_NM);
							chartVal1_1.push(Number(chartData1[i].DT));
						}
						if(chartData1[i].ITM_ID == "T1" && chartData1[i].C2 != "00" && chartData1[i].C3 == "02") {chartVal1_2.push(Number(chartData1[i].DT));}
						if(chartData1[i].ITM_ID == "T2" && chartData1[i].C2 != "00" && chartData1[i].C3 == "01") {chartVal1_3.push(Number(chartData1[i].DT));}
						if(chartData1[i].ITM_ID == "T2" && chartData1[i].C2 != "00" && chartData1[i].C3 == "02") {chartVal1_4.push(Number(chartData1[i].DT));}
					}
				}
				for(let i=1; i<chartData2.length; i++) {
					if(chartData2[i].C1 == "00" && chartData2[i].C3 == "00") {
						if(chartData2[i].C2 != "00") {
							chartVal2.push({name: chartData2[i].C2_NM, value: Number(chartData2[i].DT)});
						}
					}
				}
				for(let i=0; i<chartData3.length; i++) {
					if(chartData3[i].C1 == "01") {
						if(chartData3[i].ITM_ID == "T1" && chartData3[i].C2 != "00" && chartData3[i].C3 == "01") {
							overlapRemove3.push(chartData3[i].C2_NM);
							chartVal3_1.push(Number(chartData3[i].DT));
						}
						if(chartData3[i].ITM_ID == "T1" && chartData3[i].C2 != "00" && chartData3[i].C3 == "02") {chartVal3_2.push(Number(chartData3[i].DT));}
						if(chartData3[i].ITM_ID == "T2" && chartData3[i].C2 != "00" && chartData3[i].C3 == "01") {chartVal3_3.push(Number(chartData3[i].DT));}
						if(chartData3[i].ITM_ID == "T2" && chartData3[i].C2 != "00" && chartData3[i].C3 == "02") {chartVal3_4.push(Number(chartData3[i].DT));}
					}
				}
				/*for(let i=1; i<chartData4.length; i++) {
					if(chartData4[i].C1 == "01" && chartData4[i].C2 != "00") {
						if(chartData4[i].C3 == "00" || chartData4[i].C3 == "01" || chartData4[i].C3 == "02") {
							chartVal4.push({name: chartData4[i].C2_NM, value: Number(chartData4[i].DT)});
						}
					}
				}*/
				for(let i=1; i<chartData4.length; i++) {
					if(chartData4[i].C1 == "01" && chartData4[i].C3 == "00") {
						if(chartData4[i].C2 != "00") {
							chartVal4.push({name: chartData4[i].C2_NM, value: Number(chartData4[i].DT)});
						}
					}
				}
				for(let i=0; i<chartData5.length; i++) {
					if(chartData5[i].C1 == "02") {
						if(chartData5[i].ITM_ID == "T1" && chartData5[i].C2 != "00" && chartData5[i].C3 == "01") {
							overlapRemove6.push(chartData5[i].C2_NM);
							chartVal6_1.push(Number(chartData5[i].DT));
						}
						if(chartData5[i].ITM_ID == "T1" && chartData5[i].C2 != "00" && chartData5[i].C3 == "02") {chartVal6_2.push(Number(chartData5[i].DT));}
						if(chartData5[i].ITM_ID == "T2" && chartData5[i].C2 != "00" && chartData5[i].C3 == "01") {chartVal6_3.push(Number(chartData5[i].DT));}
						if(chartData5[i].ITM_ID == "T2" && chartData5[i].C2 != "00" && chartData5[i].C3 == "02") {chartVal6_4.push(Number(chartData5[i].DT));}
					}
				}
				for(let i=1; i<chartData6.length; i++) {
					if(chartData6[i].C1 == "02" && chartData6[i].C3 == "00") {
						if(chartData6[i].C2 != "00") {
							chartVal7.push({name: chartData6[i].C2_NM, value: Number(chartData6[i].DT)});
						}
					}
				}
				for(let i=2; i<=selectNm2.length; i++) {
					$('.tabArea2').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart2"+i+"' style='width:350px; height:210px'></div>" +
										  "</figure></div></div>");
					$('.tabArea4').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart4"+i+"' style='width:570px; height:450px'></div>" +
										  "</figure></div></div>");
					$('.tabArea7').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart7"+i+"' style='width:785px; height:210px'></div>" +
										  "</figure></div></div>");
				}
				selectChartData2 = chartData2;
				selectChartData4 = chartData4;
				selectChartData7 = chartData6;
				categories1 = $more3DashDetail.util.overlapRemove(overlapRemove1);
				categories3 = $more3DashDetail.util.overlapRemove(overlapRemove3);
				categories6 = $more3DashDetail.util.overlapRemove(overlapRemove6);
				chartVal1.push(chartVal1_1, chartVal1_2, chartVal1_3, chartVal1_4);
				chartVal3.push(chartVal3_1, chartVal3_2, chartVal3_3, chartVal3_4);
				chartVal6.push(chartVal6_1, chartVal6_2, chartVal6_3, chartVal6_4);
				for(let i=0; i<chartVal1.length; i++) {
					seriesyearData1.push({name: legendNm1[i] ,type: 'column',yAxis: 1,data: chartVal1[i]});
					seriesyearData3.push({name: legendNm3[i] ,type: 'column',yAxis: 1,data: chartVal3[i]});
					seriesyearData6.push({name: legendNm6[i] ,type: 'column',yAxis: 1,data: chartVal6[i]});
				}
				seriesyearData2.push({ //트리맵 여기
					 type: 'treemap'
					,layoutAlgorithm: 'squarified'
					,allowTraversingTree: true
					,data: chartVal2
				});
				seriesyearData4.push({type: 'treemap',layoutAlgorithm: 'squarified', allowTraversingTree: true, data: chartVal4});
				seriesyearData7.push({type: 'treemap',layoutAlgorithm: 'squarified', allowTraversingTree: true, data: chartVal7});
			}else if(tblId == "DT_1FL_7010") { // 1247
				chartType1 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				chartType4 = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				let overlapRemove1 = new Array;
				let overlapRemove4 = new Array;
				let chartVal1_1 = new Array;
				let chartVal1_2 = new Array;
				let chartVal1_3 = new Array;
				let chartVal1_4 = new Array;
				let chartVal4_1 = new Array;
				let chartVal4_2 = new Array;
				let chartVal4_3 = new Array;
				let chartVal4_4 = new Array;
				legendNm1 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				legendNm4 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
				console.log(chartData1); // 1
				console.log(chartData2); // 2
				console.log(chartData3); // 4
				console.log(chartData4); // 7
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00") {
						if(chartData1[i].ITM_ID == "T1" && chartData1[i].C2 != "00" && chartData1[i].C3 == "01") {
							overlapRemove1.push(chartData1[i].C2_NM);
							chartVal1_1.push(Number(chartData1[i].DT));
						}
						if(chartData1[i].ITM_ID == "T1" && chartData1[i].C2 != "00" && chartData1[i].C3 == "02") {chartVal1_2.push(Number(chartData1[i].DT));}
						if(chartData1[i].ITM_ID == "T2" && chartData1[i].C2 != "00" && chartData1[i].C3 == "01") {chartVal1_3.push(Number(chartData1[i].DT));}
						if(chartData1[i].ITM_ID == "T2" && chartData1[i].C2 != "00" && chartData1[i].C3 == "02") {chartVal1_4.push(Number(chartData1[i].DT));}
					}
				}
				for(let i=1; i<chartData2.length; i++) {
					if(chartData2[i].C1 == "00" && chartData2[i].C2 != "00" && chartData2[i].C3 == "00") {
						chartVal2.push({name: chartData2[i].C2_NM, value: Number(chartData2[i].DT)});
					}
				}
				for(let i=0; i<chartData3.length; i++) {
					if(chartData3[i].C1 == "01") {
						if(chartData3[i].ITM_ID == "T1" && chartData3[i].C2 != "00" && chartData3[i].C3 == "01") {
							overlapRemove4.push(chartData3[i].C2_NM);
							chartVal4_1.push(Number(chartData3[i].DT));
						}
						if(chartData3[i].ITM_ID == "T1" && chartData3[i].C2 != "00" && chartData3[i].C3 == "02") {chartVal4_2.push(Number(chartData3[i].DT));}
						if(chartData3[i].ITM_ID == "T2" && chartData3[i].C2 != "00" && chartData3[i].C3 == "01") {chartVal4_3.push(Number(chartData3[i].DT));}
						if(chartData3[i].ITM_ID == "T2" && chartData3[i].C2 != "00" && chartData3[i].C3 == "02") {chartVal4_4.push(Number(chartData3[i].DT));}
					}
				}
				for(let i=1; i<chartData2.length; i++) {
					if(chartData2[i].C1 == "00" && chartData2[i].C2 != "00" && chartData2[i].C3 == "00") {
						chartVal7.push({name: chartData4[i].C2_NM, value: Number(chartData4[i].DT)});
					}
				}
				
				for(let i=0; i<chartData1.length; i++) {
					if(chartData1[i].C1 == "00" && chartData1[i].C2 == "00" && chartData1[i].ITM_ID == "T1") {
						if(chartData1[i].C3 == "00" || chartData1[i].C3 == "01" || chartData1[i].C3 == "02") {
							selectNm2_1.push(chartData1[i].C3_NM);
						}
					}
				}
				for(let i=0; i<chartData2.length; i++) {
					if(chartData2[i].C1 != "00" && chartData2[i].C2 == "00" && chartData2[i].C3 == "00" ) {
						selectNm2.push(chartData2[i].C1_NM);
					}
				}
				categories1 = $more3DashDetail.util.overlapRemove(overlapRemove1);
				categories4 = $more3DashDetail.util.overlapRemove(overlapRemove4);
				chartVal1.push(chartVal1_1, chartVal1_2, chartVal1_3, chartVal1_4);
				chartVal4.push(chartVal4_1, chartVal4_2, chartVal4_3, chartVal4_4);
				
				for(let i=0; i<chartVal1.length; i++) {
					seriesyearData1.push({name: legendNm1[i] ,type: 'column',yAxis: 1,data: chartVal1[i]});
				}
				for(let i=0; i<chartVal1.length; i++) {
					seriesyearData4.push({name: legendNm4[i] ,type: 'column',yAxis: 1,data: chartVal4[i]});
				}
				seriesyearData2.push({type: 'treemap',layoutAlgorithm: 'squarified',data: chartVal2});
				seriesyearData7.push({type: 'treemap',layoutAlgorithm: 'squarified',data: chartVal7});

				selectChartData2 = chartData2;
				selectChartData4 = chartData3;
				for(let i=2; i<=selectNm2.length; i++) {
					$('.tabArea2').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart2"+i+"' style='width:785px; height:330px'></div>" +
										  "</figure></div></div>");
					$('.tabArea4').append("<div class='tabBox'><div class='chartbox'><figure class='highcharts-figure'><div id='chart4"+i+"' style='width:1400px; height:360px'></div>" +
										  "</figure></div></div>");
				}
			}
			$more3DashDetail.util.selectChart(tblId, selectNm1, selectNm2, selectNm3, selectNm4, selectNm5, selectNm6, selectNm7, selectNm2_1);
			if(tblId == "DT_1FL_7001" || tblId == "DT_1FL_7002" || tblId == "DT_1FL_7004" || tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008" || tblId == "DT_1FL_7009") {
				$more3DashDetail.chart.makeChart1(tblId, chartType1, categories1, seriesyearData1);
				$more3DashDetail.chart.makeChart2(tblId, chartType2, categories2, seriesyearData2);
				$more3DashDetail.chart.makeChart3(tblId, chartType3, categories3, seriesyearData3);
				$more3DashDetail.chart.makeChart4(tblId, chartType4, categories4, seriesyearData4);
				$more3DashDetail.chart.makeChart6(tblId, chartType6, categories6, seriesyearData6);
				$more3DashDetail.chart.makeChart7(tblId, chartType7, categories7, seriesyearData7);
			}else if(tblId == "DT_1FL_7003") {
				$more3DashDetail.chart.makeChart1(tblId, chartType1, categories1, seriesyearData1);
				$more3DashDetail.chart.makeChart2(tblId, chartType2, categories2, seriesyearData2);
				$more3DashDetail.chart.makeChart4(tblId, chartType4, categories4, seriesyearData4);
				$more3DashDetail.chart.makeChart7(tblId, chartType7, categories7, seriesyearData7);
			}else if(tblId == "DT_1FL_7005" || tblId == "DT_1FL_7006") {
				$more3DashDetail.chart.makeChart1(tblId, chartType1, categories1, seriesyearData1);
				$more3DashDetail.chart.makeChart2(tblId, chartType2, categories2, seriesyearData2);
				$more3DashDetail.chart.makeChart3(tblId, chartType3, categories3, seriesyearData3);
				$more3DashDetail.chart.makeChart4(tblId, chartType4, categories4, seriesyearData4);
				$more3DashDetail.chart.makeChart5(tblId, chartType5, categories5, seriesyearData5);
				$more3DashDetail.chart.makeChart6(tblId, chartType6, categories6, seriesyearData6);
				$more3DashDetail.chart.makeChart7(tblId, chartType7, categories7, seriesyearData7);
			}else if(tblId == "DT_1FL_7010") {
				$more3DashDetail.chart.makeChart1(tblId, chartType1, categories1, seriesyearData1);
				$more3DashDetail.chart.makeChart2(tblId, chartType2, categories2, seriesyearData2);
				$more3DashDetail.chart.makeChart4(tblId, chartType4, categories4, seriesyearData4);
			}
			$("select[id=selectChoice2]").change(function(){
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm2 = $("#selectChoice2 option:checked").text(); // value값 가져오기
				let selectChoiceNm2_1 = $("#selectChoice2_1 option:checked").text(); // value값 가져오기
				$('.tabArea2 .tabBox').css("display", "none");
				$('.tabArea2 .tabBox').removeClass("on");
				$('.tabArea2 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea2 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate2(selectChartData2, value, selectChoiceNm2, selectChoiceNm2_1);
			});
			$("select[id=selectChoice2_1]").change(function(){
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm2 = $("#selectChoice2 option:checked").text(); // value값 가져오기
				let selectChoiceNm2_1 = $("#selectChoice2_1 option:checked").text(); // value값 가져오기
				$('.tabArea2 .tabBox').css("display", "none");
				$('.tabArea2 .tabBox').removeClass("on");
				$('.tabArea2 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea2 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate2(selectChartData2, value, selectChoiceNm2, selectChoiceNm2_1);
			});
			$("select[id=selectChoice3]").change(function(){
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm3 = $("#selectChoice3 option:checked").text(); // value값 가져오기
				$('.tabArea3 .tabBox').css("display", "none");
				$('.tabArea3 .tabBox').removeClass("on");
				$('.tabArea3 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea3 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate3(selectChartData3, value, selectChoiceNm3);
			});
			$("select[id=selectChoice4]").change(function(){ // 여기하는중
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm4 = $("#selectChoice4 option:checked").text(); // value값 가져오기
				let selectChoiceNm4_1 = $("#selectChoice4_1 option:checked").text(); // value값 가져오기
				$('.tabArea4 .tabBox').css("display", "none");
				$('.tabArea4 .tabBox').removeClass("on");
				$('.tabArea4 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea4 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate4(selectChartData4, value, selectNm4, selectChoiceNm4, selectChoiceNm4_1);
			});
			$("select[id=selectChoice4_1]").change(function(){ // 여기하는중
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm4 = $("#selectChoice4 option:checked").text(); // value값 가져오기
				let selectChoiceNm4_1 = $("#selectChoice4_1 option:checked").text(); // value값 가져오기
				$('.tabArea4 .tabBox').css("display", "none");
				$('.tabArea4 .tabBox').removeClass("on");
				$('.tabArea4 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea4 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate4(selectChartData4, value, selectNm4, selectChoiceNm4, selectChoiceNm4_1);
			});
			$("select[id=selectChoice5]").change(function(){
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm5 = $("#selectChoice5 option:checked").text(); // value값 가져오기
				$('.tabArea5 .tabBox').css("display", "none");
				$('.tabArea5 .tabBox').removeClass("on");
				$('.tabArea5 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea5 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate5(selectChartData5, value, selectNm5, selectChoiceNm5);
			});
			$("select[id=selectChoice6]").change(function(){
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm6 = $("#selectChoice6 option:checked").text(); // value값 가져오기
				$('.tabArea6 .tabBox').css("display", "none");
				$('.tabArea6 .tabBox').removeClass("on");
				$('.tabArea6 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea6 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate6(selectChartData6, value, selectNm5, selectChoiceNm6);
			});
			$("select[id=selectChoice7]").change(function(){
				let value = $(this).val(); // value값 가져오기
				let selectChoiceNm7 = $("#selectChoice7 option:checked").text(); // value값 가져오기
				$('.tabArea7 .tabBox').css("display", "none");
				$('.tabArea7 .tabBox').removeClass("on");
				$('.tabArea7 .tabBox:eq(' + value + ')').css("display", "block");
				$('.tabArea7 .tabBox:eq(' + value + ')').addClass("on");
				$more3DashDetail.chart.selectChartCreate7(selectChartData7, value, selectNm7, selectChoiceNm7);
			});
		},
		/**
		 * @name : $more3DashDetail.chart.makeChart1
		 * @description : 1번차트 생성
		 * @date : 2022.10.19
		 * @author : 조규환
		 * @history :
		 */
		makeChart1 : function(tblId, chartType1, categories1, seriesyearData1) {
			let charts1;
			if(tblId == "DT_1FL_7001" || tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008' || tblId == 'DT_1FL_7009' || tblId == 'DT_1FL_7010') {
				charts1 = Highcharts.chart('chart11', {
					chart: chartType1,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {
							rotation: 0,
							style: {
								color: '#494949', 
								fontSize: '12px', 
								fontWeight: 'bold',
								textOverflow: "ellipsis",
							}
					},
						categories: categories1
					},
					legend: {
						enabled: true,
						y:-5,
					},
					plotOptions: {
						series: {
							//bar 너비
							pointWidth: 22,
							borderRadius: 5,
							marker: {
								enabled: true,
								lineWidth : 2,
								lineColor: '#F15C80',
								fillColor: '#ffffff',
								//fontFamily: 'Noto Sans KR'
							}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'}
					},
					series: seriesyearData1
				});
			}else if(tblId == 'DT_1FL_7002' || tblId == "DT_1FL_7003" || tblId == "DT_1FL_7004" || tblId == "DT_1FL_7006") {
				charts1 = Highcharts.chart('chart11', {
					chart: chartType1,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories1
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData1
					
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.makeChart2
		 * @description : 2번차트 생성
		 * @date : 2022.10.19
		 * @author : 조규환
		 * @history :
		 */
		makeChart2 : function(tblId, chartType2, categories2, seriesyearData2) {
			Highcharts.setOptions({
				colors: ['#7CB5EC', '#F7A35C', '#F15C80', '#90ED7D', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4', '#FFDA55', '#70658B', 
						 '#55CCFF', '#AD46E0', '#906D3B', '#A828A8', '#FFCD28', '#DCAD67', '#FF7E9D', '#48DAD2', '#BB55FF', '#B9E2FA'],
			});
			if(tblId == "DT_1FL_7001" || tblId == "DT_1FL_7003" || tblId == "DT_1FL_7004" || tblId == "DT_1FL_7005") {
				charts2 = Highcharts.chart('chart21', {
					chart: chartType2,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories2
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true, colors: Highcharts.setOptions.colors}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData2
				});
			}else if(tblId == "DT_1FL_7002" || tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008") {
				charts3 = Highcharts.chart('chart21', {
					chart: chartType2,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories2
					},
					legend: {
						enabled: false,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						// valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData2
				});
			}else if(tblId == "DT_1FL_7006") {
				charts3 = Highcharts.chart('chart21', {
					chart: chartType2,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories2
					},
					legend: {
						enabled: true,
						itemMarginTop: 0,
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						// valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData2
				});
			}else if(tblId == "DT_1FL_7009" || tblId == "DT_1FL_7010") {
				charts21 = Highcharts.chart('chart21', {
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					tooltip:{valueSuffix: ""},
					series: seriesyearData2
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.makeChart3
		 * @description : 3번차트 생성
		 * @date : 2022.10.20
		 * @author : 조규환
		 * @history :
		 */
		makeChart3 : function(tblId, chartType3, categories3, seriesyearData3) {
			let charts3;
			if(tblId == "DT_1FL_7001" || tblId == "DT_1FL_7002" || tblId == "DT_1FL_7005" || tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008" || tblId == "DT_1FL_7009") {
				charts3 = Highcharts.chart('chart31', {
					chart: chartType3,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories3
					},
					legend: {
						enabled: false,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						// valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData3
				});
			}else if(tblId == "DT_1FL_7004") {
				var charts31 = Highcharts.chart('chart31', {
					chart : chartType3, /*
										 * { renderTo: 'horiStackedBar', type:
										 * 'bar',//가로 column 지정은 "column"이 아닌
										 * "bar" style: { fontFamily:
										 * 'notoSans', } },
										 */
					credits: {enabled: false}, // highchart 워터마크 숨김처리
					exporting : { enabled : false },
					title: {
						text: '',
					},
					legend: {
						enabled: true,
						itemMarginBottom: -15,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'12px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						},
					},
					xAxis: {
						categories: categories3,
						labels: {
							style: {
								color: '#494949',
								fontSize:'10px',
								fontWeight: 'bold',
								letterSpacing: '0px',
							},
						},
						lineColor: '#cfcfcf',
						gridLineWidth: 0,
						tickWidth: 0,
						tickColor: '#cfcfcf',
						tickPosition: 'inside'
					},
					yAxis: [{
						// y axis 왼쪽
						title: {
							text: ''
						},
						labels: {
							enabled: false
						},
						// crop: false,
						stackLabels: {
							/*
							 * overflow: 'allow', crop: false,
							 */
							enabled: true,// stacked bar 필수 설정 옵션.
							x:20,
							y:1,
							format: '{total} 만개',
							style: {
								fontSize: '10px',
								fontWeight: '600',
								color:'#000'
							}
						},
						gridLineWidth: 0
					}],
					plotOptions: {
						series: {
							stacking: 'normal',// stacked bar 필수 설정 옵션.(default
												// undefined)
							// bar 너비
							pointWidth: 10,
							borderRadius: 1,
							/*
							 * borderRadiusTopLeft: 8, borderRadiusTopRight: 8
							 */
						},
						dataLabels: {
							enabled: true,
							format: '{y}',
							style: {
								fontSize:'14px',
								fontWeight:'500',
								textOutline:0,
							},
						},
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor :'#000000',
						borderWidth:0,
						shadow: false,
						padding:10,
						style: {
							fontSize :'14px',
							color: '#fff',
							textAlign:'center',
							fontWeight: '600',
						},
						formatter: function() {
							var s = '';
							$.each(this.points, function(i, point) {
								s += point.series.name +': '+ point.y +'만개<br/>';
							});
							return s;
						},
						shared: true
					},
					series: seriesyearData3 
				});
			}else if(tblId == "DT_1FL_7006") {
				charts1 = Highcharts.chart('chart31', {
					chart: chartType3,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories3
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData3
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.makeChart4
		 * @description : 4번차트 생성
		 * @date : 2022.10.20
		 * @author : 조규환
		 * @history :
		 */
		makeChart4 : function(tblId, chartType4, categories4, seriesyearData4) {
			let charts4;
			if(tblId == "DT_1FL_7001") {
				charts4 = Highcharts.chart('chart41', {
					chart: chartType4,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories4
					},
					legend: {
						enabled: false,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '%';
						},
					},
					series: seriesyearData4
				});
			}else if(tblId == "DT_1FL_7002" || tblId == "DT_1FL_7004") {
				charts2 = Highcharts.chart('chart41', {
					chart: chartType4,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories4
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData4
				});
			}else if(tblId == "DT_1FL_7003") {
				var charts41 = Highcharts.chart('chart41', {
					chart : chartType4, /*
										 * { renderTo: 'horiStackedBar', type:
										 * 'bar',//가로 column 지정은 "column"이 아닌
										 * "bar" style: { fontFamily:
										 * 'notoSans', } },
										 */
					credits: {enabled: false}, // highchart 워터마크 숨김처리
					exporting : { enabled : false },
					title: {
						text: '',
					},
					legend: {
						enabled: true,
						itemMarginBottom: -15,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'12px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						},
					},
					xAxis: {
						categories: categories4,
						labels: {
							style: {
								color: '#494949',
								fontSize:'10px',
								fontWeight: 'bold',
								letterSpacing: '0px',
							},
						},
						lineColor: '#cfcfcf',
						gridLineWidth: 0,
						tickWidth: 0,
						tickColor: '#cfcfcf',
						tickPosition: 'inside'
					},
					yAxis: [{
						// y axis 왼쪽
						title: {
							text: ''
						},
						labels: {
							enabled: false
						},
						// crop: false,
						stackLabels: {
							/*
							 * overflow: 'allow', crop: false,
							 */
							enabled: true,// stacked bar 필수 설정 옵션.
							x:20,
							y:1,
							format: '{total} 만개',
							style: {
								fontSize: '10px',
								fontWeight: '600',
								color:'#000'
							}
						},
						gridLineWidth: 0
					}],
					plotOptions: {
						series: {
							stacking: 'normal',// stacked bar 필수 설정 옵션.(default
												// undefined)
							// bar 너비
							pointWidth: 10,
							borderRadius: 1,
							/*
							 * borderRadiusTopLeft: 8, borderRadiusTopRight: 8
							 */
						},
						dataLabels: {
							enabled: true,
							format: '{y}',
							style: {
								fontSize:'14px',
								fontWeight:'500',
								textOutline:0,
							},
						},
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor :'#000000',
						borderWidth:0,
						shadow: false,
						padding:10,
						style: {
							fontSize :'14px',
							color: '#fff',
							textAlign:'center',
							fontWeight: '600',
						},
						formatter: function() {
							var s = '';
							$.each(this.points, function(i, point) {
								s += point.series.name +': '+ point.y +'만개<br/>';
							});
							return s;
						},
						shared: true
					},
					series: seriesyearData4 
				});
			}else if(tblId == "DT_1FL_7005") {
				charts2 = Highcharts.chart('chart41', {
					chart: chartType4,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories4
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						y: -150,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {
							size: '100%',
							showInLegend: true,
							startAngle: -90,
							endAngle: 90,
						}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData4
				});
			}else if(tblId == "DT_1FL_7006") {
				charts3 = Highcharts.chart('chart41', {
					chart: chartType4,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories4
					},
					legend: {
						enabled: true,
						itemMarginTop: -10,
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						// valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData4
				});
			}else if(tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008" || tblId == "DT_1FL_7010") {
				charts4 = Highcharts.chart('chart41', {
					chart: chartType4,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories4
					},
					legend: {
						enabled: true,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '%';
						},
					},
					series: seriesyearData4
				});
			}else if(tblId == "DT_1FL_7009") {
				charts21 = Highcharts.chart('chart41', {
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					tooltip:{valueSuffix: ""},
					series: seriesyearData4
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.makeChart5
		 * @description : 5번차트 생성
		 * @date : 2022.10.20
		 * @author : 조규환
		 * @history :
		 */
		makeChart5 : function(tblId, chartType5, categories5, seriesyearData5) {
			if(tblId == "DT_1FL_7005") {
				charts3 = Highcharts.chart('chart51', {
					chart: chartType5,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories5
					},
					legend: {
						enabled: false,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						// valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData5
				});
			}else if(tblId == "DT_1FL_7006") {
				charts1 = Highcharts.chart('chart51', {
					chart: chartType5,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories5
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData5
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.makeChart6
		 * @description : 6번차트 생성
		 * @date : 2022.10.20
		 * @author : 조규환
		 * @history :
		 */
		makeChart6 : function(tblId, chartType6, categories6, seriesyearData6) {
			let charts6;
			if(tblId == "DT_1FL_7001" || tblId == "DT_1FL_7002") {
				charts6 = Highcharts.chart('chart61', {
					chart: chartType6,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {
						enabled: false,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData6
				});
			}else if(tblId == "DT_1FL_7004") {
				charts6 = Highcharts.chart('chart61', {
					chart: chartType6,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData6
				});
			}else if(tblId == "DT_1FL_7005") {
				charts6 = Highcharts.chart('chart61', {
					chart: chartType6,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						y: -150,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {
							size: '100%',
							showInLegend: true,
							startAngle: -90,
							endAngle: 90,
						}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData6
				});
			}else if(tblId == "DT_1FL_7006") {
				charts3 = Highcharts.chart('chart61', {
					chart: chartType6,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {
						enabled: true,
						itemMarginTop: -10,
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						// valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData6
				});
			}else if(tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008") {
				charts6 = Highcharts.chart('chart61', {
					chart: chartType6,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {
						enabled: true,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData6
				});
			}else if(tblId == "DT_1FL_7009") {
				charts1 = Highcharts.chart('chart61', {
					chart: chartType6,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {enabled: true},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'}
					},
					series: seriesyearData6
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.makeChart7
		 * @description : 7번차트 생성
		 * @date : 2022.10.20
		 * @author : 조규환
		 * @history :
		 */
		makeChart7 : function(tblId, chartType7, categories7, seriesyearData7) {
			let charts7;
			if(tblId == "DT_1FL_7001" || tblId == "DT_1FL_7002" || tblId == "DT_1FL_7005") {
				charts7 = Highcharts.chart('chart71', {
					chart: chartType7,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories7
					},
					legend: {
						enabled: false,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '%';
						},
					},
					series: seriesyearData7
				});
			}else if(tblId == "DT_1FL_7003" || tblId == "DT_1FL_7004") {
				var charts71 = Highcharts.chart('chart71', {
					chart : chartType7,
					credits: {enabled: false}, // highchart 워터마크 숨김처리
					exporting : { enabled : false },
					title: {
						text: '',
					},
					legend: {
						enabled: true,
						itemMarginBottom: -15,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'12px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						},
					},
					xAxis: {
						categories: categories7,
						labels: {
							style: {
								color: '#494949',
								fontSize:'10px',
								fontWeight: 'bold',
								letterSpacing: '0px',
							},
						},
						lineColor: '#cfcfcf',
						gridLineWidth: 0,
						tickWidth: 0,
						tickColor: '#cfcfcf',
						tickPosition: 'inside'
					},
					yAxis: [{
						// y axis 왼쪽
						title: {
							text: ''
						},
						labels: {
							enabled: false
						},
						// crop: false,
						stackLabels: {
							/*
							 * overflow: 'allow', crop: false,
							 */
							enabled: true,// stacked bar 필수 설정 옵션.
							x:20,
							y:1,
							format: '{total} 만개',
							style: {
								fontSize: '10px',
								fontWeight: '600',
								color:'#000'
							}
						},
						gridLineWidth: 0
					}],
					plotOptions: {
						series: {
							stacking: 'normal',// stacked bar 필수 설정 옵션.(default
												// undefined)
							// bar 너비
							pointWidth: 10,
							borderRadius: 1,
							/*
							 * borderRadiusTopLeft: 8, borderRadiusTopRight: 8
							 */
						},
						dataLabels: {
							enabled: true,
							format: '{y}',
							style: {
								fontSize:'14px',
								fontWeight:'500',
								textOutline:0,
							},
						},
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor :'#000000',
						borderWidth:0,
						shadow: false,
						padding:10,
						style: {
							fontSize :'14px',
							color: '#fff',
							textAlign:'center',
							fontWeight: '600',
						},
						formatter: function() {
							var s = '';
							$.each(this.points, function(i, point) {
								s += point.series.name +': '+ point.y +'만개<br/>';
							});
							return s;
						},
						shared: true
					},
					series: seriesyearData7 
				});
			}else if(tblId == "DT_1FL_7006") {
				charts1 = Highcharts.chart('chart71', {
					chart: chartType7,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories7
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData7
				});
			}else if(tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008") {
				charts1 = Highcharts.chart('chart71', {
					chart: chartType7,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories7
					},
					legend: {
						enabled: true,
						width: 100,
						height: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						y: -150,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {
							size: '100%',
							showInLegend: true,
							startAngle: -90,
							endAngle: 90,
						}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData7
				});
			}else if(tblId == "DT_1FL_7009" || tblId == "DT_1FL_7010") {
				charts21 = Highcharts.chart('chart71', {
					credits: {
						enabled: false
					},
					exporting: {
						enabled: false
					},
					title: {
						text: ''
					},
					tooltip:{
						valueSuffix: ""
					},
					series: seriesyearData7
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.selectChartCreate2
		 * @description : 2번 셀렉트 차트 생성
		 * @date : 2022.11.01
		 * @author : 조규환
		 * @history :
		 */
		selectChartCreate2 : function(chartData2, value, selectChoiceNm2, selectChoiceNm2_1) {
			console.log(chartData2);
			console.log(value);
			console.log(selectChoiceNm2);
			console.log(selectChoiceNm2_1);
			chartType2 = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
			let tblId = chartData2[0].TBL_ID;
			console.log(tblId);
			let c1 = "";
			let c2 = "";
			let c3 = "";
			let chartVal2 = new Array;
			let categories2 = new Array;
			let seriesyearData2 = new Array;
			if(value == "0") {
				c2 = "00";
				count = 1;
			}else if(value == "1") {
				c2 = "10";
				count = 2;
			}else if(value == "2") {
				c2 = "20";
				count = 3;
			}else if(value == "3") {
				c2 = "30";
				count = 4;
			}else if(value == "4") {
				c2 = "40";
				count = 5;
			}
			if(tblId == 'DT_1FL_7003') {
				for(let i=0; i<chartData2.length; i++) {
					if(chartData2[i].C1 == 'A' || chartData2[i].C1 == 'B' || chartData2[i].C1 == 'C' || chartData2[i].C1 == 'D' || chartData2[i].C1 == 'E' || chartData2[i].C1 == 'F' ||
							chartData2[i].C1 == 'G' || chartData2[i].C1 == 'H' || chartData2[i].C1 == 'I' || chartData2[i].C1 == 'J' || chartData2[i].C1 == 'K' || chartData2[i].C1 == 'L' ||
							chartData2[i].C1 == 'M' || chartData2[i].C1 == 'N' || chartData2[i].C1 == 'O' || chartData2[i].C1 == 'P' || chartData2[i].C1 == 'Q' || chartData2[i].C1 == 'R' ||
							chartData2[i].C1 == 'S' || chartData2[i].C1 == 'T' || chartData2[i].C1 == 'U') {
						if(chartData2[i].C2 == c2) {
							chartVal2.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]);
							categories2.push(chartData2[i].C1_NM);
						}
					}	
				}
			}else if(tblId == 'DT_1FL_7004') {
				for(let i=0; i<chartData2.length; i++) {
					for(let j=101; j<340; j++) {
						if(chartData2[i].C1 == j && chartData2[i].C2 == c2) {
							chartVal2.push([chartData2[i].C1_NM, Number(chartData2[i].DT)]); 
						}
					}
				}
			}else if(tblId == 'DT_1FL_7009') {
				if(value == "0") {
					c3 = "00";
					count = 1;
				}else if(value == "1") {
					c3 = "01";
					count = 2;
				}else if(value == "2") {
					c3 = "02";
					count = 3;
				}
				for(let i=1; i<chartData2.length; i++) {
					if(chartData2[i].C1 == "00" && chartData2[i].C3 == c3) {
						if(chartData2[i].C2 != "00") {
							chartVal2.push({name: chartData2[i].C2_NM, value: Number(chartData2[i].DT)});
						}
					}
				}
			}else if(tblId == 'DT_1FL_7010') {
				if(selectChoiceNm2 == "20대이하") {
					c1 = '01';
				}else if(selectChoiceNm2 == "30대") {
					c1 = '02';
				}else if(selectChoiceNm2 == "40대") {
					c1 = '03';
				}else if(selectChoiceNm2 == "50대") {
					c1 = '04';
				}else if(selectChoiceNm2 == "60대이상") {
					c1 = '05';
				}
				if(selectChoiceNm2_1 == "총 계") {
					c3 = '00';
				}else if(selectChoiceNm2_1 == "지속") {
					c3 = '01';
				}else if(selectChoiceNm2_1 == "신규채용") {
					c3 = '02';
				}
				
				console.log(c1);
				console.log(c3);
				console.log(selectChoiceNm2);
				console.log(selectChoiceNm2_1);
				for(let i=1; i<chartData2.length; i++) {
					if(chartData2[i].C1 == c1 && chartData2[i].C2 != "00"  && chartData2[i].C3 == c3) {
						chartVal2.push({name: chartData2[i].C2_NM, value: Number(chartData2[i].DT)});
					}
				}
			}
			console.log(chartVal2);
			if(tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004') {
				seriesyearData2 = [{
					innerSize: '60%',
					data: chartVal2,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
			}else if(tblId == 'DT_1FL_7009' || tblId == 'DT_1FL_7010') {
				seriesyearData2.push({type: 'treemap',layoutAlgorithm: 'squarified',data: chartVal2});
			}
			var charts2 = 'chart2' + count;
			if(tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004') {
				charts2 = Highcharts.chart('chart2'+count, {
					chart: chartType2,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories2
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true, colors: Highcharts.setOptions.colors}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData2
				});
			}else if(tblId == 'DT_1FL_7009' || tblId == 'DT_1FL_7010') {
				charts2 = Highcharts.chart('chart2'+count, {
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					tooltip:{valueSuffix: ""},
					series: seriesyearData2
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.selectChartCreate3
		 * @description : 3번 셀렉트 차트 생성
		 * @date : 2022.11.01
		 * @author : 조규환
		 * @history :
		 */
		selectChartCreate3 : function(selectChartData3, value, selectChoiceNm2) {
			console.log(selectChartData3);
			let tblId = selectChartData3[0].TBL_ID;
			let chartType = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
			let chartVal3 = new Array;
			let seriesyearData3 = new Array;
			let c2 = '';
			let count = '';
			if(value == "0") {
				c2 = '00';
				count = 1;
			}else if(value == "1") {
				c2 = '10';
				count = 2;
			}else if(value == "2") {
				c2 = '20';
				count = 3;
			}
			for(let i=0; i<selectChartData3.length; i++) {
				if(selectChartData3[i].C2 == c2) {
					if(selectChartData3[i].C1 == "1001" || selectChartData3[i].C1 == "1002") {
						chartVal3.push([selectChartData3[i].C1_NM, Number(selectChartData3[i].DT)]);
					}
				}
			}
			seriesyearData3 = [{
				innerSize: '60%',
				data: chartVal3,
				dataLabels: {
					enabled: false,
					format: '<span class="d-label">{data.name}</span> : {y}',
					align: 'center',
					y: -30,
					x: -40,
					style: {fontSize: '10px'}
				}
			}];
			
			var charts3 = 'chart3' + count;
			charts3 = Highcharts.chart('chart3'+count, {
				chart: chartType,
				credits: {enabled: false},
				exporting: {enabled: false},
				title: {text: ''},
				subtitle: {text: ''},
				yAxis: {
					title: {text: ''},
					labels: {enabled: false}
				},
				xAxis: {
					labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
					categories: ''
				},
				legend: {
					enabled: true,
					width: 100,
					verticalAlign: 'middle',
					align: 'right',
					itemMarginTop: 0,
					x: 10,
					itemStyle: {
						textOverflow: "ellipsis",
						fontSize :'11px',
						color: '#333333',
						textAlign:'center',
						fontWeight: '600',
						fontFamily: 'Noto Sans KR',	
					},
					itemHoverStyle: {
						color: '#FF0000',
					}
				},
				plotOptions: {
					pie: {size: '100%', showInLegend: true}
				},
				tooltip: {
					useHTML: true,
					borderRadius: 10,
					backgroundColor: '#000000',
					borderWidth: 0,
					valueSuffix: '만개',
					shadow: false,
					padding: 10,
					style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
					formatter: function() {
						return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
					},
				},
				series: seriesyearData3
			});
		},
		/**
		 * @name : $more3DashDetail.chart.selectChartCreate4
		 * @description : 5번 셀렉트 차트 생성
		 * @date : 2022.11.01
		 * @author : 조규환
		 * @history :
		 */
		selectChartCreate4 : function(selectChartData4, value, selectNm4, selectChoiceNm4, selectChoiceNm4_1) {
			console.log(selectChartData4);
			console.log(value);
			console.log(selectNm4);
			console.log(selectChoiceNm4);
			console.log(selectChoiceNm4_1);
			
			let tblId = selectChartData4[0].TBL_ID;
			let chartType = "";
			let categories4 = new Array;
			let chartVal4 = new Array;
			let chartVal4_1 = new Array;
			let chartVal4_2 = new Array;
			let chartVal4_3 = new Array;
			let chartVal4_4 = new Array;
			let seriesyearData4 = new Array;
			let overlapRemove4 = new Array;
			let legendNm4 = new Array;
			let c1 = "";
			let c2 = "";
			let c3 = "";
			let count = "";
			if(tblId == "DT_1FL_7008") {
				if(value == "0") {
					c2 = "00";
					count = 1;
				}else if(value == "1") {
					c2 = "01";
					count = 2;
				}else if(value == "2") {
					c2 = "02";
					count = 3;
				}else if(value == "3") {
					c2 = "03";
					count = 4;
				}else if(value == "4") {
					c2 = "04";
					count = 5;
				}else if(value == "5") {
					c2 = "05";
					count = 6;
				}
			}
			if(tblId == "DT_1FL_7008") {
				chartType = {zoomType: 'xy'};
				for(let i=3; i<selectChartData4.length; i++) {
					if(selectChartData4[i].C2 == c2) {
						categories4.push(selectChartData4[i].C1_NM);
						chartVal4.push(Number(selectChartData4[i].DT));	
					}
				}
				seriesyearData4 = [{name: '일자리 수',type: 'column',yAxis: 1,data: chartVal4}];
			}else if(tblId == "DT_1FL_7009") {
				if(value == "0") {
					c3 = "00";
					count = 1;
				}else if(value == "1") {
					c3 = "01";
					count = 2;
				}else if(value == "2") {
					c3 = "02";
					count = 3;
				}
				for(let i=1; i<selectChartData4.length; i++) {
					if(selectChartData4[i].C1 == "01" && selectChartData4[i].C3 == c3) {
						if(selectChartData4[i].C2 != "00") {
							chartVal4.push({name: selectChartData4[i].C2_NM, value: Number(selectChartData4[i].DT)});
						}
					}
				}
				seriesyearData4.push({type: 'treemap',layoutAlgorithm: 'squarified',data: chartVal4});
			}else if(tblId == 'DT_1FL_7010') {
				if(selectChoiceNm4 == "20대이하") {
					c1 = '01';
					count = 1;
				}else if(selectChoiceNm4 == "30대") {
					c1 = '02';
					count = 2;
				}else if(selectChoiceNm4 == "40대") {
					c1 = '03';
					count = 3;
				}else if(selectChoiceNm4 == "50대") {
					c1 = '04';
					count = 4;
				}else if(selectChoiceNm4 == "60대이상") {
					c1 = '05';
					count = 5;
				}
				if(selectChoiceNm4_1 == "총 계") {
					c3 = '00';
				}else if(selectChoiceNm4_1 == "지속") {
					c3 = '01';
				}else if(selectChoiceNm4_1 == "신규채용") {
					c3 = '02';
				}
				chartType = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				for(let i=0; i<selectChartData4.length; i++) {
					legendNm4 = ['지속일자리', '신규채용일자리', '지속일자리(구성비)', '신규채용일자리(구성비)'];
					if(selectChartData4[i].C1 == c1) {
						if(selectChartData4[i].ITM_ID == "T1" && selectChartData4[i].C2 != "00" && selectChartData4[i].C3 == '01') {
							overlapRemove4.push(selectChartData4[i].C2_NM);
							chartVal4_1.push(Number(selectChartData4[i].DT));
						}
						if(selectChartData4[i].ITM_ID == "T1" && selectChartData4[i].C2 != "00" && selectChartData4[i].C3 == '02') {chartVal4_2.push(Number(selectChartData4[i].DT));}
						if(selectChartData4[i].ITM_ID == "T2" && selectChartData4[i].C2 != "00" && selectChartData4[i].C3 == '01') {chartVal4_3.push(Number(selectChartData4[i].DT));}
						if(selectChartData4[i].ITM_ID == "T2" && selectChartData4[i].C2 != "00" && selectChartData4[i].C3 == '02') {chartVal4_4.push(Number(selectChartData4[i].DT));}
					}
				}
				categories4 = $more3DashDetail.util.overlapRemove(overlapRemove4);
				chartVal4.push(chartVal4_1, chartVal4_2, chartVal4_3, chartVal4_4);
				for(let i=0; i<chartVal4.length; i++) {
					seriesyearData4.push({name: legendNm4[i] ,type: 'column',yAxis: 1,data: chartVal4[i]});
				}
			}
			var charts4 = 'chart4' + count;
			if(tblId == "DT_1FL_7008" || tblId == "DT_1FL_7010") {
				charts4 = Highcharts.chart('chart4'+count, {
					chart: chartType,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories4
					},
					legend: {
						enabled: true,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '%';
						},
					},
					series: seriesyearData4
				});
			}else if(tblId == "DT_1FL_7009") {
				charts4 = Highcharts.chart('chart4'+count, {
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					tooltip:{valueSuffix: ""},
					series: seriesyearData4
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.selectChartCreate5
		 * @description : 5번 셀렉트 차트 생성
		 * @date : 2022.11.01
		 * @author : 조규환
		 * @history :
		 */
		selectChartCreate5 : function(selectChartData5, value, selectNm5, selectChoiceNm5) {
			console.log(selectChartData5);
			let tblId = selectChartData5[0].TBL_ID;
			let chartType = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
			let chartVal5 = new Array;
			let seriesyearData5 = new Array;
			let c2 = '';
			let count = '';
			if(value == "0") {
				c2 = '00';
				count = 1;
			}else if(value == "1") {
				c2 = '10';
				count = 2;
			}else if(value == "2") {
				c2 = '20';
				count = 3;
			}
			if(tblId == "DT_1FL_7006") {
				for(let i=0; i<selectChartData5.length; i++) {
					if(selectChartData5[i].C2 == c2) {
						if(selectChartData5[i].C1 == "2001" || selectChartData5[i].C1 == "2002" || selectChartData5[i].C1 == "2003" || selectChartData5[i].C1 == "2004" || selectChartData5[i].C1 == "2005") {
							chartVal5.push([selectChartData5[i].C1_NM, Number(selectChartData5[i].DT)]);
						}
					}
				}
			}
			if(tblId == "DT_1FL_7006") {
				seriesyearData5 = [{
					innerSize: '60%',
					data: chartVal5,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
			}
			var charts5 = 'chart5' + count;
			if(tblId == "DT_1FL_7006") {
				charts5 = Highcharts.chart('chart5'+count, {
					chart: chartType,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: ''
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData5
				});
			}
			
		},
		/**
		 * @name : $more3DashDetail.chart.selectChartCreate6
		 * @description : 6번 셀렉트 차트 생성
		 * @date : 2022.11.01
		 * @author : 조규환
		 * @history :
		 */
		selectChartCreate6 : function(res, value, selectNm5, selectChoiceNm1) {
			console.log(res);
			console.log(value);
			let chartType = "";
			let tblId = res[0].TBL_ID;
			let categories6 = new Array;
			let chartVal6 = new Array;
			let seriesyearData6 = new Array;
			let count = "";
			let c1 = new Array;
			let c2 = "";
			let legendBoolean = "";
			
			if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7004') {
				if(value == "0") {
					c1 = ['01', '02', '03'];
					c2 = '00';
					count = 1;
				}
				else if(value == "1") {
					c1 = ['05', '06', '07', '08'];
					c2 = '10';
					count = 2;
				}
				else if(value == "2") {
					c1 = ['10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34'];
					c2 = '20';
					count = 3;
				}
				else if(value == "3") {
					c1 = ['35'];
					c2 = '30';
					count = 4;
				}
				else if(value == "4") {
					c1 = ['36', '37', '38', '39'];
					c2 = '40';
					count = 5;
				}
				else if(value == "5") {c1 = ['41', '42']; count = 6;}
				else if(value == "6") {c1 = ['45', '46', '47']; count = 7;}
				else if(value == "7") {c1 = ['49', '50', '51', '52']; count = 8;}
				else if(value == "8") {c1 = ['55', '56']; count = 9;}
				else if(value == "9") {c1 = ['58', '59', '60', '61', '62', '63']; count = 10;}
				else if(value == "10") {c1 = ['64', '65', '66']; count = 11;}
				else if(value == "11") {c1 = ['68']; count = 12;}
				else if(value == "12") {c1 = ['70', '71', '72', '73']; count = 13;}
				else if(value == "13") {c1 = ['74', '75', '76']; count = 14;}
				else if(value == "14") {c1 = ['84']; count = 15;}
				else if(value == "15") {c1 = ['85']; count = 16;}
				else if(value == "16") {c1 = ['86', '87']; count = 17;}
				else if(value == "17") {c1 = ['90', '91']; count = 18;}
				else if(value == "18") {c1 = ['94', '95', '96']; count = 19;}
				else if(value == "19") {c1 = ['97', '98']; count = 20;}
				else if(value == "20") {c1 = ['99']; count = 21;}
			}else if(tblId == 'DT_1FL_7008') {
				if(tblId == "DT_1FL_7008") {
					if(value == "0") {
						c2 = "00";
						count = 1;
					}else if(value == "1") {
						c2 = "01";
						count = 2;
					}else if(value == "2") {
						c2 = "02";
						count = 3;
					}else if(value == "3") {
						c2 = "03";
						count = 4;
					}else if(value == "4") {
						c2 = "04";
						count = 5;
					}else if(value == "5") {
						c2 = "05";
						count = 6;
					}
				}
			}
			
			
			console.log(tblId);
			if(tblId == 'DT_1FL_7001') {
				chartType = {zoomType: 'xy'};
				legendBoolean = "false";
				for(let i=0; i<res.length; i++) {
					for(let j=0; j<=c1.length; j++) {
						if(res[i].C1 == c1[j]) {
							categories6.push(res[i].C1_NM);
							chartVal6.push(Number(res[i].DT));
						}
					}
				}
			}else if(tblId == 'DT_1FL_7004') {
				chartType = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				for(let i=0; i<res.length; i++) {
					for(let j=450; j<470; j++) {
						if(res[i].C1 == j && res[i].C2 == "00") {
							chartVal6.push([res[i].C1_NM, Number(res[i].DT)]); 
						}
					}
				}
			}else if(tblId == 'DT_1FL_7008') {
				chartType = {zoomType: 'xy'};
				legendBoolean = "true";
				for(let i=3; i<res.length; i++) {
					if(res[i].C2 == c2) {
						categories6.push(res[i].C1_NM);
						chartVal6.push(Number(res[i].DT));	
					}
				}
			}
			if(tblId == 'DT_1FL_7001') {
				seriesyearData6 = [
					{name: '임금근로 일자리 수',type: 'column',yAxis: 1,data: chartVal6},
				];
			}else if(tblId == 'DT_1FL_7004') {
				seriesyearData6 = [{
					innerSize: '60%',
					data: chartVal6,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
			}else if(tblId == 'DT_1FL_7008') {
				seriesyearData6 = [
					{name: '증감',type: 'column',yAxis: 1,data: chartVal6},
				];
			}
			console.log(legendBoolean);
			var charts6 = 'chart6' + count;
			if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7008') {
				charts6 = Highcharts.chart('chart6'+count, {
					chart: chartType,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {
						enabled: legendBoolean,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData6
				});
			}else if(tblId == 'DT_1FL_7004') {
				charts6 = Highcharts.chart('chart6'+count, {
					chart: chartType,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories6
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {size: '100%', showInLegend: true}
					},
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData6
				});
			}
		},
		/**
		 * @name : $more3DashDetail.chart.selectChartCreate7
		 * @description : 7번 셀렉트 차트 생성
		 * @date : 2022.11.01
		 * @author : 조규환
		 * @history :
		 */
		selectChartCreate7 : function(res, value, selectNm7, selectChoiceNm7) {
			let tblId = res[0].TBL_ID;
			let categories7 = new Array;
			let chartVal7 = new Array;
			let chartVal7_1 = new Array;
			let chartVal7_2 = new Array;
			let chartVal7_3 = new Array;
			let chartVal7_4 = new Array;
			let seriesyearData7 = new Array;
			let legendNm7 = new Array;
			let chartType = new Array;
			let count = "";
			let c1 = new Array;
			let c2 = new Array;
			let c3 = new Array;
			let overlapRemove7 = new Array;
			let startAngle = "";
			let endAngle = "";
			console.log(res);
			console.log(value);
			console.log(selectNm7);
			console.log(selectChoiceNm7);
			if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7006') {
				if(value == "0") {c1 = ['01', '02', '03']; c2 = '00'; count = 1;}
				else if(value == "1") {c1 = ['05', '06', '07', '08']; c2 = '10'; count = 2;}
				else if(value == "2") {
					c1 = ['10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34'];
					c2 = '20';
					count = 3;
				}
				else if(value == "3") {c1 = ['35']; c2 = '30'; count = 4;}
				else if(value == "4") {c1 = ['36', '37', '38', '39']; c2 = '40'; count = 5;}
				else if(value == "5") {c1 = ['41', '42']; count = 6;}
				else if(value == "6") {c1 = ['45', '46', '47']; count = 7;}
				else if(value == "7") {c1 = ['49', '50', '51', '52']; count = 8;}
				else if(value == "8") {c1 = ['55', '56']; count = 9;}
				else if(value == "9") {c1 = ['58', '59', '60', '61', '62', '63']; count = 10;}
				else if(value == "10") {c1 = ['64', '65', '66']; count = 11;}
				else if(value == "11") {c1 = ['68']; count = 12;}
				else if(value == "12") {c1 = ['70', '71', '72', '73']; count = 13;}
				else if(value == "13") {c1 = ['74', '75', '76']; count = 14;}
				else if(value == "14") {c1 = ['84']; count = 15;}
				else if(value == "15") {c1 = ['85']; count = 16;}
				else if(value == "16") {c1 = ['86', '87']; count = 17;}
				else if(value == "17") {c1 = ['90', '91']; count = 18;}
				else if(value == "18") {c1 = ['94', '95', '96']; count = 19;}
				else if(value == "19") {c1 = ['97', '98']; count = 20;}
				else if(value == "20") {c1 = ['99']; count = 21;}
			}
			if(tblId == 'DT_1FL_7001') {
				chartType = {zoomType: 'xy'};
				for(let i=0; i<res.length; i++) {
					for(let j=0; j<=c1.length; j++) {
						if(res[i].C1 == c1[j]) {
							categories7.push(res[i].C1_NM);
							chartVal7.push(Number(res[i].DT));
						}					
					}
				}
			}else if(tblId == 'DT_1FL_7003') {
				chartType = {renderTo: 'horiStackedBar', type: 'bar', style: {fontFamily: 'notoSans',}};
				for(let i=0; i<res.length; i++) {
					for(let j=0; j<=c1.length; j++) {
						if(res[i].C1 == c1[j]) {
							if(res[i].C2 == "10") {
								overlapRemove7.push(res[i].C1_NM);
								chartVal7_1.push(Number(res[i].DT));
								legendNm7.push(res[i].C2_NM);
							}else if(res[i].C2 == "20") {
								overlapRemove7.push(res[i].C1_NM);
								chartVal7_2.push(Number(res[i].DT));
								legendNm7.push(res[i].C2_NM);
							}else if(res[i].C2 == "30") {
								overlapRemove7.push(res[i].C1_NM);
								chartVal7_3.push(Number(res[i].DT));
								legendNm7.push(res[i].C2_NM);
							}else if(res[i].C2 == "40") {
								overlapRemove7.push(res[i].C1_NM);
								chartVal7_4.push(Number(res[i].DT));
								legendNm7.push(res[i].C2_NM);
							}
						}
					}
				}
			}else if(tblId == 'DT_1FL_7006') {
				startAngle = 0;
				endAngle = 0;
				
				chartType = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				for(let i=0; i<res.length; i++) {
					if(res[i].C2 == c2) {
						if(res[i].C1 == "3001" || res[i].C1 == "3002" || res[i].C1 == "3003" || res[i].C1 == "3004") {
							chartVal7.push([res[i].C1_NM, Number(res[i].DT)]);
						}
					}
				}
			}else if(tblId == 'DT_1FL_7007') {
				startAngle = -90;
				endAngle = 90;
				
				if(value == "0") {
					c2 = '00';
					count = 1;
				}else if(value == "1") {
					c2 = '01';
					count = 2;
				}else if(value == "2") {
					c2 = '02';
					count = 3;
				}
				chartType = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				for(let i=1; i<res.length; i++) {
					if(res[i].C2 == c2) {
						chartVal7.push([res[i].C1_NM, Number(res[i].DT)]);	
					}
				}
			}else if(tblId == 'DT_1FL_7008') {
				startAngle = -90;
				endAngle = 90;
				if(value == "0") {
					c2 = '00';
					count = 1;
				}else if(value == "1") {
					c2 = '01';
					count = 2;
				}else if(value == "2") {
					c2 = '02';
					count = 3;
				}else if(value == "3") {
					c2 = '03';
					count = 4;
				}else if(value == "4") {
					c2 = '04';
					count = 5;
				}else if(value == "5") {
					c2 = '05';
					count = 6;
				}
				chartType = {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}};
				for(let i=1; i<res.length; i++) {
					if(res[i].C2 == c2) {
						chartVal7.push([res[i].C1_NM, Number(res[i].DT)]);	
					}
				}
			}else if(tblId == 'DT_1FL_7009') {
				if(value == "0") {
					c3 = "00";
					count = 1;
				}else if(value == "1") {
					c3 = "01";
					count = 2;
				}else if(value == "2") {
					c3 = "02";
					count = 3;
				}
				for(let i=1; i<res.length; i++) {
					if(res[i].C1 == "02" && res[i].C3 == c3) {
						if(res[i].C2 != "00") {
							chartVal7.push({name: res[i].C2_NM, value: Number(res[i].DT)/*
																						 * ,
																						 * color:
																						 * colors[k]
																						 */});
						}
					}
				}
				seriesyearData7.push({type: 'treemap',layoutAlgorithm: 'squarified',data: chartVal7});
			}
			
			console.log(c2);
			console.log(chartVal7);
			
			if(tblId == 'DT_1FL_7001') {
				seriesyearData7 = [
					{name: '임금근로 일자리 수',type: 'column',yAxis: 1,data: chartVal7},
				];
			}else if(tblId == 'DT_1FL_7003') {
				chartVal7.push(chartVal7_1, chartVal7_2, chartVal7_3, chartVal7_4);
				categories7 = $more3DashDetail.util.overlapRemove(overlapRemove7);
				for(let i=0; i<chartVal7.length; i++) {
					seriesyearData7.push({
						name: legendNm7[i],
						data: chartVal7[i],
						// padding:10,
						// 바 상단의 수치값
						dataLabels: {
							allowOverlap: false,
							enabled: false,
							format: '{point.percentage:.1f} %',
							padding: 0, // 이거 하는중
							align: 'center',
							color:'#000',
							style: {
								fontSize:'1px',
								fontWeight:'600',
							},
						},
						color: "",
					});
				}
			}else if(tblId == "DT_1FL_7006" || tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008") {
				seriesyearData7 = [{
					innerSize: '60%',
					data: chartVal7,
					dataLabels: {
						enabled: false,
						format: '<span class="d-label">{data.name}</span> : {y}',
						align: 'center',
						y: -30,
						x: -40,
						style: {fontSize: '10px'}
					}
				}];
			}
			var charts7 = 'chart7' + count;
			if(tblId == 'DT_1FL_7001') {
				console.log(charts7);
				charts7 = Highcharts.chart('chart7'+count, {
					chart: chartType,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: [{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					},{
						title: {text: ''},
						labels: {enabled: false},
						lineColor: '#E8E8E8'
					}],
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: categories7
					},
					legend: {
						enabled: false,
						itemMarginTop: -10
					},
					plotOptions: {
						series: {
							marker: {enabled: true,lineWidth : 2,lineColor: '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'}
						}
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '%',
						shadow: false,
						padding: 10,
						zIndex: 100,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.x + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData7
				});
			}else if(tblId == 'DT_1FL_7003') {
				var charts7 = Highcharts.chart('chart7'+count, {
					chart : chartType,
					credits: {enabled: false}, // highchart 워터마크 숨김처리
					exporting : { enabled : false },
					title: {
						text: '',
					},
					legend: {
						enabled: true,
						itemMarginBottom: -15,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'12px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						},
					},
					xAxis: {
						categories: categories7,
						labels: {
							style: {
								color: '#494949',
								fontSize:'10px',
								fontWeight: 'bold',
								letterSpacing: '0px',
							},
						},
						lineColor: '#cfcfcf',
						gridLineWidth: 0,
						tickWidth: 0,
						tickColor: '#cfcfcf',
						tickPosition: 'inside'
					},
					yAxis: [{
						// y axis 왼쪽
						title: {
							text: ''
						},
						labels: {
							enabled: false
						},
						// crop: false,
						stackLabels: {
							/*
							 * overflow: 'allow', crop: false,
							 */
							enabled: true,// stacked bar 필수 설정 옵션.
							x:20,
							y:1,
							format: '{total} 만개',
							style: {
								fontSize: '10px',
								fontWeight: '600',
								color:'#000'
							}
						},
						gridLineWidth: 0
					}],
					plotOptions: {
						series: {
							stacking: 'normal',// stacked bar 필수 설정 옵션.(default
												// undefined)
							// bar 너비
							pointWidth: 10,
							borderRadius: 1,
							/*
							 * borderRadiusTopLeft: 8, borderRadiusTopRight: 8
							 */
						},
						dataLabels: {
							enabled: true,
							format: '{y}',
							style: {
								fontSize:'14px',
								fontWeight:'500',
								textOutline:0,
							},
						},
					},
					tooltip: {
						useHTML: true,// 툴팁 포맷을 html로 변경할 경우 true로 지정.(default
										// false)
						borderRadius: 10,
						backgroundColor :'#000000',
						borderWidth:0,
						shadow: false,
						padding:10,
						style: {
							fontSize :'14px',
							color: '#fff',
							textAlign:'center',
							fontWeight: '600',
						},
						formatter: function() {
							var s = '';
							$.each(this.points, function(i, point) {
								s += point.series.name +': '+ point.y +'만개<br/>';
							});
							return s;
						},
						shared: true
					},
					series: seriesyearData7 
				});
			}else if(tblId == 'DT_1FL_7006' || tblId == "DT_1FL_7007" || tblId == "DT_1FL_7008") {
				var charts7 = Highcharts.chart('chart7'+count, {
					chart: chartType,
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					subtitle: {text: ''},
					yAxis: {
						title: {text: ''},
						labels: {enabled: false}
					},
					xAxis: {
						labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
						categories: ""
					},
					legend: {
						enabled: true,
						width: 100,
						verticalAlign: 'middle',
						align: 'right',
						itemMarginTop: 0,
						x: 10,
						itemStyle: {
							textOverflow: "ellipsis",
							fontSize :'11px',
							color: '#333333',
							textAlign:'center',
							fontWeight: '600',
							fontFamily: 'Noto Sans KR',	
						},
						itemHoverStyle: {
							color: '#FF0000',
						}
					},
					plotOptions: {
						pie: {
							size: '100%',
							showInLegend: true,
							startAngle: startAngle,
							endAngle: endAngle,
						}
					},
					
					tooltip: {
						useHTML: true,
						borderRadius: 10,
						backgroundColor: '#000000',
						borderWidth: 0,
						valueSuffix: '만개',
						shadow: false,
						padding: 10,
						style: {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'},
						formatter: function() {
							return '<span style="color:#fff">'  + this.point.name + '</span> : ' + this.y + '만개';
						},
					},
					series: seriesyearData7
				});
			}else if(tblId == 'DT_1FL_7009') {
				var charts7 = Highcharts.chart('chart7'+count, {
					credits: {enabled: false},
					exporting: {enabled: false},
					title: {text: ''},
					tooltip:{valueSuffix: ""},
					series: seriesyearData7
				});
			}
		}
	};
	$more3DashDetail.util = {
		/**
		 * @name : $more3DashDetail.util.dataAjax
		 * @description : ajax 데이터
		 * @date : 2022.10.19
		 * @author : 조규환
		 * @history :
		 */	
		dataAjax : function(dataParam) {
			let proxy = "/view/totSurv/proxy?";
			let res = "";
			let param ={
					 method:"getList"
					,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc="
					,itmId:dataParam[0]
					,objL1:dataParam[1]
					,objL2:dataParam[2]
					,objL3:dataParam[3]
					,prdSe:'Q'
					,format:'json'
					,jsonVD:'Y'
					,startPrdDe:dataParam[4]
					,endPrdDe:dataParam[5]
					,orgId:'101'
					,tblId:dataParam[6]
			}
			$.ajax({
				url: proxy+"https://kosis.kr/openapi/Param/statisticsParameterData.do?",
				type: 'get',
				async: false,
				data: param,
				dataType: "json"
			}).done(function(result){
				res = result;
			});
			return res;
		},
		/**
		 * @name : $more3DashDetail.util.division
		 * @description : 차트 데이터배열 n개씩 자르기
		 * @date : 2022.10.19
		 * @author : 조규환
		 * @history :
		 */
		division : function(data = [], size = 1) { // data = [], size = 1,
													// data, number
			const items = [...data];
			const arr = [];
			while (items.length) {
				arr.push(items.splice(0, size));
			}

			return arr;
		},
		/**
		 * @name : $more3DashDetail.util.overlapRemove
		 * @description : 차트 데이터배열 중복제거
		 * @date : 2022.10.19
		 * @author : 조규환
		 * @history :
		 */
		overlapRemove : function(dataArr) {
			const set = new Set(dataArr);
			const newArr = [...set];
			return newArr;
		},
		/**
		 * @name : $more3DashDetail.util.design
		 * @description : ajax 데이터
		 * @date : 2022.10.19
		 * @author : 조규환
		 * @history :
		 */	
		design : function(tblId) {
			if(tblId == "DT_1FL_7001") {
				$(".dashboardbox-type.line1").empty();
				$(".dashboardbox-type.line2").empty();
				$(".dashboardbox-type.line1").append("<div class='item flex-width-600 flex-height-280'><div class='title'><span id='title1'>분기별 임금근로 일자리 및 증감</span><button id='chartBtn1'><img src='/images/administStatsDetail/btn_down_chart.png' alt='' /></button>"+
						"<span class='select1'></span></div><div class='chartbox'><figure class='highcharts-figure'>" +
						"<div id='chart11' style='width:570px; height:230px; margin:0 auto'></div></figure></div></div>");
				$(".dashboardbox-type.line1").append("<div class='item flex-width-820 flex-height-280 flex-mgL-10 charttitle' id='charttitle5'><div class='title'>" +
						"<span id='title2'>2021년 4분기 산업대분류별 임금근로 일자리 구성비</span><button id='chartBtn2'><img src='/images/administStatsDetail/btn_down_chart.png' alt='' /></button>" +
						"<span class='select2'></span></div><section class='tabArea2'><div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'>" +
						"<div id='chart21' style='width:800px; height:240px'></div></figure></div></div></section></div>");
				$(".dashboardbox-type.line2").append("<div class='item-box flex-width-600 flex-height-500' id='chartBox'><div class='item flex-width-405 flex-height-280 flex-mgL-10 charttitle' id='charttitle3'>" +
						"<div class='title'><span id='title3'>2021년 4분기 산업대분류별 임근근로 일자리</span><button id='chartBtn3'>" +
						"<img src='/images/administStatsDetail/btn_down_chart.png' alt='' /></button><span class='select3'></span></div><section class='tabArea3'>" +
						"<div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'><div id='chart31' style='width:390px; height:200px;'></div>" +
						"</figure></div></div></section></div>");
				$(".dashboardbox-type.line2").append("<div class='item flex-width-600 flex-height-500 charttitle' id='charttitle4'>" +
						"<div class='title'><span id='title4'>2021년 4분기 산업대분류별 임근근로 일자리 증감</span><button id='chartBtn4'><img src='/images/administStatsDetail/btn_down_chart.png' alt='' /></button>" +
						"<span class='select4'></span></div><section class='tabArea4'><div class='tabBox on'><div class='chartbox'><figure class='highcharts-figure'>" +
						"<div id='chart41' style='width:570px; height:390px;'></div></figure></div></div></section></div></div>");
			}
		},
		/**
		 * @name : $more3DashDetail.util.selectChart
		 * @description : 각차트 셀렉트창 생성
		 * @date : 2022.10.26
		 * @author : 조규환
		 * @history :
		 */	
		selectChart : function(tblId, selectNm1, selectNm2, selectNm3, selectNm4, selectNm5, selectNm6, selectNm7, selectNm2_1) {
			console.log(tblId);
			console.log(selectNm1);
			console.log(selectNm2);
			console.log(selectNm3);
			console.log(selectNm4);
			console.log(selectNm5);
			console.log(selectNm6);
			console.log(selectNm7);
			console.log(selectNm2_1);
			let option1 = new Array;
			let option2 = new Array;
			let option2_1 = new Array;
			let option3 = new Array;
			let option4 = new Array;
			let option4_1 = new Array;
			let option5 = new Array;
			let option6 = new Array;
			let option6_1 = new Array;
			let option7 = new Array;
			for(let i=1; i<8; i++) {
				$('.select'+i).empty();
			}
			if(tblId == "DT_1FL_7001") {
				$(".select6").append("<select class='' id='selectChoice6'></select>");
				$(".select7").append("<select class='' id='selectChoice7'></select>");
				for(let i=0; i<selectNm5.length; i++) {
					option6 = "<option value='" +i+ "'>"+selectNm5[i]+"</option>";;
					option7 = "<option value='" +i+ "'>"+selectNm6[i]+"</option>";;
					$('#selectChoice6').append(option6);
					$('#selectChoice7').append(option7);
				}
			}else if(tblId == "DT_1FL_7003") {
				$(".select2").append("<select class='' id='selectChoice2'></select>");
				$(".select7").append("<select class='' id='selectChoice7'></select>");
				for(let i=0; i<selectNm2.length; i++) {
					option2 = "<option value='" +i+ "'>"+selectNm2[i]+"</option>";;
					$('#selectChoice2').append(option2);
				}
				for(let i=0; i<selectNm7.length; i++) {
					option7 = "<option value='" +i+ "'>"+selectNm7[i]+"</option>";;
					$('#selectChoice7').append(option7);
				}
			}else if(tblId == "DT_1FL_7004") {
				$(".select2").append("<select class='' id='selectChoice2'></select>");
				$(".select6").append("<select class='' id='selectChoice6'></select>");
				for(let i=0; i<selectNm2.length; i++) {
					option2 = "<option value='" +i+ "'>"+selectNm2[i]+"</option>";;
					option6 = "<option value='" +i+ "'>"+selectNm6[i]+"</option>";;
					$('#selectChoice2').append(option2);
					$('#selectChoice6').append(option6);
				}
			}else if(tblId == "DT_1FL_7006") {
				$(".select3").append("<select class='' id='selectChoice3'></select>");
				$(".select5").append("<select class='' id='selectChoice5'></select>");
				$(".select7").append("<select class='' id='selectChoice7'></select>");
				for(let i=0; i<selectNm3.length; i++) {
					option3 = "<option value='" +i+ "'>"+selectNm3[i]+"</option>";;
					option5 = "<option value='" +i+ "'>"+selectNm5[i]+"</option>";;
					option7 = "<option value='" +i+ "'>"+selectNm7[i]+"</option>";;
					$('#selectChoice3').append(option3);
					$('#selectChoice5').append(option5);
					$('#selectChoice7').append(option7);
				}
			}else if(tblId == "DT_1FL_7007") {
				$(".select7").append("<select class='' id='selectChoice7'></select>");
				for(let i=0; i<selectNm7.length; i++) {
					option7 = "<option value='" +i+ "'>"+selectNm7[i]+"</option>";;
					$('#selectChoice7').append(option7);
				}
			}else if(tblId == "DT_1FL_7008") {
				$(".select4").append("<select class='' id='selectChoice4'></select>");
				$(".select6").append("<select class='' id='selectChoice6'></select>");
				$(".select7").append("<select class='' id='selectChoice7'></select>");
				for(let i=0; i<selectNm4.length; i++) {
					option4 = "<option value='" +i+ "'>"+selectNm4[i]+"</option>";;
					option6 = "<option value='" +i+ "'>"+selectNm6[i]+"</option>";;
					option7 = "<option value='" +i+ "'>"+selectNm6[i]+"</option>";;
					$('#selectChoice4').append(option4);
					$('#selectChoice6').append(option6);
					$('#selectChoice7').append(option7);
				}
			}else if(tblId == "DT_1FL_7009") {
				$(".select2").append("<select class='' id='selectChoice2'></select>");
				$(".select4").append("<select class='' id='selectChoice4'></select>");
				$(".select7").append("<select class='' id='selectChoice7'></select>");
				for(let i=0; i<selectNm4.length; i++) {
					option2 = "<option value='" +i+ "'>"+selectNm2[i]+"</option>";;
					option4 = "<option value='" +i+ "'>"+selectNm4[i]+"</option>";;
					option7 = "<option value='" +i+ "'>"+selectNm7[i]+"</option>";;
					$('#selectChoice2').append(option2);
					$('#selectChoice4').append(option4);
					$('#selectChoice7').append(option7);
				}
			}else if(tblId == "DT_1FL_7010") { // 10번 대기
				$(".select2").append("<select class='' id='selectChoice2'></select>");
				$(".select2").append("<select class='' id='selectChoice2_1'></select>");
				$(".select4").append("<select class='' id='selectChoice4'></select>");
				$(".select4").append("<select class='' id='selectChoice4_1'></select>");
				for(let i=0; i<selectNm2.length; i++) {
					option2 = "<option value='" +i+ "'>"+selectNm2[i]+"</option>";;
					option4 = "<option value='" +i+ "'>"+selectNm2[i]+"</option>";;
					$('#selectChoice2').append(option2);
					$('#selectChoice4').append(option4);
				}
				for(let i=0; i<selectNm2_1.length; i++) {
					option2_1 = "<option value='" +i+ "'>"+selectNm2_1[i]+"</option>";;
					option4_1 = "<option value='" +i+ "'>"+selectNm2_1[i]+"</option>";;
					$('#selectChoice2_1').append(option2_1);
					$('#selectChoice4_1').append(option4_1);
				}
			}
		}
	};
}(window, document));




/*
 * var tblId = '';
 * 
 * function openApiSearch3(li){ $(".searchLayer").fadeOut();
 * $('.searchInput').val(''); var list2 = document.getElementById('list2');
 * list2.innerHTML = ''; $('#searchCount').text('0건'); $(".tabArea .tab
 * li").removeClass("on"); $(".tabArea .tabBox").removeClass("on"); $('.tabArea
 * .tab li:eq(' + 0 + ')').addClass("on"); $('.tabArea .tabBox:eq(' + 0 +
 * ')').addClass("on"); $(".tabArea0 .tab li").removeClass("on"); $(".tabArea0
 * .tabBox").removeClass("on"); $('.tabArea0 .tab li:eq(' + 0 +
 * ')').addClass("on"); $('.tabArea0 .tabBox:eq(' + 0 + ')').addClass("on");
 * $(".tabArea1 .tab li").removeClass("on"); $(".tabArea1
 * .tabBox").removeClass("on"); $('.tabArea1 .tab li:eq(' + 0 +
 * ')').addClass("on"); $('.tabArea1 .tabBox:eq(' + 0 + ')').addClass("on");
 * $(".tabArea2 .tab li").removeClass("on"); $(".tabArea2
 * .tabBox").removeClass("on"); $('.tabArea2 .tab li:eq(' + 0 +
 * ')').addClass("on"); $('.tabArea2 .tabBox:eq(' + 0 + ')').addClass("on");
 * $(".tabArea3 .tab li").removeClass("on"); $(".tabArea3
 * .tabBox").removeClass("on"); $('.tabArea3 .tab li:eq(' + 0 +
 * ')').addClass("on"); $('.tabArea3 .tabBox:eq(' + 0 + ')').addClass("on");
 * $(".tabArea4 .tab li").removeClass("on"); $(".tabArea4
 * .tabBox").removeClass("on"); $('.tabArea4 .tab li:eq(' + 0 +
 * ')').addClass("on"); $('.tabArea4 .tabBox:eq(' + 0 + ')').addClass("on");
 * 
 * $(".tabArea .tab li a").on("click", function(){ // 해당 요소를 클릭하는 내 자신의 index
 * 번호를 가져온다. [0], [1] const num = $(".tabArea .tab li a").index($(this));
 *  // 기존에 적용되어 있는 on class 삭제 $(".tabArea .tab li").removeClass("on");
 * $(".tabArea .tabBox").removeClass("on");
 *  // 다음 요소 클릭시 on class 추가 $('.tabArea .tab li:eq(' + num +
 * ')').addClass("on"); $('.tabArea .tabBox:eq(' + num + ')').addClass("on");
 * }); $(".tabArea0 .tab li a").on("click", function(){ const num = $(".tabArea0
 * .tab li a").index($(this)); $(".tabArea0 .tab li").removeClass("on");
 * $(".tabArea0 .tabBox").removeClass("on"); $('.tabArea0 .tab li:eq(' + num +
 * ')').addClass("on"); $('.tabArea0 .tabBox:eq(' + num + ')').addClass("on");
 * }); $(".tabArea1 .tab li a").on("click", function(){ const num = $(".tabArea1
 * .tab li a").index($(this)); $(".tabArea1 .tab li").removeClass("on");
 * $(".tabArea1 .tabBox").removeClass("on"); $('.tabArea1 .tab li:eq(' + num +
 * ')').addClass("on"); $('.tabArea1 .tabBox:eq(' + num + ')').addClass("on");
 * }); $(".tabArea2 .tab li a").on("click", function(){ const num = $(".tabArea2
 * .tab li a").index($(this)); $(".tabArea2 .tab li").removeClass("on");
 * $(".tabArea2 .tabBox").removeClass("on"); $('.tabArea2 .tab li:eq(' + num +
 * ')').addClass("on"); $('.tabArea2 .tabBox:eq(' + num + ')').addClass("on");
 * }); $(".tabArea3 .tab li a").on("click", function(){ const num = $(".tabArea3
 * .tab li a").index($(this)); $(".tabArea3 .tab li").removeClass("on");
 * $(".tabArea3 .tabBox").removeClass("on"); $('.tabArea3 .tab li:eq(' + num +
 * ')').addClass("on"); $('.tabArea3 .tabBox:eq(' + num + ')').addClass("on");
 * }); $(".tabArea4 .tab li a").on("click", function(){ const num = $(".tabArea4
 * .tab li a").index($(this)); $(".tabArea4 .tab li").removeClass("on");
 * $(".tabArea4 .tabBox").removeClass("on"); $('.tabArea4 .tab li:eq(' + num +
 * ')').addClass("on"); $('.tabArea4 .tabBox:eq(' + num + ')').addClass("on");
 * });
 * 
 * for(var i=0;i<$("a.searchmenua").length;i++){ if($("a.searchmenua:eq(" + i +
 * ")").css("color") == "#1772a9"){ $("a.searchmenua:eq(" + i +
 * ")").css("color", "#666666"); $("a.searchmenua:eq(" + i +
 * ")").css('font-weight', 400); } }
 * $(li).parent().find('a:eq(0)').css('color','#1772a9');
 * $(li).parent().find('a:eq(0)').css('font-weight', 700); var itmId = ''; var
 * objL1 = ''; var objL2 = ''; var objL3 = ''; var newEstPrdCnt = '6'; var
 * startPrdDe = $('#modalSearchYear').val(); tblId =
 * $(li).parent().data('tbl_id'); var tblNm = $(li).parent().data('tbl_nm'); var
 * startPrdDe = $('#modalSearchYear').val(); var selectedYear =
 * $("#modalSearchYear option:selected").text(); if($('#modalSearchYear').val() ==
 * undefined){startPrdDe = '202104';} $('#modalSearchTitle option').remove();
 * if(tblNm == undefined){ $('#modalSearchTitle').html('<option
 * value="DT_1FL_7001">전체 및 산업별(대·중분류) 임금근로 일자리</option>'); } else {
 * $('#modalSearchTitle').append('<option value="'+ tblId +'">'+ tblNm +'</option>');
 * $('#subtitle').html(tblNm); } $('.charttitle').show();
 * $('#charttitle0').hide(); if(tblId == undefined){tblId = 'DT_1FL_7001';}
 * $('.tab').hide(); $(".li1").text('총계'); $(".li2").text('지속');
 * $(".li3").text('대체'); $(".li4").text('신규'); $(".li5").text('소멸');
 * $(".li1").show(); $(".li2").show(); $(".li3").show(); $(".li4").show();
 * $(".li5").show(); $('.division').show(); $(".li6").hide();
 * $('#division7').hide(); if(tblId == 'DT_1FL_7001'){ $('#title1').text('분기별
 * 임금근로 일자리 및 증감'); $('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
 * $('#title3').text(selectedYear + ' 산업대분류별 임금근로 일자리');
 * $('#title4').text(selectedYear + ' 산업대분류별 임금근로 일자리 증감');
 * $('#title5').text(selectedYear + ' 산업중분류별 임금근로 일자리');
 * $('#title6').text(selectedYear + ' 산업중분류별 임금근로 일자리 증감');
 * $('#division3').hide(); $('#division4').hide(); $('#division5').hide();
 * $('#division6').hide(); } else if(tblId == 'DT_1FL_7002'){
 * $('#title1').text(selectedYear + ' 제조업 소분류별 임금근로 일자리 구성비');
 * $('#title2').text(selectedYear + ' 제조업 소분류별 임금근로 일자리');
 * $('#title3').text(selectedYear + ' 제조업 소분류별 임금근로 일자리 증감');
 * $('#title4').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리 구성비');
 * $('#title5').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리');
 * $('#title6').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리 증감');
 * $('#division2').hide(); $('#division3').hide(); $('#division5').hide();
 * $('#division6').hide(); } else if(tblId == 'DT_1FL_7003'){
 * $('#title1').text(selectedYear + ' 일자리형태별 임금근로 일자리 및 구성비');
 * $('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
 * $('#title4').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 및 구성비');
 * $('#title6').text(selectedYear + ' 산업중분류별 일자리형태별 임금근로 일자리 및 구성비');
 * $('#charttitle1').hide(); $('#charttitle3').hide(); $('#tabArea').show(); }
 * else if(tblId == 'DT_1FL_7004'){ $('#title1').text(selectedYear + ' 제조업
 * 일자리형태별 임금근로 일자리 및 구성비'); $('#title2').text(selectedYear + ' 제조업 소분류별 임금근로 일자리
 * 구성비'); $('#title3').text(selectedYear + ' 제조업 소분류별 일자리형태별 임금근로 일자리 및 구성비');
 * $('#title4').text(selectedYear + ' 도소매업 일자리형태별 임금근로 일자리 및 구성비');
 * $('#title5').text(selectedYear + ' 도소매업 소분류별 임금근로 일자리 구성비');
 * $('#title6').text(selectedYear + ' 도소매업 소분류별 일자리형태별 임금근로 일자리 및 구성비');
 * $('#tabArea').show(); $('#tabArea2').show(); } else if(tblId ==
 * 'DT_1FL_7005'){ $('#title1').text('분기별 임금근로 일자리 및 증감');
 * $('#title2').text(selectedYear + ' 성별 임금근로 일자리 및 구성비');
 * $('#title3').text(selectedYear + ' 성별 임금근로 일자리 증감');
 * $('#title4').text(selectedYear + ' 연령별 임금근로 일자리 및 구성비');
 * $('#title5').text(selectedYear + ' 조직형태별 임금근로 일자리 및 구성비');
 * $('#title6').text(selectedYear + ' 조직형태별 임금근로 일자리 증감');
 * $('#title7').text(selectedYear + ' 연령별 임금근로 일자리 증감');
 * $('#charttitle0').show(); $('#division3').hide(); $('#division6').hide(); }
 * else if(tblId == 'DT_1FL_7006'){ $('#title1').text(selectedYear + ' 일자리형태별
 * 임금근로 일자리 수 및 구성비'); $('#title2').text(selectedYear + ' 성별 일자리형태별 임금근로 일자리 수 및
 * 구성비'); $('#title3').text(selectedYear + ' 성별 임금근로 일자리 구성비');
 * $('#title4').text(selectedYear + ' 연령별 일자리형태별 임금근로 일자리 수 및 구성비');
 * $('#title5').text(selectedYear + ' 조직형태별 일자리형태별 임금근로 일자리 수 및 구성비');
 * $('#title6').text(selectedYear + ' 조직형태별 임금근로 일자리 구성비');
 * $('#title7').text(selectedYear + ' 연령별 임금근로 일자리 구성비'); $('#tabArea1').show();
 * $('#tabArea3').show(); $('#tabArea4').show(); $("#li32").text('지속');
 * $("#li33").hide(); $("#li34").hide(); $("#li36").text('신규');
 * $('#charttitle0').show(); $('#division7').show(); } else if(tblId ==
 * 'DT_1FL_7007'){ $('#title1').text('분기별 임금근로 일자리 수 및 증감');
 * $('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 수');
 * $('#title3').text(selectedYear + ' 산업대분류별 임금근로 일자리 증감');
 * $('#title4').text(selectedYear + ' 성별 산업대분류별 임금근로 일자리 수');
 * $('#title5').text(selectedYear + ' 성별 산업대분류별 임금근로 일자리 증감');
 * $('#title6').text(selectedYear + ' 성별 산업분류별 임금근로 일자리 구성비');
 * $('#division2').hide(); $('#division3').hide(); $('#tabArea3').show();
 * $('#li32').text('남자'); $('#li33').hide(); $('#li34').hide();
 * $('#li36').text('여자'); } else if(tblId == 'DT_1FL_7008'){
 * $('#title1').text('분기별 임금근로 일자리 수 및 증감'); $('#title2').text(selectedYear + '
 * 산업대분류별 임금근로 일자리 수'); $('#title3').text(selectedYear + ' 산업대분류별 임금근로 일자리 증감');
 * $('#title4').text(selectedYear + ' 연령별 산업대분류별 임금근로 일자리 수');
 * $('#title5').text(selectedYear + ' 연령별 산업대분류별 임금근로 일자리 증감');
 * $('#title6').text(selectedYear + ' 연령별 산업분류별 임금근로 일자리 구성비');
 * $('#division2').hide(); $('#division3').hide(); $('#division4').hide();
 * $('#division5').hide(); $('#tabArea0').show(); $('#tabArea2').show();
 * $('#tabArea3').show(); $(".li6").show(); $("#li02").text('20대이하');
 * $("#li03").text('30대'); $("#li04").text('40대'); $("#li05").text('50대');
 * $("#li06").text('60대이상'); $("#li22").text('20대이하'); $("#li23").text('30대');
 * $("#li24").text('40대'); $("#li25").text('50대'); $("#li26").text('60대이상');
 * $("#li32").text('20대이하'); $("#li33").text('30대'); $("#li34").text('40대');
 * $("#li35").text('50대'); $("#li36").text('60대이상'); } else if(tblId ==
 * 'DT_1FL_7009'){ $('#title1').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및
 * 구성비'); $('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
 * $('#title3').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비(남자)');
 * $('#title4').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비(남자)');
 * $('#title5').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비(여자)');
 * $('#title6').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비(여자)');
 * $('#tabArea').show(); $('#tabArea0').show(); $('#tabArea3').show();
 * $("#li3").hide(); $("#li4").hide(); $("#li5").text('신규'); $("#li03").hide();
 * $("#li04").hide(); $("#li06").text('신규'); $("#li33").hide();
 * $("#li34").hide(); $("#li36").text('신규'); $('#division2').hide();
 * $('#division4').hide(); $('#division6').hide(); } else if(tblId ==
 * 'DT_1FL_7010'){ $('#title1').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및
 * 구성비'); $('#title2').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
 * $('#title4').text(selectedYear + ' 산업대분류별 일자리형태별 임금근로 일자리 수 및 구성비');
 * $('#title6').text(selectedYear + ' 산업대분류별 임금근로 일자리 구성비');
 * $('#charttitle1').hide(); $('#charttitle3').hide(); $('#tabArea0').show();
 * $('#tabArea3').show(); $("#li01").text('20대 이하'); $("#li02").text('30대');
 * $("#li03").text('40대'); $("#li04").text('50대'); $("#li06").text('60대 이상');
 * $("#li31").text('20대 이하'); $("#li32").text('30대'); $("#li33").text('40대');
 * $("#li34").text('50대'); $("#li36").text('60대 이상'); $('#division2').hide();
 * $('#division6').hide(); }
 * 
 * $('.division').html(''); const flWork = ['지속일자리', '신규채용일자리', '지속일자리(구성비)',
 * '신규채용일자리(구성비)']; const colors =
 * ['#7CB5EC','#F15C80','#F7A35C','#90ED7D','#A15C80','#0005EC','#415C80','#FCB5EC','#807C80','#FFF5EC','#000C80'];
 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7007' ||
 * tblId == 'DT_1FL_7008'){ $('#division1').html('<span class="range"><span
 * class="blet" style="background-color:#7CB5EC"></span>임금근로 일자리</span>' +'<span
 * class="range"><span class="blet" style="background-color:#F15C80"></span>전년
 * 동기대비 증감</span>'); }
 * 
 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7003' ||
 * tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7005' || tblId ==
 * 'DT_1FL_7006'){itmId = 'T00';newEstPrdCnt = '20';} else if(tblId ==
 * 'DT_1FL_7007' || tblId == 'DT_1FL_7008' || tblId == 'DT_1FL_7009' || tblId ==
 * 'DT_1FL_7010'){itmId = 'T1';newEstPrdCnt = '20';}
 * 
 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7005'){objL1 = '00';} else
 * if(tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7006' || tblId == 'DT_1FL_7007' ||
 * tblId == 'DT_1FL_7008'){objL1 = '00';objL2 = '00';} else if(tblId ==
 * 'DT_1FL_7002'){objL1 = 'C';} else if(tblId == 'DT_1FL_7004'){objL1 =
 * 'C';objL2 = '00';} else if(tblId == 'DT_1FL_7009' || tblId ==
 * 'DT_1FL_7010'){objL1 = '00';objL2 = '00';objL3 = '00';}
 * 
 * var valueSuffix1 = '만개'; var valueSuffix2 = '%'; var valueSuffix3 = '만개'; var
 * valueSuffix4 = '만개'; var valueSuffix5 = '만개'; var valueSuffix6 = '%';
 * if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004' ||
 * tblId == 'DT_1FL_7006'){valueSuffix1 = '%';} if(tblId == 'DT_1FL_7002' ||
 * tblId == 'DT_1FL_7006' || tblId == 'DT_1FL_7007' || tblId ==
 * 'DT_1FL_7008'){valueSuffix2 = '만개';} if(tblId == 'DT_1FL_7006'){valueSuffix3 =
 * '%';} if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7004' || tblId ==
 * 'DT_1FL_7005' || tblId == 'DT_1FL_7009'){valueSuffix4 = '%';} if(tblId ==
 * 'DT_1FL_7004' || tblId == 'DT_1FL_7005'){valueSuffix5 = '%';} if(tblId ==
 * 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7003' || tblId ==
 * 'DT_1FL_7004' || tblId == 'DT_1FL_7005'){valueSuffix6 = '만개';} var parameter ={
 * method:"getList" ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc="
 * ,itmId:itmId ,objL1:objL1 ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json'
 * ,jsonVD:'Y' ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'1' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * data: parameter }).done(function(result){ var res = JSON.parse(result); var
 * seriesData = []; var series = []; var resYear = []; var seriesData1 = []; var
 * seriesData2 = []; var seriesData3 = []; var seriesData22 = []; var
 * seriesData23 = []; var seriesData33 = []; var seriesData44 = []; var
 * seriesDataObj1 = []; var seriesDataObj2 = []; var seriesDataObj3 = []; var
 * seriesDataObj4 = []; var name = ''; var name1 = ''; for(var i=0;i<res.length;i++){
 * resYear.push(res[i].PRD_DE); seriesData.push(res[i].DT); } seriesData =
 * seriesData.map(x => parseFloat(x)); var seriesDataObj = [];
 * seriesDataObj.push(seriesData); if(tblId == 'DT_1FL_7001' || tblId ==
 * 'DT_1FL_7005'){itmId = 'T02';} if(tblId == 'DT_1FL_7007' || tblId ==
 * 'DT_1FL_7008'){itmId = 'T3';} var parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:itmId
 * ,objL1:objL1 ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'1' ,orgId:'101' ,tblId:tblId }
 * $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * async: false, data: parameter }).done(function(result){ var res =
 * JSON.parse(result); for(var i=0;i<res.length;i++){
 * seriesData1.push(res[i].DT); } seriesData1 = seriesData1.map(x =>
 * parseFloat(x)); }); if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7005'){
 * seriesData1.unshift('', '', '', ''); } series = [{name: '임금근로 일자리',type:
 * 'column',yAxis: 1,data: seriesData}, {name: '증감',type: 'line',data:
 * seriesData1}]; Highcharts.setOptions({ colors:
 * ['#7CB5EC','#F15C80','#F7A35C','#90ED7D','#A15C80','#0005EC','#415C80','#FCB5EC','#807C80','#FFF5EC','#000C80'],
 * fontFamily: 'Noto Sans KR', lang: {thousandsSep: ','}, exporting:
 * {fallbackToExportServer: false} }); if(tblId == 'DT_1FL_7002' || tblId ==
 * 'DT_1FL_7003' || tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7006'){ var type =
 * {renderTo: 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style:
 * {fontFamily: 'notoSans'}} } else if(tblId == 'DT_1FL_7001' || tblId ==
 * 'DT_1FL_7005' || tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ var type =
 * {zoomType: 'xy'} } else { var type = {renderTo: 'horiStackedBar',type:
 * 'bar',style: {fontFamily: 'Noto Sans KR'}} } if(tblId == 'DT_1FL_7001' ||
 * tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){
 * charts1 = Highcharts.chart('chart1', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: [{ title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8'
 * },{ title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' }],
 * xAxis: { labels: {style: {color: '#494949', fontSize: '10px', fontWeight:
 * 'bold'}}, categories: resYear }, legend: {enabled: false}, plotOptions: {
 * series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#F15C80',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true,//툴팁 포맷을 html로 변경할 경우 true로 지정.(default false) borderRadius:
 * 10, backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix1,
 * shadow: false, padding: 10, zIndex: 100, style: {fontSize :'14px', color:
 * '#fff', textAlign: 'center', fontWeight: '600'} }, series: series }); } else
 * if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7009' || tblId ==
 * 'DT_1FL_7010'){ if(tblId == 'DT_1FL_7009' || tblId == 'DT_1FL_7010'){itmId =
 * 'ALL';objL2 = 'ALL';objL3 = 'ALL';} var parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:itmId
 * ,objL1:'ALL' ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * data: parameter }).done(function(result){ var res = JSON.parse(result); var
 * series = []; var series2 = []; var series3 = []; var series4 = []; var
 * series6 = []; var series5 = []; var series6 = []; var series7 = []; var
 * series8 = []; var resGen = []; var resGen2 = []; for(var i=0;i<res.length;i++){
 * if(tblId == 'DT_1FL_7009' || tblId == 'DT_1FL_7010'){ // ITM_ID = T1:일자리,
 * T2:구성비, C1 = 00:총계, 01:남자, 02:여자, C3 = 01:지속, 02:신규 if(res[i].ITM_ID == 'T1' &&
 * res[i].C1 == '00' && res[i].C2 != '00' && res[i].C3 ==
 * '01'){series.push(res[i].DT);resGen2.push(res[i].C2_NM);} if(res[i].ITM_ID ==
 * 'T1' && res[i].C1 == '00' && res[i].C2 != '00' && res[i].C3 ==
 * '02'){series2.push(res[i].DT);resGen2.push(res[i].C2_NM);} if(res[i].ITM_ID ==
 * 'T2' && res[i].C1 == '00' && res[i].C2 != '00' && res[i].C3 ==
 * '01'){series3.push(res[i].DT);resGen2.push(res[i].C2_NM);} if(res[i].ITM_ID ==
 * 'T2' && res[i].C1 == '00' && res[i].C2 != '00' && res[i].C3 ==
 * '02'){series4.push(res[i].DT);resGen2.push(res[i].C2_NM);} if(res[i].ITM_ID ==
 * 'T1' && res[i].C1 != '00' && res[i].C2 != '00' && res[i].C3 ==
 * '01'){series5.push(res[i].DT);} if(res[i].ITM_ID == 'T1' && res[i].C1 != '00' &&
 * res[i].C2 != '00' && res[i].C3 == '02'){series6.push(res[i].DT);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 != '00' && res[i].C2 != '00' &&
 * res[i].C3 == '01'){series7.push(res[i].DT);} if(res[i].ITM_ID == 'T2' &&
 * res[i].C1 != '00' && res[i].C2 != '00' && res[i].C3 ==
 * '02'){series8.push(res[i].DT);} } else
 * {series.push(res[i].DT);resGen.push(res[i].C1_NM);} } let result1 =
 * resGen.filter((v, i) => resGen.indexOf(v) === i); let result2 =
 * resGen2.filter((v, i) => resGen2.indexOf(v) === i); series = series.map(x =>
 * parseFloat(x)); series2 = series2.map(x => parseFloat(x)); series3 =
 * series3.map(x => parseFloat(x)); series4 = series4.map(x => parseFloat(x));
 * series6 = series6.map(x => parseFloat(x)); series5 = series5.map(x =>
 * parseFloat(x)); series6 = series6.map(x => parseFloat(x)); series7 =
 * series7.map(x => parseFloat(x)); series8 = series8.map(x => parseFloat(x));
 * var seriesDataObj = []; var seriesDataObj1 = []; var seriesDataObj2 = []; var
 * seriesDataObj3 = [];
 * 
 * if(tblId == 'DT_1FL_7002'){ var series1 = series.slice(0, 84); var result3 =
 * result1.slice(0, 84); var series2 = series.slice(85, 105); var result4 =
 * result1.slice(85, 105); for(var j=0;j<series1.length;j++){
 * seriesDataObj.push({name: result3[j],y: series1[j]}); } for(var j=0;j<series2.length;j++){
 * seriesDataObj2.push({name: result4[j],y: series2[j]}); } seriesDataObj1
 * =[{type: 'pie',innerSize: '60%',data: seriesDataObj,dataLabels: {enabled:
 * true,format: '{point.percentage:.1f} %',style: {fontSize: '14px'}}}];
 * seriesDataObj3 =[{type: 'pie',innerSize: '60%',data:
 * seriesDataObj2,dataLabels: {enabled: true,format: '{point.percentage:.1f}
 * %',style: {fontSize: '14px'}}}]; var type = {renderTo: 'dounutChart',type:
 * 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}} } else {
 * seriesDataObj1 = [{name: flWork[0],data: series}, {name: flWork[1],data:
 * series2}, {name: flWork[2],data: series3}, {name: flWork[3],data: series4}];
 * seriesDataObj11 = [{name: flWork[0],data: series5.slice(0, 21)}, {name:
 * flWork[1],data: series6.slice(0, 21)}, {name: flWork[2],data:
 * series7.slice(0, 21)}, {name: flWork[3],data: series8.slice(0, 21)}];
 * seriesDataObj21 = [{name: flWork[0],data: series5.slice(21, 42)}, {name:
 * flWork[1],data: series6.slice(21, 42)}, {name: flWork[2],data:
 * series7.slice(21, 42)}, {name: flWork[3],data: series8.slice(21, 42)}];
 * seriesDataObj31 = [{name: flWork[0],data: series5.slice(42, 63)}, {name:
 * flWork[1],data: series6.slice(42, 63)}, {name: flWork[2],data:
 * series7.slice(42, 63)}, {name: flWork[3],data: series8.slice(42, 63)}];
 * seriesDataObj41 = [{name: flWork[0],data: series5.slice(63, 84)}, {name:
 * flWork[1],data: series6.slice(63, 84)}, {name: flWork[2],data:
 * series7.slice(63, 84)}, {name: flWork[3],data: series8.slice(63, 84)}];
 * seriesDataObj51 = [{name: flWork[0],data: series5.slice(84, 105)}, {name:
 * flWork[1],data: series6.slice(84, 105)}, {name: flWork[2],data:
 * series7.slice(84, 105)}, {name: flWork[3],data: series8.slice(84, 105)}]; var
 * result3 = result2; var type = {type: 'bar',style: {fontFamily: 'Noto Sans
 * KR'}} } charts1 = Highcharts.chart('chart1', { chart: type, credits:
 * {enabled: false}, exporting: {enabled: false}, title: {text: ''}, subtitle:
 * {text: ''}, yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor:
 * '#E8E8E8' }, xAxis: { labels: {style: {color: '#494949', fontSize: '10px',
 * fontWeight: 'bold'}}, categories: result3 }, legend: {enabled: false},
 * plotOptions: { series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix1, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj1 }); if(tblId == 'DT_1FL_7009' || tblId ==
 * 'DT_1FL_7010'){ if(tblId == 'DT_1FL_7009'){ charts3 =
 * Highcharts.chart('chart3', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''}, yAxis: {
 * title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' }, xAxis: {
 * labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3 }, legend: {enabled: false}, plotOptions: { series: {
 * marker: {enabled: true,lineWidth : 2,lineColor: '#7CB5EC',fillColor:
 * '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: { useHTML: true,
 * borderRadius: 10, backgroundColor: '#000000', borderWidth: 0, valueSuffix:
 * valueSuffix3, shadow: false, padding: 10, zIndex: 100, style: {fontSize
 * :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} }, series:
 * seriesDataObj11 }); } if(tblId == 'DT_1FL_7010'){ charts4 =
 * Highcharts.chart('chart4', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''}, yAxis: {
 * title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' }, xAxis: {
 * labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3 }, legend: {enabled: false}, plotOptions: { series: {
 * marker: {enabled: true,lineWidth : 2,lineColor: '#7CB5EC',fillColor:
 * '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: { useHTML: true,
 * borderRadius: 10, backgroundColor: '#000000', borderWidth: 0, valueSuffix:
 * valueSuffix4, shadow: false, padding: 10, zIndex: 100, style: {fontSize
 * :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} }, series:
 * seriesDataObj11 });
 * 
 * charts41 = Highcharts.chart('chart41', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' },
 * xAxis: { labels: {style: {color: '#494949', fontSize: '10px', fontWeight:
 * 'bold'}}, categories: result3 }, legend: {enabled: false}, plotOptions: {
 * series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix4, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj21 });
 * 
 * charts42 = Highcharts.chart('chart42', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' },
 * xAxis: { labels: {style: {color: '#494949', fontSize: '10px', fontWeight:
 * 'bold'}}, categories: result3 }, legend: {enabled: false}, plotOptions: {
 * series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix4, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj31 });
 * 
 * charts43 = Highcharts.chart('chart43', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' },
 * xAxis: { labels: {style: {color: '#494949', fontSize: '10px', fontWeight:
 * 'bold'}}, categories: result3 }, legend: {enabled: false}, plotOptions: {
 * series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix4, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj41 });
 * 
 * charts45 = Highcharts.chart('chart45', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' },
 * xAxis: { labels: {style: {color: '#494949', fontSize: '10px', fontWeight:
 * 'bold'}}, categories: result3 }, legend: {enabled: false}, plotOptions: {
 * series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix4, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj51 }); }
 * 
 * charts5 = Highcharts.chart('chart5', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' },
 * xAxis: { labels: {style: {color: '#494949', fontSize: '10px', fontWeight:
 * 'bold'}}, categories: result3 }, legend: {enabled: false}, plotOptions: {
 * series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix5, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj21 }); } else if(tblId != 'DT_1FL_7002' && tblId !=
 * 'DT_1FL_7004'){ charts5 = Highcharts.chart('chart5', { chart: type, credits:
 * {enabled: false}, exporting: {enabled: false}, title: {text: ''}, subtitle:
 * {text: ''}, yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor:
 * '#E8E8E8' }, xAxis: { labels: {style: {color: '#494949', fontSize: '10px',
 * fontWeight: 'bold'}}, categories: result3 }, legend: {enabled: false},
 * plotOptions: { series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix5, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj11 }); } if(tblId != 'DT_1FL_7010'){ charts4 =
 * Highcharts.chart('chart4', { chart: { renderTo: 'dounutChart', type: 'pie',
 * innerSize: '60%', marginTop: 5, style: {fontFamily: 'notoSans'} }, credits:
 * {enabled: false}, exporting: {enabled: false}, title: {text: ''}, subtitle:
 * {text: ''}, yAxis: { title: {text: ''}, labels: {enabled: false}, lineColor:
 * '#E8E8E8' }, xAxis: { labels: {style: {color: '#494949', fontSize: '10px',
 * fontWeight: 'bold'}}, categories: result4 }, legend: {enabled: false},
 * plotOptions: { series: { marker: {enabled: true,lineWidth : 2,lineColor:
 * '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: {
 * useHTML: true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix4, shadow: false, padding: 10, zIndex: 100, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj3 }); } }); } else if(tblId == 'DT_1FL_7003' || tblId ==
 * 'DT_1FL_7004' || tblId == 'DT_1FL_7006'){ var parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:'T02'
 * ,objL1:objL1 ,objL2:'ALL' ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * data: parameter }).done(function(result){ var res = JSON.parse(result); var
 * series = []; var resGen = []; for(var i=0;i<res.length;i++){
 * series.push(res[i].DT); resGen.push(res[i].C2_NM); } let result2 =
 * resGen.filter((v, i) => resGen.indexOf(v) === i); series = series.map(x =>
 * parseFloat(x)); series.shift(); result2.shift(); var seriesDataObj = [];
 * for(var i=0;i<result2.length;i++){ if(tblId == 'DT_1FL_7006'){
 * $('#division1').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[i]+'"></span>'+result2[i]+'</span>'); } }
 * for(var j=0;j<series.length;j++){ seriesDataObj.push({name: result2[j],y:
 * series[j]}); } seriesDataObj1 =[{type: 'pie',innerSize: '60%',data:
 * seriesDataObj,dataLabels: {enabled: true,format: '{point.percentage:.1f}
 * %',style: {fontSize: '14px'}}}];
 * 
 * charts1 = Highcharts.chart('chart1', { chart: { renderTo: 'dounutChart',
 * type: 'pie', innerSize: '60%', marginTop: 5, style: {fontFamily: 'notoSans'} },
 * credits: {enabled: false}, exporting: {enabled: false}, title: {text: ''},
 * subtitle: {text: ''}, yAxis: { title: {text: ''}, labels: {enabled: false},
 * lineColor: '#E8E8E8' }, xAxis: { labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold'}}, categories: result2 }, legend: {enabled:
 * false}, plotOptions: { series: { marker: {enabled: true,lineWidth :
 * 2,lineColor: '#7CB5EC',fillColor: '#ffffff',fontFamily: 'Noto Sans KR'} } },
 * tooltip: { useHTML: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix1, shadow: false, padding: 10,
 * zIndex: 100, style: {fontSize :'14px', color: '#fff', textAlign: 'center',
 * fontWeight: '600'} }, series: seriesDataObj1 }); if(tblId == 'DT_1FL_7004'){
 * var parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:'T02'
 * ,objL1:'G' ,objL2:'ALL' ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * data: parameter }).done(function(result){ var res = JSON.parse(result); var
 * series = []; var resGen = []; for(var i=0;i<res.length;i++){
 * series.push(res[i].DT); resGen.push(res[i].C2_NM); } let result2 =
 * resGen.filter((v, i) => resGen.indexOf(v) === i); series = series.map(x =>
 * parseFloat(x)); series.shift(); result2.shift(); var seriesDataObj = [];
 * 
 * for(var j=0;j<series.length;j++){ seriesDataObj.push({name: result2[j],y:
 * series[j]}); } seriesDataObj1 =[{type: 'pie',innerSize: '60%',data:
 * seriesDataObj,dataLabels: {enabled: true,format: '{point.percentage:.1f}
 * %',style: {fontSize: '14px'}}}]; charts4 = Highcharts.chart('chart4', {
 * chart: { renderTo: 'dounutChart', type: 'pie', innerSize: '60%', marginTop:
 * 5, style: {fontFamily: 'notoSans'} }, credits: {enabled: false}, exporting:
 * {enabled: false}, title: {text: ''}, subtitle: {text: ''}, yAxis: { title:
 * {text: ''}, labels: {enabled: false}, lineColor: '#E8E8E8' }, xAxis: {
 * labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result2 }, legend: {enabled: false}, plotOptions: { series: {
 * marker: {enabled: true,lineWidth : 2,lineColor: '#7CB5EC',fillColor:
 * '#ffffff',fontFamily: 'Noto Sans KR'} } }, tooltip: { useHTML: true,
 * borderRadius: 10, backgroundColor: '#000000', borderWidth: 0, valueSuffix:
 * valueSuffix4, shadow: false, padding: 10, zIndex: 100, style: {fontSize
 * :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} }, series:
 * seriesDataObj1 }); }); } }); }
 * 
 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7005'){itmId = 'T01';obj1 =
 * 'ALL';obj2 = '';} if(tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004'){itmId =
 * 'T01';obj1 = 'ALL';objL2 = 'ALL';} if(tblId == 'DT_1FL_7006'){itmId =
 * 'ALL';obj1 = 'ALL';objL2 = 'ALL';} if(tblId == 'DT_1FL_7007' || tblId ==
 * 'DT_1FL_7008'){itmId = 'T2';objL2 = 'ALL';}
 * 
 * parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:itmId
 * ,objL1:obj1 ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * data: parameter }).done(function(result){ var res = JSON.parse(result); var
 * seriesData = []; var seriesData1 = []; var seriesData2 = []; var seriesData3 =
 * []; var seriesData4 = []; var seriesData5 = []; var seriesData6 = []; var
 * seriesData7 = []; var seriesData8 = []; var seriesData9 = []; var
 * seriesData10 = []; var seriesData11 = []; var resGen = []; var resGen2 = [];
 * var resGen3 = []; var resGen4 = []; for(var i=0;i<res.length;i++){ if(tblId ==
 * 'DT_1FL_7001' || tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7003' || tblId ==
 * 'DT_1FL_7004' || tblId == 'DT_1FL_7007' || tblId ==
 * 'DT_1FL_7008'){resGen.push(res[i].C2_NM);resGen2.push(res[i].C1_NM);} else
 * {resGen.push(res[i].C1_NM);} if(tblId == 'DT_1FL_7003' || tblId ==
 * 'DT_1FL_7004'){ if(res[i].C2 == '00'){seriesData.push(res[i].DT);}
 * if(res[i].C2 == '10'){seriesData1.push(res[i].DT);} if(res[i].C2 ==
 * '20'){seriesData2.push(res[i].DT);} if(res[i].C2 ==
 * '30'){seriesData3.push(res[i].DT);} if(res[i].C2 ==
 * '40'){seriesData4.push(res[i].DT);} } else if(tblId == 'DT_1FL_7005'){ // C1 =
 * 10:성별, 1001:남자, 1002:여자, 20:연령별, 2001:29세 이하, 2002:30~39세, 2003:40~49세,
 * 2004:50~59세, 2005:60세 이상, 30:조직형태별, 3001:회사법인, 3002:회사이외법인, 3003:정부·비법인단체,
 * 3004: 개인기업체 if(res[i].C1 == '10'){seriesData.push(res[i].DT);} if(res[i].C1 ==
 * '1001'){seriesData.push(res[i].DT);resGen2.push(res[i].C1_NM);} if(res[i].C1 ==
 * '1002'){seriesData.push(res[i].DT);resGen2.push(res[i].C1_NM);} if(res[i].C1 ==
 * '20'){seriesData1.push(res[i].DT);} if(res[i].C1 ==
 * '2001'){seriesData1.push(res[i].DT);resGen3.push(res[i].C1_NM);} if(res[i].C1 ==
 * '2002'){seriesData1.push(res[i].DT);resGen3.push(res[i].C1_NM);} if(res[i].C1 ==
 * '2003'){seriesData1.push(res[i].DT);resGen3.push(res[i].C1_NM);} if(res[i].C1 ==
 * '2004'){seriesData1.push(res[i].DT);resGen3.push(res[i].C1_NM);} if(res[i].C1 ==
 * '2005'){seriesData1.push(res[i].DT);resGen3.push(res[i].C1_NM);} if(res[i].C1 ==
 * '30'){seriesData2.push(res[i].DT);} if(res[i].C1 ==
 * '3001'){seriesData2.push(res[i].DT);resGen4.push(res[i].C1_NM);} if(res[i].C1 ==
 * '3002'){seriesData2.push(res[i].DT);resGen4.push(res[i].C1_NM);} if(res[i].C1 ==
 * '3003'){seriesData2.push(res[i].DT);resGen4.push(res[i].C1_NM);} if(res[i].C1 ==
 * '3004'){seriesData2.push(res[i].DT);resGen4.push(res[i].C1_NM);} } else
 * if(tblId == 'DT_1FL_7006'){ // ITM_ID = T00:일자리, T02:구성비, C1 = 10:성별,
 * 1001:남자, 1002:여자, 20:연령별, 2001:29세 이하, 2002:30~39세, 2003:40~49세, 2004:50~59세,
 * 2005:60세 이상, 30:조직형태별, 3001:회사법인, 3002:회사이외법인, 3003:정부·비법인단체, 3004: 개인기업체, C2 =
 * 10:지속, 20:신규 if((res[i].ITM_ID == 'T00' && res[i].C2 == '10') && (res[i].C1 ==
 * '1001' || res[i].C1 ==
 * '1002')){seriesData.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T00' && res[i].C2 == '20') && (res[i].C1 == '1001' ||
 * res[i].C1 ==
 * '1002')){seriesData1.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T02' && res[i].C2 == '10') && (res[i].C1 == '1001' ||
 * res[i].C1 ==
 * '1002')){seriesData2.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T02' && res[i].C2 == '20') && (res[i].C1 == '1001' ||
 * res[i].C1 ==
 * '1002')){seriesData3.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T00' && res[i].C2 == '10') && (res[i].C1 == '2001' ||
 * res[i].C1 == '2002' || res[i].C1 == '2003' || res[i].C1 == '2004' ||
 * res[i].C1 ==
 * '2005')){seriesData4.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T00' && res[i].C2 == '20') && (res[i].C1 == '2001' ||
 * res[i].C1 == '2002' || res[i].C1 == '2003' || res[i].C1 == '2004' ||
 * res[i].C1 ==
 * '2005')){seriesData5.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T02' && res[i].C2 == '10') && (res[i].C1 == '2001' ||
 * res[i].C1 == '2002' || res[i].C1 == '2003' || res[i].C1 == '2004' ||
 * res[i].C1 ==
 * '2005')){seriesData6.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T02' && res[i].C2 == '20') && (res[i].C1 == '2001' ||
 * res[i].C1 == '2002' || res[i].C1 == '2003' || res[i].C1 == '2004' ||
 * res[i].C1 ==
 * '2005')){seriesData7.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T00' && res[i].C2 == '10') && (res[i].C1 == '3001' ||
 * res[i].C1 == '3002' || res[i].C1 == '3003' || res[i].C1 ==
 * '3004')){seriesData8.push(res[i].DT);resGen4.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T00' && res[i].C2 == '20') && (res[i].C1 == '3001' ||
 * res[i].C1 == '3002' || res[i].C1 == '3003' || res[i].C1 ==
 * '3004')){seriesData9.push(res[i].DT);resGen4.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T02' && res[i].C2 == '10') && (res[i].C1 == '3001' ||
 * res[i].C1 == '3002' || res[i].C1 == '3003' || res[i].C1 ==
 * '3004')){seriesData10.push(res[i].DT);resGen4.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T02' && res[i].C2 == '20') && (res[i].C1 == '3001' ||
 * res[i].C1 == '3002' || res[i].C1 == '3003' || res[i].C1 ==
 * '3004')){seriesData11.push(res[i].DT);resGen4.push(res[i].C1_NM);} } else
 * if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ if(res[i].C2 ==
 * '00'){seriesData2.push(res[i].DT);} if(res[i].C2 ==
 * '01'){seriesData3.push(res[i].DT);} if(res[i].C2 ==
 * '02'){seriesData4.push(res[i].DT);} if(res[i].C2 ==
 * '03'){seriesData5.push(res[i].DT);} if(res[i].C2 ==
 * '04'){seriesData6.push(res[i].DT);} if(res[i].C2 ==
 * '05'){seriesData7.push(res[i].DT);} } else if(tblId == 'DT_1FL_7009' || tblId ==
 * 'DT_1FL_7010'){ // ITM_ID = T2:구성비, C1 = 00:성별, 01:남자, 02:여자, C2 = 산업대분류별,
 * 00:총계, C3 = 일자리형태별, 00:총계 if(res[i].ITM_ID == 'T2' && res[i].C1 == '00' &&
 * res[i].C2 != '00' && res[i].C3 ==
 * '00'){seriesData.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '01' && res[i].C2 != '00' &&
 * res[i].C3 == '00'){seriesData1.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '02' && res[i].C2 != '00' &&
 * res[i].C3 == '00'){seriesData2.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '03' && res[i].C2 != '00' &&
 * res[i].C3 == '00'){seriesData3.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '04' && res[i].C2 != '00' &&
 * res[i].C3 == '00'){seriesData4.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '05' && res[i].C2 != '00' &&
 * res[i].C3 == '00'){seriesData5.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '00' && res[i].C2 != '00' &&
 * res[i].C3 == '01'){seriesData6.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '00' && res[i].C2 != '00' &&
 * res[i].C3 == '02'){seriesData7.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '01' && res[i].C2 != '00' &&
 * res[i].C3 == '01'){seriesData8.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '01' && res[i].C2 != '00' &&
 * res[i].C3 == '02'){seriesData9.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '02' && res[i].C2 != '00' &&
 * res[i].C3 == '01'){seriesData10.push(res[i].DT);resGen2.push(res[i].C2_NM);}
 * if(res[i].ITM_ID == 'T2' && res[i].C1 == '02' && res[i].C2 != '00' &&
 * res[i].C3 == '02'){seriesData11.push(res[i].DT);resGen2.push(res[i].C2_NM);} }
 * else { seriesData.push(res[i].DT); seriesData2.push(res[i].DT);
 * resGen2.push(res[i].C1_NM); } } let result2 = resGen.filter((v, i) =>
 * resGen.indexOf(v) === i); let result3 = resGen2.filter((v, i) =>
 * resGen2.indexOf(v) === i); let result4 = resGen3.filter((v, i) =>
 * resGen3.indexOf(v) === i); let result5 = resGen4.filter((v, i) =>
 * resGen4.indexOf(v) === i); seriesData = seriesData.map(x => parseFloat(x));
 * seriesData1 = seriesData1.map(x => parseFloat(x)); seriesData2 =
 * seriesData2.map(x => parseFloat(x)); seriesData3 = seriesData3.map(x =>
 * parseFloat(x)); seriesData4 = seriesData4.map(x => parseFloat(x));
 * seriesData5 = seriesData5.map(x => parseFloat(x)); seriesData6 =
 * seriesData6.map(x => parseFloat(x)); seriesData7 = seriesData7.map(x =>
 * parseFloat(x)); seriesData8 = seriesData8.map(x => parseFloat(x));
 * seriesData9 = seriesData9.map(x => parseFloat(x)); seriesData10 =
 * seriesData10.map(x => parseFloat(x)); seriesData11 = seriesData11.map(x =>
 * parseFloat(x)); result2 = result2.filter((element) => element !== '총 계');
 * result3 = result3.filter((element) => element !== '총계'); result3 =
 * result3.filter((element) => element !== '총 계'); result3 =
 * result3.filter((element) => element !== '성별'); result4 =
 * result4.filter((element) => element !== '연령별'); result5 =
 * result5.filter((element) => element !== '조직형태별'); var seriesDataS4; var
 * result3A1; var res = result2; var res2 = result3.slice(0, 84); var res3 =
 * result3.slice(77, 98); var res4 = result3.slice(85, 105); if(tblId ==
 * 'DT_1FL_7003' || tblId == 'DT_1FL_7004'){result2 = res.pop();} for(var i=0;i<res3.length;i++){
 * var j = i; if(i>10){j = i-11;} if(tblId == 'DT_1FL_7001' || tblId ==
 * 'DT_1FL_7003'){ $('#division2').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+res3[i]+'</span>'); } }
 * for(var i=0;i<res2.length;i++){ var j = i; var ma; if(i>10){ if(i%11 ==
 * 0){ma = i;} j = i-ma; } if(tblId == 'DT_1FL_7002'){ $('#division1').append('<span
 * class="range"><span class="blet" style="background-color:'+colors[j]+'"></span>'+res2[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7004'){ $('#division2').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+res2[i]+'</span>'); } }
 * for(var i=0;i<res.length;i++){ var j = i; if(i>10){j = i-11;} if(tblId ==
 * 'DT_1FL_7003' || tblId == 'DT_1FL_7004'){ $('#division1').append('<span
 * class="range"><span class="blet" style="background-color:'+colors[j]+'"></span>'+res[i]+'</span>');
 * $('#division3').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[j]+'"></span>'+res[i]+'</span>');
 * $('#division4').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[j]+'"></span>'+res[i]+'</span>');
 * $('#division6').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[j]+'"></span>'+res[i]+'</span>'); } }
 * if(tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004'){
 * $('#division3').append('<span class="range"><span class="blet"
 * style="background-color:#90ED7D"></span>'+result2+'</span>');
 * $('#division6').append('<span class="range"><span class="blet"
 * style="background-color:#90ED7D"></span>'+result2+'</span>'); } if(tblId ==
 * 'DT_1FL_7003'){ $('#division4').append('<span class="range"><span
 * class="blet" style="background-color:#90ED7D"></span>'+result2+'</span>'); }
 * for(var i=0;i<res4.length;i++){ var j = i; if(i>10){j = i-11;} if(tblId ==
 * 'DT_1FL_7002'){ $('#division4').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+res4[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7004'){ $('#division5').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+res4[i]+'</span>'); } }
 * for(var i=0;i<result3.length;i++){ var j = i; if(i>10){j = i-11;} if(tblId ==
 * 'DT_1FL_7005'){ $('#division2').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+result3[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7006'){ $('#division3').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+result3[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){
 * $('#division6').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[j]+'"></span>'+result3[i]+'</span>'); } }
 * for(var i=0;i<result4.length;i++){ var j = i; if(i>10){j = i-11;} if(tblId ==
 * 'DT_1FL_7005'){ $('#division4').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+result4[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7006'){ $('#division7').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+result4[i]+'</span>'); } }
 * for(var i=0;i<result5.length;i++){ var j = i; if(i>10){j = i-11;} if(tblId ==
 * 'DT_1FL_7005'){ $('#division5').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+result5[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7006'){ $('#division6').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[j]+'"></span>'+result5[i]+'</span>'); } }
 * for(var i=0;i<flWork.length;i++){ if(tblId == 'DT_1FL_7006'){
 * $('#division2').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>');
 * $('#division4').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>');
 * $('#division5').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7009'){ $('#division1').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>');
 * $('#division3').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>');
 * $('#division5').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>'); }
 * if(tblId == 'DT_1FL_7010'){ $('#division1').append('<span class="range"><span
 * class="blet" style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>');
 * $('#division4').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[i]+'"></span>'+flWork[i]+'</span>'); } }
 * 
 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7003'){ var seriesDataS =
 * seriesData.slice(78, 99); var seriesDataS3 = seriesData1.slice(78, 99); var
 * seriesDataS4 = seriesData2.slice(78, 99); var seriesDataS5 =
 * seriesData3.slice(78, 99); var seriesDataS6 = seriesData4.slice(78, 99); var
 * result3A = result3.slice(77, 98); } else if(tblId == 'DT_1FL_7002' || tblId ==
 * 'DT_1FL_7004'){ var seriesDataS = seriesData.slice(0, 84); var seriesDataS3 =
 * seriesData1.slice(0, 84); var seriesDataS4 = seriesData2.slice(0, 84); var
 * seriesDataS5 = seriesData3.slice(0, 84); var seriesDataS6 =
 * seriesData4.slice(0, 84); var result3A = result3.slice(0, 84); seriesDataS7 =
 * seriesData.slice(85, 105); seriesDataS8 = seriesData1.slice(85, 105);
 * seriesDataS9 = seriesData2.slice(85, 105); seriesDataS10 =
 * seriesData3.slice(85, 105); seriesDataS11 = seriesData4.slice(85, 105);
 * result3A1 = result3.slice(85, 105); } else { if(tblId != 'DT_1FL_7006' &&
 * tblId != 'DT_1FL_7009' && tblId != 'DT_1FL_7010'){ seriesData.shift();
 * seriesData1.shift(); seriesData2.shift(); } var seriesDataS = seriesData; var
 * seriesDataS1 = seriesData1; var seriesDataS2 = seriesData2; var seriesDataS3 =
 * seriesData3; var seriesDataS4 = seriesData4; var seriesDataS5 = seriesData5;
 * var seriesDataS6 = seriesData6; var seriesDataS7 = seriesData7; var
 * seriesDataS8 = seriesData8; var seriesDataS9 = seriesData9; var seriesDataS10 =
 * seriesData10; var seriesDataS11 = seriesData11; var result3A = result3; var
 * result4A = result4; var result5A = result5; } var seriesDataObj = []; var
 * seriesDataObj1 = []; var seriesDataObj2 = []; var seriesDataObj3 = []; var
 * seriesDataObj4 = []; var seriesDataObj5 = []; var seriesDataObj6 = []; var
 * seriesDataObj7 = []; var seriesDataObj8 = []; var seriesDataObj9 = []; var
 * seriesDataObj10 = []; var seriesDataObj11 = []; var seriesDataObj12 = []; var
 * seriesDataObj13 = []; var seriesDataObj14 = []; var seriesDataObj15 = []; var
 * seriesDataObj16 = []; var seriesDataObj17 = [];
 * 
 * if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7004'){ for(var j=0;j<seriesDataS.length;j++){
 * seriesDataObj.push({name: result3A[j],y: seriesDataS[j]});
 * seriesDataObj1.push({name: result3A[j], y: seriesDataS3[j]});
 * seriesDataObj2.push({name: result3A[j], y: seriesDataS4[j]});
 * seriesDataObj3.push({name: result3A[j], y: seriesDataS5[j]});
 * seriesDataObj4.push({name: result3A[j], y: seriesDataS6[j]}); } for(var k=0;k<seriesDataS7.length;k++){
 * seriesDataObj5.push({name: result3A1[k],y: seriesDataS7[k]});
 * seriesDataObj6.push({name: result3A1[k],y: seriesDataS8[k]});
 * seriesDataObj7.push({name: result3A1[k],y: seriesDataS9[k]});
 * seriesDataObj8.push({name: result3A1[k],y: seriesDataS10[k]});
 * seriesDataObj9.push({name: result3A1[k],y: seriesDataS11[k]}); } } else
 * if(tblId == 'DT_1FL_7006'){ seriesDataObj2 = [{name: flWork[0],data:
 * seriesDataS}, {name: flWork[1],data: seriesDataS1}, {name: flWork[2],data:
 * seriesDataS2}, {name: flWork[3],data: seriesDataS3}]; seriesDataObj3 =
 * [{name: flWork[0],data: seriesDataS4}, {name: flWork[1],data: seriesDataS5},
 * {name: flWork[2],data: seriesDataS6}, {name: flWork[3],data: seriesDataS7}];
 * seriesDataObj4 = [{name: flWork[0],data: seriesDataS8}, {name:
 * flWork[1],data: seriesDataS9}, {name: flWork[2],data: seriesDataS10}, {name:
 * flWork[3],data: seriesDataS11}]; } else { if(seriesData != undefined){
 * for(var j=0;j<seriesDataS.length;j++){ if(tblId == 'DT_1FL_7009' || tblId ==
 * 'DT_1FL_7010'){ var k = j; if(j>11){k = j-12;} seriesDataObj.push({name:
 * result3A[j], value: seriesDataS[j],color: colors[k]});
 * seriesDataObj1.push({name: result3A[j], value: seriesDataS1[j],color:
 * colors[k]}); seriesDataObj2.push({name: result3A[j], value:
 * seriesDataS2[j],color: colors[k]}); seriesDataObj3.push({name: result3A[j],
 * value: seriesDataS3[j],color: colors[k]}); seriesDataObj4.push({name:
 * result3A[j], value: seriesDataS4[j],color: colors[k]});
 * seriesDataObj5.push({name: result3A[j], value: seriesDataS5[j],color:
 * colors[k]}); seriesDataObj6.push({name: result3A[j], value:
 * seriesDataS6[j],color: colors[k]}); seriesDataObj7.push({name: result3A[j],
 * value: seriesDataS7[j],color: colors[k]}); seriesDataObj8.push({name:
 * result3A[j], value: seriesDataS8[j],color: colors[k]});
 * seriesDataObj9.push({name: result3A[j], value: seriesDataS9[j],color:
 * colors[k]}); seriesDataObj10.push({name: result3A[j], value:
 * seriesDataS10[j],color: colors[k]}); seriesDataObj11.push({name: result3A[j],
 * value: seriesDataS11[j],color: colors[k]}); } else {
 * seriesDataObj.push({name: result3A[j], y: seriesDataS[j]});
 * seriesDataObj1.push({name: result3A[j], y: seriesDataS3[j]});
 * seriesDataObj2.push({name: result3A[j], y: seriesDataS4[j]});
 * seriesDataObj3.push({name: result3A[j], y: seriesDataS5[j]});
 * seriesDataObj4.push({name: result3A[j], y: seriesDataS6[j]}); } } }
 * if(seriesDataS1 != undefined){ for(var j=0;j<seriesDataS1.length;j++){
 * seriesDataObj5.push({name: result4A[j],y: seriesDataS1[j]}); }
 * seriesDataObj4.push({ innerSize: '60%', data: seriesDataObj5, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '14px'} } }); }
 * if(seriesDataS2 != undefined){ if(tblId == 'DT_1FL_7005'){ for(var j=0;j<seriesDataS2.length;j++){
 * seriesDataObj6.push({name: result5A[j],y: seriesDataS2[j]}); } } else
 * if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ seriesDataS3.shift();
 * seriesDataS4.shift(); seriesDataS5.shift(); seriesDataS6.shift();
 * seriesDataS7.shift(); for(var i=0;i<result3.length;i++){
 * seriesDataObj6.push({name: result3[i],y: seriesDataS2[i]});
 * seriesDataObj8.push({name: result3[i],y: seriesDataS3[i]});
 * seriesDataObj10.push({name: result3[i],y: seriesDataS4[i]});
 * seriesDataObj12.push({name: result3[i],y: seriesDataS5[i]});
 * seriesDataObj14.push({name: result3[i],y: seriesDataS6[i]});
 * seriesDataObj16.push({name: result3[i],y: seriesDataS7[i]}); } }
 * seriesDataObj7.push({ innerSize: '60%', data: seriesDataObj6, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataObj9.push({ innerSize: '60%', data: seriesDataObj8, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataObj11.push({ innerSize: '60%', data: seriesDataObj10, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataObj13.push({ innerSize: '60%', data: seriesDataObj12, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataObj15.push({ innerSize: '60%', data: seriesDataObj14, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataObj17.push({ innerSize: '60%', data: seriesDataObj16, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } }); } } var
 * seriesDataObj0 = []; var seriesDataObj01 = []; var seriesDataObj02 = []; var
 * seriesDataObj03 = []; var seriesDataObj04 = []; var seriesDataObj05 = []; var
 * seriesDataObj06 = []; var seriesDataObj07 = []; var seriesDataObj08 = []; var
 * seriesDataObj09 = []; var seriesDataObj010 = []; var seriesDataObj011 = [];
 * seriesDataObj0.push({type: 'treemap',layoutAlgorithm: 'squarified',data:
 * seriesDataObj}); seriesDataObj01.push({type: 'treemap',layoutAlgorithm:
 * 'squarified',data: seriesDataObj1}); seriesDataObj02.push({type:
 * 'treemap',layoutAlgorithm: 'squarified',data: seriesDataObj2});
 * seriesDataObj03.push({type: 'treemap',layoutAlgorithm: 'squarified',data:
 * seriesDataObj3}); seriesDataObj04.push({type: 'treemap',layoutAlgorithm:
 * 'squarified',data: seriesDataObj4}); seriesDataObj05.push({type:
 * 'treemap',layoutAlgorithm: 'squarified',data: seriesDataObj5});
 * seriesDataObj06.push({type: 'treemap',layoutAlgorithm: 'squarified',data:
 * seriesDataObj6}); seriesDataObj07.push({type: 'treemap',layoutAlgorithm:
 * 'squarified',data: seriesDataObj7}); seriesDataObj08.push({type:
 * 'treemap',layoutAlgorithm: 'squarified',data: seriesDataObj8});
 * seriesDataObj09.push({type: 'treemap',layoutAlgorithm: 'squarified',data:
 * seriesDataObj9}); seriesDataObj010.push({type: 'treemap',layoutAlgorithm:
 * 'squarified',data: seriesDataObj10}); seriesDataObj011.push({type:
 * 'treemap',layoutAlgorithm: 'squarified',data: seriesDataObj11}); var
 * seriesDataOb0 = []; var seriesDataOb1 = []; var seriesDataOb2 = []; var
 * seriesDataOb3 = []; var seriesDataOb4 = []; if(tblId ==
 * 'DT_1FL_7006'){seriesDataOb0 = seriesDataObj2;}
 * 
 * seriesDataOb0.push({ innerSize: '60%', data: seriesDataObj, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataOb1.push({ innerSize: '60%', data: seriesDataObj1, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataOb2.push({ innerSize: '60%', data: seriesDataObj2, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataOb3.push({ innerSize: '60%', data: seriesDataObj3, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * seriesDataOb4.push({ innerSize: '60%', data: seriesDataObj4, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '14px'} } });
 * seriesDataObj.push({ innerSize: '60%', data: seriesDataObj5, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * seriesDataObj1.push({ innerSize: '60%', data: seriesDataObj6, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * seriesDataObj2.push({ innerSize: '60%', data: seriesDataObj7, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * seriesDataObj3.push({ innerSize: '60%', data: seriesDataObj8, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * seriesDataObj4.push({ innerSize: '60%', data: seriesDataObj9, dataLabels: {
 * enabled: false, format: '<span class="d-label">{data.name}</span> : {y}',
 * align: 'center', y: -30, x: -40, style: {fontSize: '10px'} } });
 * 
 * if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7004' ||
 * tblId == 'DT_1FL_7005'){ var type = {renderTo: 'dounutChart',type:
 * 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}} } else
 * if(tblId == 'DT_1FL_7002' || tblId == 'DT_1FL_7006' || tblId == 'DT_1FL_7007' ||
 * tblId == 'DT_1FL_7008'){ var type = {type: 'column',style: {fontFamily: 'Noto
 * Sans KR'}} } else { var type = {renderTo: 'horiStackedBar',type: 'bar',style:
 * {fontFamily: 'Noto Sans KR'}} } if(tblId != 'DT_1FL_7007' && tblId !=
 * 'DT_1FL_7008' && tblId != 'DT_1FL_7009' && tblId != 'DT_1FL_7010'){ charts2 =
 * Highcharts.chart('chart2', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''}, yAxis: {
 * title: {text: ''}, labels: {enabled: false} }, xAxis: { labels: {style:
 * {color: '#494949', fontSize: '10px', fontWeight: 'bold'}}, categories:
 * result3A }, legend: {enabled: false}, plotOptions: { pie: {size: '100%',
 * showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix2,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataOb0 }); if(tblId ==
 * 'DT_1FL_7003' || tblId == 'DT_1FL_7004'){ charts21 =
 * Highcharts.chart('chart21', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''}, yAxis: {
 * title: {text: ''}, labels: {enabled: false} }, xAxis: { labels: {style:
 * {color: '#494949', fontSize: '10px', fontWeight: 'bold'}}, categories:
 * result3A }, legend: {enabled: false}, plotOptions: { pie: {size: '100%',
 * showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix2,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataOb1 }); charts22 =
 * Highcharts.chart('chart22', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''}, yAxis: {
 * title: {text: ''}, labels: {enabled: false} }, xAxis: { labels: {style:
 * {color: '#494949', fontSize: '10px', fontWeight: 'bold'}}, categories:
 * result3A }, legend: {enabled: false}, plotOptions: { pie: {size: '100%',
 * showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix2,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataOb2 });
 * 
 * charts23 = Highcharts.chart('chart23', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix2,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataOb3 });
 * 
 * charts24 = Highcharts.chart('chart24', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix2,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataOb4 }); } } else
 * if(tblId != 'DT_1FL_7007' && tblId != 'DT_1FL_7008'){ charts2 =
 * Highcharts.chart('chart2', { credits: {enabled: false}, exporting: {enabled:
 * false}, title: {text: ''}, tooltip:{valueSuffix: valueSuffix2}, series:
 * seriesDataObj0 }); if(tblId == 'DT_1FL_7009'){ charts4 =
 * Highcharts.chart('chart4', { credits: {enabled: false}, exporting: {enabled:
 * false}, title: {text: ''}, tooltip:{valueSuffix: valueSuffix4}, series:
 * seriesDataObj01 });
 * 
 * charts21 = Highcharts.chart('chart21', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix2}, series: seriesDataObj06 });
 * 
 * charts24 = Highcharts.chart('chart24', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix2}, series: seriesDataObj07 });
 * 
 * charts41 = Highcharts.chart('chart41', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix4}, series: seriesDataObj08 });
 * 
 * charts45 = Highcharts.chart('chart45', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix4}, series: seriesDataObj09 });
 * 
 * charts61 = Highcharts.chart('chart61', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix6}, series: seriesDataObj010 });
 * 
 * charts65 = Highcharts.chart('chart65', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix6}, series: seriesDataObj011 });
 * 
 * charts6 = Highcharts.chart('chart6', { credits: {enabled: false}, exporting:
 * {enabled: false}, title: {text: ''}, tooltip:{valueSuffix: valueSuffix6},
 * series: seriesDataObj02 }); } else { charts6 = Highcharts.chart('chart6', {
 * credits: {enabled: false}, exporting: {enabled: false}, title: {text: ''},
 * tooltip:{valueSuffix: valueSuffix6}, series: seriesDataObj01 });
 * 
 * charts61 = Highcharts.chart('chart61', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix6}, series: seriesDataObj02 });
 * 
 * charts62 = Highcharts.chart('chart62', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix6}, series: seriesDataObj03 });
 * 
 * charts63 = Highcharts.chart('chart63', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix6}, series: seriesDataObj04 });
 * 
 * charts65 = Highcharts.chart('chart65', { credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, tooltip:{valueSuffix:
 * valueSuffix6}, series: seriesDataObj05 }); } } if(tblId == 'DT_1FL_7005' ||
 * tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ if(tblId ==
 * 'DT_1FL_7005'){ charts4 = Highcharts.chart('chart4', { chart: type, credits:
 * {enabled: false}, exporting: {enabled: false}, title: {text: ''}, subtitle:
 * {text: ''}, yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: {
 * labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result4A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix4,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj4 }); charts5 =
 * Highcharts.chart('chart5', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''}, yAxis: {
 * title: {text: ''}, labels: {enabled: false} }, xAxis: { labels: {style:
 * {color: '#494949', fontSize: '10px', fontWeight: 'bold'}}, categories:
 * result5A }, legend: {enabled: false}, plotOptions: { pie: {size: '100%',
 * showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix5,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj7 }); } else {
 * if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ type = {renderTo:
 * 'dounutChart',type: 'pie',marginTop: 5,style: {fontFamily: 'notoSans'}} }
 * charts6 = Highcharts.chart('chart6', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result5A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj7 });
 * charts61 = Highcharts.chart('chart61', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result5A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj9 });
 * 
 * if(tblId == 'DT_1FL_7007'){ charts65 = Highcharts.chart('chart65', { chart:
 * type, credits: {enabled: false}, exporting: {enabled: false}, title: {text:
 * ''}, subtitle: {text: ''}, yAxis: { title: {text: ''}, labels: {enabled:
 * false} }, xAxis: { labels: {style: {color: '#494949', fontSize: '10px',
 * fontWeight: 'bold'}}, categories: result5A }, legend: {enabled: false},
 * plotOptions: { pie: {size: '100%', showInLegend: true} }, tooltip: { useHTML:
 * true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix6, shadow: false, padding: 10, style: {fontSize
 * :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} }, series:
 * seriesDataObj11 }); } else { charts62 = Highcharts.chart('chart62', { chart:
 * type, credits: {enabled: false}, exporting: {enabled: false}, title: {text:
 * ''}, subtitle: {text: ''}, yAxis: { title: {text: ''}, labels: {enabled:
 * false} }, xAxis: { labels: {style: {color: '#494949', fontSize: '10px',
 * fontWeight: 'bold'}}, categories: result5A }, legend: {enabled: false},
 * plotOptions: { pie: {size: '100%', showInLegend: true} }, tooltip: { useHTML:
 * true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix6, shadow: false, padding: 10, style: {fontSize
 * :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} }, series:
 * seriesDataObj11 });
 * 
 * charts63 = Highcharts.chart('chart63', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result5A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj13 });
 * 
 * charts64 = Highcharts.chart('chart64', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result5A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj15 });
 * charts65 = Highcharts.chart('chart65', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result5A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj17 }); } } }
 * if(tblId == 'DT_1FL_7006'){ charts4 = Highcharts.chart('chart4', { chart:
 * type, credits: {enabled: false}, exporting: {enabled: false}, title: {text:
 * ''}, subtitle: {text: ''}, yAxis: { title: {text: ''}, labels: {enabled:
 * false} }, xAxis: { labels: {style: {color: '#494949', fontSize: '10px',
 * fontWeight: 'bold'}}, categories: result4A }, legend: {enabled: false},
 * plotOptions: { pie: {size: '100%', showInLegend: true} }, tooltip: { useHTML:
 * true, borderRadius: 10, backgroundColor: '#000000', borderWidth: 0,
 * valueSuffix: valueSuffix4, shadow: false, padding: 10, style: {fontSize
 * :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} }, series:
 * seriesDataObj3 });
 * 
 * charts5 = Highcharts.chart('chart5', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result5A }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix5,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj4 }); }
 * if(tblId == 'DT_1FL_7002'){num = 10;} if(tblId == 'DT_1FL_7002' || tblId ==
 * 'DT_1FL_7004'){ charts5 = Highcharts.chart('chart5', { chart: type, credits:
 * {enabled: false}, exporting: {enabled: false}, title: {text: ''}, subtitle:
 * {text: ''}, yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: {
 * labels: {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3A1 }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true}, series: {pointWidth: num, borderRadius: 8} },
 * tooltip: { useHTML: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix5, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj });
 * 
 * charts51 = Highcharts.chart('chart51', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3A1 }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true}, series: {pointWidth: num, borderRadius: 8} },
 * tooltip: { useHTML: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix5, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj1 });
 * 
 * charts52 = Highcharts.chart('chart52', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3A1 }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true}, series: {pointWidth: num, borderRadius: 8} },
 * tooltip: { useHTML: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix5, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj2 }); charts53 = Highcharts.chart('chart53', { chart:
 * type, credits: {enabled: false}, exporting: {enabled: false}, title: {text:
 * ''}, subtitle: {text: ''}, yAxis: { title: {text: ''}, labels: {enabled:
 * false} }, xAxis: { labels: {style: {color: '#494949', fontSize: '10px',
 * fontWeight: 'bold'}}, categories: result3A1 }, legend: {enabled: false},
 * plotOptions: { pie: {size: '100%', showInLegend: true}, series: {pointWidth:
 * num, borderRadius: 8} }, tooltip: { useHTML: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix5,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, series: seriesDataObj3 });
 * 
 * charts55 = Highcharts.chart('chart55', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, subtitle: {text: ''},
 * yAxis: { title: {text: ''}, labels: {enabled: false} }, xAxis: { labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold'}},
 * categories: result3A1 }, legend: {enabled: false}, plotOptions: { pie: {size:
 * '100%', showInLegend: true}, series: {pointWidth: num, borderRadius: 8} },
 * tooltip: { useHTML: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix5, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * series: seriesDataObj4 }); } });
 * 
 * if(tblId == 'DT_1FL_7001'){itmId = 'T00';obj1 = 'ALL';} else if(tblId ==
 * 'DT_1FL_7002'){itmId = 'T02';obj1 = 'ALL';}
 * 
 * parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:itmId
 * ,objL1:obj1 ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * async: false, data: parameter }).done(function(result){ var res =
 * JSON.parse(result); for(var i=0;i<res.length;i++){
 * seriesData22.push(res[i].DT); } seriesData22 = seriesData22.map(x =>
 * parseFloat(x)); var seriesData222 = seriesData22.shift(); }); if(tblId ==
 * 'DT_1FL_7004'){objL2 = 'ALL';} else if(tblId == 'DT_1FL_7005'){itmId =
 * 'T02';} else if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){itmId =
 * 'T3';obj1 = 'ALL';objL2 = 'ALL';} parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:itmId
 * ,objL1:obj1 ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * data: parameter }).done(function(result){ var res = JSON.parse(result); var
 * resGen = []; var resGen2 = []; var resGen3 = []; var seriesData1 = []; var
 * seriesData2 = []; var seriesData3 = []; var seriesData4 = []; var seriesData5 =
 * []; var seriesData6 = []; var seriesData44 = []; var seriesData55 = [];
 * for(var i=0;i<res.length;i++){ if(tblId == 'DT_1FL_7004'){ // C2 = 일자리 형태별,
 * 10:지속일자리, 20:대체일자리, 30:신규일자리, 40:소멸일자리 if(res[i].C2 ==
 * '10'){seriesData1.push(res[i].DT);}; if(res[i].C2 ==
 * '20'){seriesData2.push(res[i].DT);}; if(res[i].C2 ==
 * '30'){seriesData3.push(res[i].DT);}; if(res[i].C2 ==
 * '40'){seriesData4.push(res[i].DT);}; resGen.push(res[i].C1_NM); } else
 * if(tblId == 'DT_1FL_7005'){ // C1 = 10:성별, 1001:남자, 1002:여자, 20:연령별, 2001:29세
 * 이하, 2002:30~39세, 2003:40~49세, 2004:50~59세, 2005:60세 이상, 30:조직형태별, 3001:회사법인,
 * 3002:회사이외법인, 3003:정부·비법인단체, 3004: 개인기업체, C2 = 10:지속, 20:신규 if(res[i].C1 ==
 * '10'){seriesData33.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '1001'){seriesData33.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '1002'){seriesData33.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '20'){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);} if(res[i].C1 ==
 * '2001'){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '2002'){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '2003'){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '2004'){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '2005'){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '30'){seriesData55.push(res[i].DT);resGen3.push(res[i].C1_NM);} if(res[i].C1 ==
 * '3001'){seriesData55.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '3002'){seriesData55.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '3003'){seriesData55.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if(res[i].C1 ==
 * '3004'){seriesData55.push(res[i].DT);resGen3.push(res[i].C1_NM);} } else
 * if(tblId == 'DT_1FL_7006'){ // ITM_ID = T00:일자리, C1 = 10:성별, 1001:남자,
 * 1002:여자, 20:연령별, 2001:29세 이하, 2002:30~39세, 2003:40~49세, 2004:50~59세, 2005:60세
 * 이상, 30:조직형태별, 3001:회사법인, 3002:회사이외법인, 3003:정부·비법인단체, 3004: 개인기업체, C2 = 10:지속,
 * 20:신규 if((res[i].ITM_ID == 'T01' && res[i].C2 == '00') && (res[i].C1 ==
 * '1001' || res[i].C1 ==
 * '1002')){seriesData33.push(res[i].DT);resGen.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '00') && (res[i].C1 == '2001' ||
 * res[i].C1 == '2002' || res[i].C1 == '2003' || res[i].C1 == '2004' ||
 * res[i].C1 ==
 * '2005')){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '00') && (res[i].C1 == '3001' ||
 * res[i].C1 == '3002' || res[i].C1 == '3003' || res[i].C1 ==
 * '3004')){seriesData55.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '10') && (res[i].C1 == '1001' ||
 * res[i].C1 == '1002')){seriesData1.push(res[i].DT);resGen.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '10') && (res[i].C1 == '2001' ||
 * res[i].C1 == '2002' || res[i].C1 == '2003' || res[i].C1 == '2004' ||
 * res[i].C1 ==
 * '2005')){seriesData2.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '10') && (res[i].C1 == '3001' ||
 * res[i].C1 == '3002' || res[i].C1 == '3003' || res[i].C1 ==
 * '3004')){seriesData3.push(res[i].DT);resGen3.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '20') && (res[i].C1 == '1001' ||
 * res[i].C1 == '1002')){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '20') && (res[i].C1 == '2001' ||
 * res[i].C1 == '2002' || res[i].C1 == '2003' || res[i].C1 == '2004' ||
 * res[i].C1 ==
 * '2005')){seriesData5.push(res[i].DT);resGen2.push(res[i].C1_NM);}
 * if((res[i].ITM_ID == 'T01' && res[i].C2 == '20') && (res[i].C1 == '3001' ||
 * res[i].C1 == '3002' || res[i].C1 == '3003' || res[i].C1 ==
 * '3004')){seriesData6.push(res[i].DT);resGen3.push(res[i].C1_NM);} } else
 * if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ // C2 = 00:성별, 01:남자,
 * 02:여자 if(res[i].C2 ==
 * '00'){seriesData33.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C2 ==
 * '01'){seriesData44.push(res[i].DT);resGen2.push(res[i].C1_NM);} if(res[i].C2 ==
 * '02'){seriesData55.push(res[i].DT);resGen2.push(res[i].C1_NM);} if(res[i].C2 ==
 * '03'){seriesData1.push(res[i].DT);resGen2.push(res[i].C1_NM);} if(res[i].C2 ==
 * '04'){seriesData2.push(res[i].DT);resGen2.push(res[i].C1_NM);} if(res[i].C2 ==
 * '05'){seriesData3.push(res[i].DT);resGen2.push(res[i].C1_NM);} } else {
 * seriesData33.push(res[i].DT); seriesData44.push(res[i].DT);
 * resGen.push(res[i].C1_NM); } } let result2 = resGen.filter((v, i) =>
 * resGen.indexOf(v) === i); let result3 = resGen2.filter((v, i) =>
 * resGen2.indexOf(v) === i); let result4 = resGen3.filter((v, i) =>
 * resGen3.indexOf(v) === i); seriesData1 = seriesData1.map(x => parseFloat(x));
 * seriesData2 = seriesData2.map(x => parseFloat(x)); seriesData3 =
 * seriesData3.map(x => parseFloat(x)); seriesData4 = seriesData4.map(x =>
 * parseFloat(x)); seriesData5 = seriesData5.map(x => parseFloat(x));
 * seriesData6 = seriesData6.map(x => parseFloat(x)); seriesData33 =
 * seriesData33.map(x => parseFloat(x)); seriesData44 = seriesData44.map(x =>
 * parseFloat(x)); seriesData55 = seriesData55.map(x => parseFloat(x)); if(tblId ==
 * 'DT_1FL_7001'){ var seriesDataA = seriesData33.slice(77, 99); var resultA =
 * result2.slice(77, 99); } else if(tblId == 'DT_1FL_7002'){ var seriesDataA =
 * seriesData33.slice(0, 84); var resultA = result2.slice(0, 84); } else
 * if(tblId == 'DT_1FL_7004'){ var seriesDataA = seriesData1.slice(0, 84); var
 * seriesDataB = seriesData2.slice(0, 84); var seriesDataC =
 * seriesData3.slice(0, 84); var seriesDataD = seriesData4.slice(0, 84); var
 * resultA = result2.slice(0, 84); } else if(tblId == 'DT_1FL_7005' || tblId ==
 * 'DT_1FL_7006' || tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ if(tblId !=
 * 'DT_1FL_7006'){ seriesData33.shift(); seriesData44.shift();
 * seriesData55.shift(); result2.shift(); result3.shift(); result4.shift(); }
 * var seriesDataA = seriesData33; var seriesDataB = seriesData44; var
 * seriesDataC = seriesData55; var resultA = result2; var resultB = result3; var
 * resultC = result4; } if(seriesDataA != undefined){ seriesDataObj3 = [{name:
 * '임금근로 일자리',data: seriesDataA}]; } if(seriesDataB != undefined){ if(tblId ==
 * 'DT_1FL_7007'){ var seriesDataObj4 = [{name: '남자',data: seriesDataB}, {name:
 * '여자',data: seriesDataC}]; } else if(tblId == 'DT_1FL_7008'){
 * seriesData1.shift(); seriesData2.shift(); seriesData3.shift(); var
 * seriesDataObj4 = [{name: '임금근로 일자리',data:
 * seriesDataA,negativeColor:'#F15C80'}]; var seriesDataObj5 = [{name: '임금근로
 * 일자리',data: seriesDataB,negativeColor:'#F15C80'}]; var seriesDataObj6 =
 * [{name: '임금근로 일자리',data: seriesDataC,negativeColor:'#F15C80'}]; var
 * seriesDataObj7 = [{name: '임금근로 일자리',data:
 * seriesData1,negativeColor:'#F15C80'}]; var seriesDataObj8 = [{name: '임금근로
 * 일자리',data: seriesData2,negativeColor:'#F15C80'}]; var seriesDataObj9 =
 * [{name: '임금근로 일자리',data: seriesData3,negativeColor:'#F15C80'}]; } else { var
 * seriesDataObj4 = [{name: '임금근로 일자리',data:
 * seriesDataB,negativeColor:'#F15C80'}]; } } if(seriesDataC != undefined){
 * if(tblId == 'DT_1FL_7005'){ seriesDataObj5 = [{name: '임금근로 일자리', data:
 * seriesDataC,negativeColor:'#F15C80'}]; } } if(tblId == 'DT_1FL_7004'){
 * seriesDataObj3 = [{name: res[1].C2_NM,data: seriesDataA,marker: {radius: 5,
 * symbol: 'circle', lineColor: '#F15C80', fillColor: '#ffffff'}}, {name:
 * res[2].C2_NM,data: seriesDataB,marker: {radius: 5, symbol: 'circle',
 * lineColor: '#F7A35C', fillColor: '#ffffff'}}, {name: res[3].C2_NM,data:
 * seriesDataC,marker: {radius: 5, symbol: 'circle', lineColor: '#F7A35C',
 * fillColor: '#ffffff'}}, {name: res[4].C2_NM,data: seriesDataD,marker:
 * {radius: 5, symbol: 'circle', lineColor: '#F7A35C', fillColor: '#ffffff'}}]; }
 * else if(tblId == 'DT_1FL_7006'){ var seriesDataAObj = []; var seriesDataBObj =
 * []; var seriesDataCObj = []; var seriesDataAObj1 = []; var seriesDataBObj1 =
 * []; var seriesDataCObj1 = []; var seriesDataAObj2 = []; var seriesDataBObj2 =
 * []; var seriesDataCObj2 = []; for(var i=0;i<result2.length;i++){
 * seriesDataAObj.push({name: result2[i],y:seriesDataA[i]});
 * seriesDataAObj1.push({name: result2[i],y:seriesData1[i]});
 * seriesDataAObj2.push({name: result2[i],y:seriesData4[i]}); } for(var i=0;i<result3.length;i++){
 * seriesDataBObj.push({name: result3[i],y:seriesDataB[i]});
 * seriesDataBObj1.push({name: result3[i],y:seriesData2[i]});
 * seriesDataBObj2.push({name: result3[i],y:seriesData5[i]}); } for(var i=0;i<result4.length;i++){
 * seriesDataCObj.push({name: result4[i],y:seriesDataC[i]});
 * seriesDataCObj1.push({name: result4[i],y:seriesData3[i]});
 * seriesDataCObj2.push({name: result4[i],y:seriesData6[i]}); } seriesDataObj3
 * =[{innerSize: '60%',data: seriesDataAObj,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj4
 * =[{innerSize: '60%',data: seriesDataBObj,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj5
 * =[{innerSize: '60%',data: seriesDataCObj,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj6
 * =[{innerSize: '60%',data: seriesDataAObj1,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj7
 * =[{innerSize: '60%',data: seriesDataAObj2,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj8
 * =[{innerSize: '60%',data: seriesDataBObj1,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj9
 * =[{innerSize: '60%',data: seriesDataBObj2,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj10
 * =[{innerSize: '60%',data: seriesDataCObj1,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; seriesDataObj11
 * =[{innerSize: '60%',data: seriesDataCObj2,dataLabels: {enabled: true,format:
 * '{point.percentage:.1f} %',style: {fontSize: '14px'}}}]; } else {
 * seriesDataObj3 = [{name: '임금근로 일자리',data:
 * seriesDataA,negativeColor:'#F15C80'}]; } if(tblId == 'DT_1FL_7003' || tblId ==
 * 'DT_1FL_7006'){ var type = {renderTo: 'dounutChart',type: 'pie',innerSize:
 * '60%',marginTop: 5,style: {fontFamily: 'notoSans'}} } else if(tblId ==
 * 'DT_1FL_7004'){ var type = {renderTo: 'horiStackedBar',type: 'bar',style:
 * {fontFamily: 'Noto Sans KR'}} var marker = {stacking: 'normal', borderRadius:
 * 8} } else { var type = {type: 'column',style: {fontFamily: 'Noto Sans KR'}} }
 * 
 * if(tblId != 'DT_1FL_7009' && tblId != 'DT_1FL_7010'){ charts3 =
 * Highcharts.chart('chart3', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: resultA, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix3, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8}, bar: marker }, series:
 * seriesDataObj3 }); if(tblId == 'DT_1FL_7006'){ charts31 =
 * Highcharts.chart('chart31', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: resultA, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix3, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8}, bar: marker }, series:
 * seriesDataObj6 });
 * 
 * charts32 = Highcharts.chart('chart32', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: resultA, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix3,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj7 }); charts71 =
 * Highcharts.chart('chart71', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: resultA, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix6, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8}, bar: marker }, series:
 * seriesDataObj8 });
 * 
 * charts72 = Highcharts.chart('chart72', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: resultA, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj9 });
 * 
 * charts61 = Highcharts.chart('chart61', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: resultA, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj10 }); charts65 =
 * Highcharts.chart('chart65', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: resultA, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix6, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8}, bar: marker }, series:
 * seriesDataObj11 }); } } if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){
 * charts5 = Highcharts.chart('chart5', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: resultB, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix5,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj4 }); charts51 =
 * Highcharts.chart('chart51', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: resultB, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix5, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8}, bar: marker }, series:
 * seriesDataObj5 });
 * 
 * charts52 = Highcharts.chart('chart52', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: resultB, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix5,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj6 }); charts53 =
 * Highcharts.chart('chart53', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: resultB, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix5, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8}, bar: marker }, series:
 * seriesDataObj7 }); charts54 = Highcharts.chart('chart54', { chart: type,
 * credits: {enabled: false}, exporting: {enabled: false}, title: {text: ''},
 * legend: {enabled: false}, xAxis: [{ categories: resultB, labels: {style:
 * {color: '#494949', fontSize: '10px', fontWeight: 'bold', letterSpacing:
 * '0px'}}, lineColor: '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor:
 * '#cfcfcf', tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels:
 * {enabled: false} }], tooltip: { useHTML: true, enabled: true, borderRadius:
 * 10, backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix5,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj8 }); charts55 =
 * Highcharts.chart('chart55', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: resultB, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix5, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8}, bar: marker }, series:
 * seriesDataObj9 }); } if(tblId == 'DT_1FL_7005' || tblId == 'DT_1FL_7006'){
 * charts6 = Highcharts.chart('chart6', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: resultC, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj5 });
 * 
 * charts7 = Highcharts.chart('chart7', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: resultB, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix6,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8}, bar: marker }, series: seriesDataObj4 }); } }); if(tblId ==
 * 'DT_1FL_7003'){itmId = 'T00';} var num = 1; parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:itmId
 * ,objL1:obj1 ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * async: false, data: parameter }).done(function(result){ var res =
 * JSON.parse(result); var seriesData1 = []; var seriesData2 = []; var
 * seriesData3 = []; var seriesData4 = []; var seriesData5 = []; var resGen =
 * []; for(var i=0;i<res.length;i++){ seriesData5.push(res[i].DT); if(tblId ==
 * 'DT_1FL_7001'){ // C1 = 01:농업, 02:임업, 03:어업 if(res[i].C1 ==
 * '01'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '02'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '03'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} } else {
 * if(tblId == 'DT_1FL_7003'){ // C2 = 일자리 형태별, 10:지속일자리, 20:대체일자리, 30:신규일자리,
 * 40:소멸일자리 if(res[i].C2 ==
 * '10'){seriesData1.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C2 ==
 * '20'){seriesData2.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C2 ==
 * '30'){seriesData3.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C2 ==
 * '40'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} } else
 * {seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} } } let result2 =
 * resGen.filter((v, i) => resGen.indexOf(v) === i); seriesData1 =
 * seriesData1.map(x => parseFloat(x)); seriesData2 = seriesData2.map(x =>
 * parseFloat(x)); seriesData3 = seriesData3.map(x => parseFloat(x));
 * seriesData4 = seriesData4.map(x => parseFloat(x)); var seriesDataObj = [];
 * if(tblId == 'DT_1FL_7001'){ var resultA = result2; seriesDataObj = [{data:
 * seriesData4}]; } else if(tblId == 'DT_1FL_7002'){ var seriesDataA =
 * seriesData4.slice(85, 105); var resultA = result2.slice(85, 105);
 * seriesDataObj = [{data: seriesDataA,negativeColor:'#F15C80'}] } else if(tblId ==
 * 'DT_1FL_7003'){ var seriesDataA = seriesData1.slice(78, 99); var seriesDataB =
 * seriesData2.slice(78, 99); var seriesDataC = seriesData3.slice(78, 99); var
 * seriesDataD = seriesData4.slice(78, 99); var resultA = result2.slice(78, 99);
 * var seriesDataObj = [{name: res[1].C2_NM,data: seriesDataA,marker: {radius:
 * 5, symbol: 'circle', lineColor: '#F15C80', fillColor: '#ffffff'}}, {name:
 * res[2].C2_NM,data: seriesDataB,marker: {radius: 5, symbol: 'circle',
 * lineColor: '#F7A35C', fillColor: '#ffffff'}}, {name: res[3].C2_NM,data:
 * seriesDataC,marker: {radius: 5, symbol: 'circle', lineColor: '#F7A35C',
 * fillColor: '#ffffff'}}, {name: res[4].C2_NM,data: seriesDataD,marker:
 * {radius: 5, symbol: 'circle', lineColor: '#F7A35C', fillColor: '#ffffff'}}]; }
 * if(tblId == 'DT_1FL_7004' || tblId == 'DT_1FL_7006' || tblId ==
 * 'DT_1FL_7005'){ var type = {renderTo: 'dounutChart',type: 'pie',innerSize:
 * '60%',marginTop: 5,style: {fontFamily: 'notoSans'}} } else if(tblId ==
 * 'DT_1FL_7003' || tblId == 'DT_1FL_7009'){ var type = {renderTo:
 * 'horiStackedBar',type: 'bar',style: {fontFamily: 'Noto Sans KR'}} var marker =
 * {stacking: 'normal', borderRadius: 8} } else { var type = {type:
 * 'column',style: {fontFamily: 'Noto Sans KR'}} }
 * 
 * if(tblId == 'DT_1FL_7001'){ num = 30; charts5 = Highcharts.chart('chart5', {
 * chart: type, credits: {enabled: false}, exporting: {enabled: false}, title:
 * {text: ''}, legend: {enabled: false}, xAxis: [{ categories: resultA, labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold',
 * letterSpacing: '0px'}}, lineColor: '#cfcfcf', gridLineWidth: 0, tickWidth: 0,
 * tickColor: '#cfcfcf', tickPosition: 'inside' }], yAxis: [{ title: {text: ''},
 * labels: {enabled: false} }], tooltip: { useHTML: true, enabled: true,
 * borderRadius: 10, backgroundColor: '#000000', borderWidth: 0, valueSuffix:
 * valueSuffix5, shadow: false, padding: 10, style: {fontSize :'14px', color:
 * '#fff', textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {pointWidth: num, borderRadius: 8}, bar: marker }, series: seriesDataObj }); }
 * else if(tblId == 'DT_1FL_7002'){ charts6 = Highcharts.chart('chart6', {
 * chart: type, credits: {enabled: false}, exporting: {enabled: false}, title:
 * {text: ''}, legend: {enabled: false}, xAxis: [{ categories: resultA, labels:
 * {style: {color: '#494949', fontSize: '10px', fontWeight: 'bold',
 * letterSpacing: '0px'}}, lineColor: '#cfcfcf', gridLineWidth: 0, tickWidth: 0,
 * tickColor: '#cfcfcf', tickPosition: 'inside' }], yAxis: [{ title: {text: ''},
 * labels: {enabled: false} }], tooltip: { useHTML: true, enabled: true,
 * borderRadius: 10, backgroundColor: '#000000', borderWidth: 0, valueSuffix:
 * valueSuffix6, shadow: false, padding: 10, style: {fontSize :'14px', color:
 * '#fff', textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8} }, series: seriesDataObj }); } else if(tblId ==
 * 'DT_1FL_7003'){ charts4 = Highcharts.chart('chart4', { chart: type, credits:
 * {enabled: false}, exporting: {enabled: false}, title: {text: ''}, legend:
 * {enabled: false}, xAxis: [{ categories: resultA, labels: {style: {color:
 * '#494949', fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}},
 * lineColor: '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix4,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {pointWidth: num, borderRadius: 8}, bar: marker }, series: seriesDataObj }); }
 * });
 * 
 * if(tblId == 'DT_1FL_7001'){itmId = 'T02';} else if(tblId ==
 * 'DT_1FL_7003'){itmId = 'T00';objL2 = 'ALL';} else if(tblId == 'DT_1FL_7007' ||
 * tblId == 'DT_1FL_7008'){itmId = 'T1';obj1 = 'ALL';objL2 = 'ALL';}
 * 
 * parameter ={ method:"getList"
 * ,apiKey:"NWU2NjUxODYzMWQyMTM0MGQ5NWRhMTE3ZjZjZGE0ODc=" ,itmId:itmId
 * ,objL1:obj1 ,objL2:objL2 ,objL3:objL3 ,prdSe:'Y' ,format:'json' ,jsonVD:'Y'
 * ,startPrdDe:startPrdDe ,newEstPrdCnt:newEstPrdCnt ,loadGubun:'2' ,orgId:'101'
 * ,tblId:tblId } $.ajax({ url: "/view/totSurv/proxy?" +
 * "https://kosis.kr/openapi/Param/statisticsParameterData.do?", type: 'get',
 * async: false, data: parameter }).done(function(result){ var res =
 * JSON.parse(result); var resGen = []; var resGen2 = []; var seriesData1 = [];
 * var seriesData2 = []; var seriesData3 = []; var seriesData4 = []; var
 * seriesData5 = []; var seriesData6 = []; for(var i=0;i<res.length;i++){
 * if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ if(res[i].C2 ==
 * '00'){seriesData3.push(res[i].DT);} if(res[i].C2 ==
 * '01'){seriesData1.push(res[i].DT);} if(res[i].C2 ==
 * '02'){seriesData2.push(res[i].DT);} if(res[i].C2 ==
 * '03'){seriesData4.push(res[i].DT);} if(res[i].C2 ==
 * '04'){seriesData5.push(res[i].DT);} if(res[i].C2 ==
 * '05'){seriesData6.push(res[i].DT);} } else {seriesData44.push(res[i].DT);}
 * resGen.push(res[i].C1_NM); resGen2.push(res[i].C2_NM); } let result2 =
 * resGen.filter((v, i) => resGen.indexOf(v) === i); let result3 =
 * resGen2.filter((v, i) => resGen2.indexOf(v) === i); result2.shift();
 * result3.shift(); seriesData1 = seriesData1.map(x => parseFloat(x));
 * seriesData2 = seriesData2.map(x => parseFloat(x)); seriesData3 =
 * seriesData3.map(x => parseFloat(x)); seriesData4 = seriesData4.map(x =>
 * parseFloat(x)); seriesData5 = seriesData5.map(x => parseFloat(x));
 * seriesData6 = seriesData6.map(x => parseFloat(x)); seriesData44 =
 * seriesData44.map(x => parseFloat(x)); seriesData1.shift();
 * seriesData2.shift(); seriesData3.shift(); seriesData4.shift();
 * seriesData5.shift(); seriesData6.shift(); var seriesData45 =
 * seriesData44.slice(78, 99); for(var i=0;i<result3.length;i++){ var j = i;
 * if(i>10){j = i-11;} if(tblId == 'DT_1FL_7007'){ $('#division4').append('<span
 * class="range"><span class="blet" style="background-color:'+colors[j]+'"></span>'+result3[i]+'</span>');
 * $('#division5').append('<span class="range"><span class="blet"
 * style="background-color:'+colors[j]+'"></span>'+result3[i]+'</span>'); } }
 * if(tblId == 'DT_1FL_7007'){ seriesDataObj3 = [{name:'',data: seriesData3}];
 * seriesDataObj4 = [{name: result3[0],data: seriesData1},{name:
 * result3[1],data: seriesData2}]; } else if(tblId == 'DT_1FL_7008'){
 * seriesDataObj3 = [{name:'',data: seriesData3}]; seriesDataObj4 = [{name:
 * '임금근로 일자리',data: seriesData3}]; seriesDataObj5 = [{name: '임금근로 일자리',data:
 * seriesData1}]; seriesDataObj6 = [{name: '임금근로 일자리',data: seriesData2}];
 * seriesDataObj7 = [{name: '임금근로 일자리',data: seriesData4}]; seriesDataObj8 =
 * [{name: '임금근로 일자리',data: seriesData5}]; seriesDataObj9 = [{name: '임금근로
 * 일자리',data: seriesData6}]; } else { seriesDataObj4 = [{name: '임금근로 일자리',data:
 * seriesData45,negativeColor:'#F15C80'}]; } if(tblId == 'DT_1FL_7002' || tblId ==
 * 'DT_1FL_7004' || tblId == 'DT_1FL_7005'){ var type = {renderTo:
 * 'dounutChart',type: 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily:
 * 'notoSans'}} } else if(tblId == 'DT_1FL_7001' || tblId == 'DT_1FL_7006' ||
 * tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ var type = {type:
 * 'column',style: {fontFamily: 'Noto Sans KR'}} } else { var type = {renderTo:
 * 'horiStackedBar',type: 'bar',style: {fontFamily: 'Noto Sans KR'}} }
 * 
 * if(tblId != 'DT_1FL_7002' && tblId != 'DT_1FL_7003' && tblId !=
 * 'DT_1FL_7006'){ if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008'){ charts2 =
 * Highcharts.chart('chart2', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: result2, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix2, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8} }, series: seriesDataObj3 }); }
 * charts4 = Highcharts.chart('chart4', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: result2, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix4,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8} }, series: seriesDataObj4 }); if(tblId == 'DT_1FL_7008'){
 * charts41 = Highcharts.chart('chart41', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: result2, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix4,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8} }, series: seriesDataObj5 });
 * 
 * charts42 = Highcharts.chart('chart42', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: result2, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix4,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8} }, series: seriesDataObj6 });
 * 
 * charts43 = Highcharts.chart('chart43', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: result2, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix4,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8} }, series: seriesDataObj7 });
 * 
 * charts44 = Highcharts.chart('chart44', { chart: type, credits: {enabled:
 * false}, exporting: {enabled: false}, title: {text: ''}, legend: {enabled:
 * false}, xAxis: [{ categories: result2, labels: {style: {color: '#494949',
 * fontSize: '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor:
 * '#cfcfcf', gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf',
 * tickPosition: 'inside' }], yAxis: [{ title: {text: ''}, labels: {enabled:
 * false} }], tooltip: { useHTML: true, enabled: true, borderRadius: 10,
 * backgroundColor: '#000000', borderWidth: 0, valueSuffix: valueSuffix4,
 * shadow: false, padding: 10, style: {fontSize :'14px', color: '#fff',
 * textAlign: 'center', fontWeight: '600'} }, plotOptions: { series:
 * {borderRadius: 8} }, series: seriesDataObj8 }); charts45 =
 * Highcharts.chart('chart45', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: result2, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix4, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {borderRadius: 8} }, series: seriesDataObj9 }); } }
 * 
 * var seriesData1 = []; var seriesData2 = []; var seriesData3 = []; var
 * seriesData4 = []; var resGen = []; for(var i=0;i<res.length;i++){ if(tblId ==
 * 'DT_1FL_7001'){ // C1 = 01:농업, 02:임업, 03:어업 if(res[i].C1 ==
 * '01'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '02'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '03'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} } else {
 * if(tblId == 'DT_1FL_7003'){ // C1 = 01:농업, 02:임업, 03:어업, C2 = 일자리 형태별,
 * 10:지속일자리, 20:대체일자리, 30:신규일자리, 40:소멸일자리 if(res[i].C1 == '01' && res[i].C2 ==
 * '10'){seriesData1.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '01' && res[i].C2 ==
 * '20'){seriesData2.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '01' && res[i].C2 ==
 * '30'){seriesData3.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '01' && res[i].C2 ==
 * '40'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '02' && res[i].C2 ==
 * '10'){seriesData1.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '02' && res[i].C2 ==
 * '20'){seriesData2.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '02' && res[i].C2 ==
 * '30'){seriesData3.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '02' && res[i].C2 ==
 * '40'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '03' && res[i].C2 ==
 * '10'){seriesData1.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '03' && res[i].C2 ==
 * '20'){seriesData2.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '03' && res[i].C2 ==
 * '30'){seriesData3.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 ==
 * '03' && res[i].C2 ==
 * '40'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} } else if(tblId ==
 * 'DT_1FL_7004'){ // C2 = 일자리 형태별, 10:지속일자리, 20:대체일자리, 30:신규일자리, 40:소멸일자리
 * if(res[i].C1 != '00' && res[i].C2 ==
 * '10'){seriesData1.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 !=
 * '00' && res[i].C2 ==
 * '20'){seriesData2.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 !=
 * '00' && res[i].C2 ==
 * '30'){seriesData3.push(res[i].DT);resGen.push(res[i].C1_NM);} if(res[i].C1 !=
 * '00' && res[i].C2 ==
 * '40'){seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} } else
 * {seriesData4.push(res[i].DT);resGen.push(res[i].C1_NM);} } } var
 * seriesDataObj = []; result2 = resGen.filter((v, i) => resGen.indexOf(v) ===
 * i); seriesData1 = seriesData1.map(x => parseFloat(x)); seriesData2 =
 * seriesData2.map(x => parseFloat(x)); seriesData3 = seriesData3.map(x =>
 * parseFloat(x)); seriesData4 = seriesData4.map(x => parseFloat(x)); if(tblId ==
 * 'DT_1FL_7002'){ var seriesDataA = seriesData4.slice(85, 105); var resultA =
 * result2.slice(85, 105); seriesDataObj = [{name:'임금근로 일자리', data:
 * seriesDataA}]; } else if(tblId == 'DT_1FL_7001'){ seriesDataObj =
 * [{name:'임금근로 일자리', data: seriesData4,negativeColor:'#F15C80'}]; } else
 * if(tblId == 'DT_1FL_7003'){ seriesDataObj = [{name: res[1].C2_NM,data:
 * seriesData1,marker: {radius: 5, symbol: 'circle', lineColor: '#F15C80',
 * fillColor: '#ffffff'}}, {name: res[2].C2_NM,data: seriesData2,marker:
 * {radius: 5, symbol: 'circle', lineColor: '#F7A35C', fillColor: '#ffffff'}},
 * {name: res[3].C2_NM,data: seriesData3,marker: {radius: 5, symbol: 'circle',
 * lineColor: '#F7A35C', fillColor: '#ffffff'}}, {name: res[4].C2_NM,data:
 * seriesData4,marker: {radius: 5, symbol: 'circle', lineColor: '#F7A35C',
 * fillColor: '#ffffff'}}]; } else if(tblId == 'DT_1FL_7004'){ var seriesDataA =
 * seriesData1.slice(85, 105); var seriesDataB = seriesData2.slice(85, 105); var
 * seriesDataC = seriesData3.slice(85, 105); var seriesDataD =
 * seriesData4.slice(85, 105); var resultA = result2.slice(85, 105);
 * seriesDataObj = [{name: res[1].C2_NM,data: seriesDataA,marker: {radius: 5,
 * symbol: 'circle', lineColor: '#F15C80', fillColor: '#ffffff'}}, {name:
 * res[2].C2_NM,data: seriesDataB,marker: {radius: 5, symbol: 'circle',
 * lineColor: '#F7A35C', fillColor: '#ffffff'}}, {name: res[3].C2_NM,data:
 * seriesDataC,marker: {radius: 5, symbol: 'circle', lineColor: '#F7A35C',
 * fillColor: '#ffffff'}}, {name: res[4].C2_NM,data: seriesDataD,marker:
 * {radius: 5, symbol: 'circle', lineColor: '#F7A35C', fillColor: '#ffffff'}}];
 * result2 = resultA; } if(tblId == 'DT_1FL_7007' || tblId == 'DT_1FL_7008' ||
 * tblId == 'DT_1FL_7005'){ var type = {renderTo: 'dounutChart',type:
 * 'pie',innerSize: '60%',marginTop: 5,style: {fontFamily: 'notoSans'}} } else
 * if(tblId == 'DT_1FL_7001' ||tblId == 'DT_1FL_7002' || tblId ==
 * 'DT_1FL_7006'){ var type = {type: 'column',style: {fontFamily: 'Noto Sans
 * KR'}} } else { var type = {renderTo: 'horiStackedBar',type: 'bar',style:
 * {fontFamily: 'Noto Sans KR'}} var marker = {stacking: 'normal', borderRadius:
 * 8} } if(tblId == 'DT_1FL_7003'){num = 30;} if(tblId == 'DT_1FL_7001' || tblId ==
 * 'DT_1FL_7003' || tblId == 'DT_1FL_7004'){ charts6 =
 * Highcharts.chart('chart6', { chart: type, credits: {enabled: false},
 * exporting: {enabled: false}, title: {text: ''}, legend: {enabled: false},
 * xAxis: [{ categories: result2, labels: {style: {color: '#494949', fontSize:
 * '10px', fontWeight: 'bold', letterSpacing: '0px'}}, lineColor: '#cfcfcf',
 * gridLineWidth: 0, tickWidth: 0, tickColor: '#cfcfcf', tickPosition: 'inside'
 * }], yAxis: [{ title: {text: ''}, labels: {enabled: false} }], tooltip: {
 * useHTML: true, enabled: true, borderRadius: 10, backgroundColor: '#000000',
 * borderWidth: 0, valueSuffix: valueSuffix6, shadow: false, padding: 10, style:
 * {fontSize :'14px', color: '#fff', textAlign: 'center', fontWeight: '600'} },
 * plotOptions: { series: {pointWidth: num, borderRadius: 8}, bar: marker },
 * series: seriesDataObj }); } }); $administStatsMain.ui.loading(false); });
 * if(tblId == 'DT_1FL_7003' || tblId == 'DT_1FL_7010'){
 * $('#charttitle4').removeClass('flex-height-245');
 * $('#charttitle4').addClass('flex-height-500');
 * $('#chart4').css('height','390px');
 * $('#charttitle2').removeClass('flex-height-245');
 * $('#charttitle2').removeClass('flex-mgT-10');
 * $('#charttitle2').addClass('flex-height-500');
 * $('#chart6').css('height','390px');
 * $('#charttitle5').addClass('flex-width-830');
 * $('#chart2').css('width','785px'); $('#chart21').css('width','785px');
 * $('#chart22').css('width','785px'); $('#chart23').css('width','785px');
 * $('#chart24').css('width','785px'); $('#chart61').css('height','390px');
 * $('#chart62').css('height','390px'); $('#chart63').css('height','390px');
 * $('#chart65').css('height','390px'); } else if(tblId == 'DT_1FL_7005' ||
 * tblId == 'DT_1FL_7006'){ $('#charttitle4').removeClass('flex-height-500');
 * $('#charttitle4').addClass('flex-height-245');
 * $('#chart4').css('height','140px');
 * $('#charttitle2').removeClass('flex-height-500');
 * $('#charttitle2').addClass('flex-mgT-10');
 * $('#charttitle2').addClass('flex-height-245');
 * $('#chart6').css('height','140px');
 * $('#charttitle5').removeClass('flex-width-830');
 * $('#chart2').css('width','390px'); $('#chart21').css('width','390px');
 * $('#chart22').css('width','390px'); $('#chart23').css('width','390px');
 * $('#chart24').css('width','390px'); $('#chart61').css('height','140px');
 * $('#chart62').css('height','140px'); $('#chart63').css('height','140px');
 * $('#chart65').css('height','140px'); } else {
 * $('#charttitle4').removeClass('flex-height-245');
 * $('#charttitle4').addClass('flex-height-500');
 * $('#chart4').css('height','390px');
 * $('#charttitle2').removeClass('flex-height-500');
 * $('#charttitle2').addClass('flex-mgT-10');
 * $('#charttitle2').addClass('flex-height-245');
 * $('#chart6').css('height','140px');
 * $('#charttitle5').removeClass('flex-width-830');
 * $('#chart2').css('width','390px'); $('#chart21').css('width','390px');
 * $('#chart22').css('width','390px'); $('#chart23').css('width','390px');
 * $('#chart24').css('width','390px'); $('#chart61').css('height','140px');
 * $('#chart62').css('height','140px'); $('#chart63').css('height','140px');
 * $('#chart65').css('height','140px'); } if(tblId == 'DT_1FL_7002'){
 * $('#division4').css('width','600px'); } if(tblId == 'DT_1FL_7004'){
 * $('#division5').css('width','818px'); } if(tblId == 'DT_1FL_7007' || tblId ==
 * 'DT_1FL_7008'){ $('#division6').css('width','818px'); } //차트 이미지 다운로드
 * $('#chartBtn1').click(function(){charts1.exportChart();});
 * $('#chartBtn2').click(function(){ for(var i=0;i<$('.tabArea
 * .tabBox').length;i++){ if($('.tabArea .tabBox.on div')[i].id ==
 * 'chart2'){charts2.exportChart();} if($('.tabArea .tabBox.on div')[i].id ==
 * 'chart21'){charts21.exportChart();} if($('.tabArea .tabBox.on div')[i].id ==
 * 'chart22'){charts22.exportChart();} if($('.tabArea .tabBox.on div')[i].id ==
 * 'chart23'){charts23.exportChart();} if($('.tabArea .tabBox.on div')[i].id ==
 * 'chart24'){charts24.exportChart();} } }); $('#chartBtn3').click(function(){
 * for(var i=0;i<$('.tabArea1 .tabBox').length;i++){ if($('.tabArea1 .tabBox.on
 * div')[i].id == 'chart3'){charts3.exportChart();} if($('.tabArea1 .tabBox.on
 * div')[i].id == 'chart31'){charts31.exportChart();} if($('.tabArea1 .tabBox.on
 * div')[i].id == 'chart32'){charts32.exportChart();} } });
 * $('#chartBtn4').click(function(){ for(var i=0;i<$('.tabArea0
 * .tabBox').length;i++){ if($('.tabArea0 .tabBox.on div')[i].id ==
 * 'chart4'){charts4.exportChart();} if($('.tabArea0 .tabBox.on div')[i].id ==
 * 'chart41'){charts41.exportChart();} if($('.tabArea0 .tabBox.on div')[i].id ==
 * 'chart42'){charts42.exportChart();} if($('.tabArea0 .tabBox.on div')[i].id ==
 * 'chart43'){charts43.exportChart();} if($('.tabArea0 .tabBox.on div')[i].id ==
 * 'chart44'){charts44.exportChart();} if($('.tabArea0 .tabBox.on div')[i].id ==
 * 'chart45'){charts45.exportChart();} } }); $('#chartBtn5').click(function(){
 * for(var i=0;i<$('.tabArea2 .tabBox').length;i++){ if($('.tabArea2 .tabBox.on
 * div')[i].id == 'chart5'){charts5.exportChart();} if($('.tabArea2 .tabBox.on
 * div')[i].id == 'chart51'){charts51.exportChart();} if($('.tabArea2 .tabBox.on
 * div')[i].id == 'chart52'){charts52.exportChart();} if($('.tabArea2 .tabBox.on
 * div')[i].id == 'chart53'){charts53.exportChart();} if($('.tabArea2 .tabBox.on
 * div')[i].id == 'chart54'){charts54.exportChart();} if($('.tabArea2 .tabBox.on
 * div')[i].id == 'chart55'){charts55.exportChart();} } });
 * $('#chartBtn6').click(function(){ for(var i=0;i<$('.tabArea3
 * .tabBox').length;i++){ if($('.tabArea3 .tabBox.on div')[i].id ==
 * 'chart6'){charts6.exportChart();} if($('.tabArea3 .tabBox.on div')[i].id ==
 * 'chart61'){charts61.exportChart();} if($('.tabArea3 .tabBox.on div')[i].id ==
 * 'chart62'){charts62.exportChart();} if($('.tabArea3 .tabBox.on div')[i].id ==
 * 'chart63'){charts63.exportChart();} if($('.tabArea3 .tabBox.on div')[i].id ==
 * 'chart64'){charts64.exportChart();} if($('.tabArea3 .tabBox.on div')[i].id ==
 * 'chart65'){charts65.exportChart();} } }); $('#chartBtn7').click(function(){
 * for(var i=0;i<$('.tabArea4 .tabBox').length;i++){ if($('.tabArea4 .tabBox.on
 * div')[i].id == 'chart7'){charts7.exportChart();} if($('.tabArea4 .tabBox.on
 * div')[i].id == 'chart71'){charts71.exportChart();} if($('.tabArea4 .tabBox.on
 * div')[i].id == 'chart72'){charts72.exportChart();} } }); }
 */
