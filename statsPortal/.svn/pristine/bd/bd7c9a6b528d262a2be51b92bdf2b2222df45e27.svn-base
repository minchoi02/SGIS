package kostat.sop.ServiceAPI.lvs.service.Impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

import egovframework.rte.fdl.cmmn.EgovAbstractServiceImpl;
import kostat.sop.ServiceAPI.lvs.mapper.LvsStatsMapper;
import kostat.sop.ServiceAPI.lvs.service.LvsStatsService;
import kostat.sop.ServiceAPI.lvs.vo.LvsVO;
import kostat.sop.ServiceAPI.sbr.mapper.SbrStatsMapper;
import kostat.sop.ServiceAPI.sbr.service.SbrStatsService;
import kostat.sop.ServiceAPI.sbr.vo.SbrVo;

@Service("lvsStatsService")
public class LvsStatsServiceImpl  extends EgovAbstractServiceImpl implements LvsStatsService {
	
	@Resource( name = "lvsStatsMapper" )
	private LvsStatsMapper lvsStatsMapper;
	

	@Override
	public List<Map<String, Object>> selectMainDataList(LvsVO vo) throws Exception {
		// TODO Auto-generated method stub
		System.out.println(vo.toString());
		
		List<Map<String, Object>> censusIndexList = lvsStatsMapper.selectCensusIndex(vo) ;
		
		
		List<Map<String, Object>> resultList = new ArrayList<>();
		Map<String, Object> result  = new HashMap<String,Object>();
		Map<String, Object> subResult  = new HashMap<String,Object>();
		
		subResult.put("censusIndex", censusIndexList);   //센서스 데이터   //기타지표도 더 넣어야 함.
		setData1(vo,subResult);		//step1 총인구데이터
		setData2(vo,subResult);		//step2 총가구데이터	
		
				
		result.put(vo.getRegionCd(), subResult);
		result.put("errMsg", "Success");
		result.put("errCd", "0");
		
		resultList.add(result);
		return  resultList ;
	}
	
	//총인구데이터 세팅
	private void setData1(LvsVO vo, Map<String, Object> subResult) {
		List<Map<String, Object>> list = lvsStatsMapper.selectTotPpltn(vo) ;
		List<Map<String, Object>> subList = lvsStatsMapper.selectTotPpltnYear(vo) ;
		
		if (list.size() >0) {
			Map<String, Object> data = list.get(0);
			Map<String, Object> data_year = new HashMap<String,Object>();
			
			ArrayList<String> yearList = new ArrayList<>();  // 지표리스트
			ArrayList<Integer> title1_data = new ArrayList<>();  //남자데이터			
			ArrayList<Integer> title2_data = new ArrayList<>();  //여자데이터
			ArrayList<Integer> tot_data = new ArrayList<>();  //합계데이터
			String key1 = "";
			String key2 = "";			
			
			for(int i=0; i<subList.size(); i++) {
				Map<String, Object> row = subList.get(i);
				yearList.add((String) row.get("year"));
				
				title1_data.add(Integer.parseInt(String.valueOf(row.get("val1"))));
				title2_data.add(Integer.parseInt(String.valueOf(row.get("val2"))));
				tot_data.add(Integer.parseInt(String.valueOf(row.get("val"))));
				key1 = (String)row.get("key1");
				key1 = (String)row.get("key2");				
			}
			
			data_year.put("title1", key1) ;
			data_year.put("title2", key2) ;
			data_year.put("year", yearList) ;			
			data_year.put("title1_data", title1_data) ;
			data_year.put("title2_data", title2_data) ;
			data_year.put("tot_data", tot_data) ;
			
			data.put("yearData", data_year) ;
			subResult.put("tot_ppltn", data);
			
		}
	}
	
	//총가구데이터 세팅
	private void setData2(LvsVO vo, Map<String, Object> subResult) {
		List<Map<String, Object>> list = lvsStatsMapper.selectTotFmly(vo) ;
		List<Map<String, Object>> subList = lvsStatsMapper.selectTotFmlyYear(vo) ;
		
		if (list.size() >0) {
			Map<String, Object> data = list.get(0);
			Map<String, Object> data_year = new HashMap<String,Object>();
			
			ArrayList<String> yearList = new ArrayList<>();  // 지표리스트
			ArrayList<Integer> tot_data = new ArrayList<>();  //합계데이터
			
			for(int i=0; i<subList.size(); i++) {
				Map<String, Object> row = subList.get(i);
				yearList.add((String) row.get("year"));
				tot_data.add(Integer.parseInt(String.valueOf(row.get("val"))));
			}
			
			data_year.put("year", yearList) ;			
			data_year.put("tot_data", tot_data) ;
			
			data.put("yearData", data_year) ;
			subResult.put("tot_family", data);
		}
	}
	
  /***추천데이터**/
	@Override
	public List<Map<String, Object>> selectRecDataList(LvsVO vo) throws Exception {
		// TODO Auto-generated method stub
		System.out.println(vo.toString());
		
		List<Map<String, Object>> censusIndexList = lvsStatsMapper.selectCensusIndex(vo) ;		
		List<Map<String, Object>> resultList = new ArrayList<>();
		Map<String, Object> result  = new HashMap<String,Object>();
		Map<String, Object> subResult  = new HashMap<String,Object>();
		Map<String, Object> kindResult  = new HashMap<String,Object>();		
		
		
		subResult.put("censusIndex", censusIndexList);   //센서스 데이터   //기타지표도 더 넣어야 함.
		
		setRecData1(vo,subResult);		//step1 총인구데이터
		//setRecData2(vo,subResult);		//step2 총가구데이터
		kindResult.put(vo.getBoard2Kind(), subResult);		
		result.put(vo.getRegionCd(), kindResult);
		result.put("errMsg", "Success");
		result.put("errCd", "0");
		
		resultList.add(result);
		return  resultList ;
	}
	
	//총가구데이터 세팅
	private void setRecData1(LvsVO vo, Map<String, Object> subResult) {
		List<Map<String, Object>> list = lvsStatsMapper.selectRecIndex_tot_ppltn(vo) ;
		List<Map<String, Object>> subList = lvsStatsMapper.selectCensusRecIndexYear(vo) ;		
		List<Map<String, Object>> subList2 = lvsStatsMapper.selectRecIndex_tot_ppltn_region(vo) ;
		
		if (list.size() >0) {
			Map<String, Object> data = list.get(0);
			Map<String, Object> data_year = new HashMap<String,Object>();
			
			ArrayList<String> yearList = new ArrayList<>();  // 지표리스트
			ArrayList<Integer> tot_data = new ArrayList<>();  //합계데이터
			
			for(int i=0; i<subList.size(); i++) {
				Map<String, Object> row = subList.get(i);
				yearList.add((String) row.get("base_year"));
				tot_data.add(Integer.parseInt(String.valueOf(row.get("tot_ppltn"))));
			}
			
			data_year.put("category", yearList) ;			
			data_year.put("data", tot_data) ;
			data_year.put("title", "총인구") ;
			data.put("yearData", data_year) ;			
			
			ArrayList<String> regionList = new ArrayList<>();  // 지표리스트
			ArrayList<Integer> region_data = new ArrayList<>();  //합계데이터
			
			for(int i=0; i<subList2.size(); i++) {
				Map<String, Object> row = subList2.get(i);
				regionList.add((String) row.get("name"));
				region_data.add(Integer.parseInt(String.valueOf(row.get("val"))));
			}
			
			data.put("category", regionList) ;
			data.put("chartData", region_data) ;			

			subResult.put("tot_ppltn", data);
		}
	}
	
	
}
