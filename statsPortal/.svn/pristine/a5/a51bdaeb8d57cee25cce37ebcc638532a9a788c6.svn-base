package kostat.sop.ServiceAPI.sbr.service.Impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.exceptions.PersistenceException;
import org.springframework.security.core.authority.mapping.MappableAttributesRetriever;
import org.springframework.stereotype.Service;

import com.neighborsystem.durian.exception.NotSupportFormatException;

import egovframework.rte.fdl.cmmn.EgovAbstractServiceImpl;
import kostat.sop.ServiceAPI.api.catchmentArea.ServiceAreaBSCA;
import kostat.sop.ServiceAPI.common.controller.Properties;
import kostat.sop.ServiceAPI.common.util.StringUtil;
import kostat.sop.ServiceAPI.exception.ApiException;
import kostat.sop.ServiceAPI.exception.DurianSQLException;
import kostat.sop.ServiceAPI.exception.NoResultException;
import kostat.sop.ServiceAPI.exception.ApiException.COMM_ERR_CODE;
import kostat.sop.ServiceAPI.sbr.mapper.SbrStatsMapper;
import kostat.sop.ServiceAPI.sbr.service.SbrStatsService;
import kostat.sop.ServiceAPI.sbr.vo.SbrVo;

@Service("sbrStatsService")
public class SbrStatsServiceImpl  extends EgovAbstractServiceImpl implements SbrStatsService {
	
	@Resource( name = "SbrStatsMapper" )
	private SbrStatsMapper sbrStatsMapper;

	@Override
	public List<Map<String, Object>> selectAllCensusThemeInfo() throws Exception {
		List<Map<String, Object>> bigList = selectCensusBigThemeInfo();
		
		for(int i = 0 ; i < bigList.size() ; i++) {
			//System.out.println(bigList.get(i));
			Map<String, Object> param = bigList.get(i);
			List<Map<String, Object>> smallList = selectCensusSmallThemeInfo((String)param.get("b_theme_cd"));
			bigList.get(i).put("s_theme_list", smallList);
		}
		
		return bigList;
	}
	
	
	public List<Map<String, Object>> selectCensusBigThemeInfo() {
		return sbrStatsMapper.selectCensusBigThemeInfo();
	}
	
	public List<Map<String, Object>> selectCensusSmallThemeInfo(String b_theme_cd) {
		return sbrStatsMapper.selectCensusSmallThemeInfo(b_theme_cd);
	}


	@Override
	public String getDdata() throws Exception {
		return sbrStatsMapper.selectTestData();
	}

	@Override
	public List<Map<String, Object>> getCodeList(SbrVo sbrVo) throws Exception {
		return sbrStatsMapper.selectCodeList(sbrVo);
	}
	
	

	@Override
	public Map<String, Object> getActiveCompanyCount(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		return sbrStatsMapper.selectActiveCompanyCount(sbrVo);
	}

	// 종합분석 - 업종분석 - 계폐업현황
	@Override
	public List<Map<String, String>> getOpenCloseCompanyCount() throws Exception {
		// TODO Auto-generated method stub
		
		return sbrStatsMapper.selectOpenCloseCompanyCount();
	}


	@Override
	public List getBizCodeList() throws Exception {
		return sbrStatsMapper.selectBizCodeList();
	}

	
	@Override
	public List getSbrRankListInfo(SbrVo sbrVo) throws Exception {
		
		
		sbrVo = checkData(sbrVo);
		sbrVo = getBordCd(sbrVo);
		
		List data = null;
		
		int b_year = Integer.parseInt(sbrVo.getYear())-1;
		sbrVo.setB_year(b_year+"");
		
		
		if(sbrVo.getBord_type().equals("11") || sbrVo.getBord_type().equals("12") || sbrVo.getBord_type().equals("13") ) {
			if(sbrVo.getCategory().equals("2")) {
				sbrVo.setBord_type("12");
			}
			data = sbrStatsMapper.selectRanklistInfo(sbrVo);
		}else {
			data = sbrStatsMapper.selectRanklistInfo2(sbrVo);
		}
		//data = sbrStatsMapper.selectRanklistInfo(sbrVo);
		
		return data;
	}
	
	
	private SbrVo getBordCd(SbrVo sbrVo) {
		String bordCd = sbrVo.getAdm_cd();
		if(bordCd.length() >= 2) sbrVo.setSido_cd(bordCd.substring(0,2));
		if(bordCd.length()>2) sbrVo.setSigungu_cd(bordCd.substring(2,5));
		if(bordCd.length()>5) {
				if(bordCd.length() == 7)            sbrVo.setDong_cd(bordCd.substring(5,7));
				else if(bordCd.length() == 8)       sbrVo.setDong_cd(bordCd.substring(5,8));
		}
			
		return sbrVo;
	}
	
	private SbrVo checkData(SbrVo sbrVo) {
		if( sbrVo.getBiz_cd() == null || sbrVo.getBiz_cd().equals(""))sbrVo.setBiz_cd("999"); 
		
		if( sbrVo.getKisc_cd_1() == null || sbrVo.getKisc_cd_1().equals(""))sbrVo.setKisc_cd_1("0");
		if( sbrVo.getKisc_cd_2() == null || sbrVo.getKisc_cd_2().equals(""))sbrVo.setKisc_cd_2("00");
		
		
		if(sbrVo.getBord_type() != null && sbrVo.getBord_type().equals("1")) {
		  int zoom  = Integer.parseInt(sbrVo.getZoom());
			
		  if(zoom < 4) {
			  sbrVo.setBord_type(sbrVo.getBord_type()+"1");
		  }else if(zoom < 7){
			  sbrVo.setBord_type(sbrVo.getBord_type()+"2");
		  }else{
			  sbrVo.setBord_type(sbrVo.getBord_type()+"3");
		  }
		}else{
			sbrVo.setBord_type(sbrVo.getBord_type()+"0");
		}
		
		if(sbrVo.getOptionList() != null && sbrVo.getOptionList().size() >0 ) {
			
			String optionValue = "";
			
			for(int i=0; i< sbrVo.getOptionList().size();i++) {
				optionValue = optionValue + "'"+(String) sbrVo.getOptionList().get(i)+"'"+",";
			}
			optionValue = optionValue.substring(0,optionValue.length()-1);
			sbrVo.setCnd_cd(optionValue);
		}else {
		   sbrVo.setCnd_cd("999");
		   List list = new ArrayList<String>();
		   list.add("999");
		   sbrVo.setOptionList(list);
		   //sbrVo.getOptionList().addAll(0, "999");
		}
		
		//if( sbrVo.getCnd_cd() == null || sbrVo.getCnd_cd().equals(""))sbrVo.setCnd_cd("999");
		
		return sbrVo;
	}
	



	@Override
	public List<?> getSbrCompanyInfoList(SbrVo sbrVo) throws Exception {

		
		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		
			
		for(int i = (year-4) ;i <= year ; i++) {
			
			if(i <= 2005 && flag1 == true) {
				list.add("2005");
				flag1 = false;
			}else if(i <= 2010 && flag2 == true) {
				list.add("2010");
				flag2 = false;
			}else {
				list.add(i+"");
			}
		}
			
		if(list.size() <=0) list.add(year+"");
		
		sbrVo.setYear_list(list);
		
		return sbrStatsMapper.selectSbrCompanyInfoList(sbrVo);
	}


	@Override
	public List<Map<String, String>> getGrowthChart(SbrVo sbrVo) throws Exception {
		
		if( sbrVo.getBiz_cd() == null || sbrVo.getBiz_cd().equals(""))sbrVo.setBiz_cd("1");
		sbrVo = checkData(sbrVo);
		
		return sbrStatsMapper.selectSbrGrowthList(sbrVo);
	}


	@Override
	public Map<String, String> getAvgData(SbrVo sbrVo) throws Exception {
		
		sbrVo = checkData(sbrVo);
		return sbrStatsMapper.selectSbrAvgData(sbrVo);
	}


	@Override
	public Map<String, String> getCompanyAnalysis(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		
		int b_year = Integer.parseInt(sbrVo.getYear())-1;
		sbrVo.setB_year(b_year+"");
		
		return sbrStatsMapper.selectCompanyAnalysis(sbrVo);
	}


	@Override
	public List<Map<String, String>> getCompanyMain(SbrVo sbrVo) throws Exception {
		sbrVo = getBordCd(sbrVo);
		return sbrStatsMapper.selectCompanyMainList(sbrVo);
	}


	@Override
	public List<Map<String, String>> getAreaDataList(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		return sbrStatsMapper.selectAreaDataList(sbrVo);
	}

	@Override
	public List innersearchpopulationForBorough(SbrVo sbrVo) throws Exception {
		
		sbrVo = getBordCd(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		
		if(sbrVo.getIsOne().equals("Y")) {
			
			for(int i = (year-4) ;i <= year ; i++) {
				
				if(i <= 2005 && flag1 == true) {
					list.add("2005");
					flag1 = false;
				}else if(i <= 2010 && flag2 == true) {
					list.add("2010");
					flag2 = false;
				}else {
					list.add(i+"");
				}
			}
			
		}else {
			list.add(year+"");
		}
		
		System.out.println(sbrVo.getIsOne());
		System.out.println(list.toString());
		
		if(list.size() <=0) list.add(year+"");
		
		sbrVo.setYear_list(list);
		if(sbrVo.getAdm_cd().length()<7)return sbrStatsMapper.innersearchpopulationForBorough(sbrVo);
		else                            return sbrStatsMapper.innersearchpopulationForBoroughEmd(sbrVo);
	}

	
	private Map sigenlKindList = null; 
	private List sigenlComList = null;
	private List sigenlBizList = null;
	private List sigenlOpenColseList = null;
	private List sigenlYmageList = null;
	private List sigenlLndList = null;
	private String bizCod1= "";
	private String bizCod2= "";
	
	
	@Override
	public Map getRegionSignalDataList(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		
		sigenlKindList = new HashMap<String,String>(); 
		sigenlComList = new ArrayList<String>();
		sigenlBizList = new ArrayList<String>();
		sigenlOpenColseList = new ArrayList<String>();
		sigenlYmageList = new ArrayList<String>();
		sigenlLndList = new ArrayList<String>();
		bizCod1 = "";
		bizCod2 = "";
		
		int year = Integer.parseInt(sbrVo.getYear());
		List<String> list = new ArrayList<String>();
		
		for(int i = (year-3) ;i <= year ; i++) {
			list.add(i+"");
		}
		sbrVo.setYear_list(list);
		
		//토지
		sbrVo.setSelectColumn("lnd");
		List landData = sbrStatsMapper.selectSimilarAreaList(sbrVo);
		getSignalData(landData,sbrVo,"lnd");
		System.out.println("토지정보");
		System.out.println(landData.toString());
		
		sbrVo.setSelectColumn("ymage");
		List ymageData = sbrStatsMapper.selectSimilarAreaList(sbrVo);
		getSignalData(ymageData,sbrVo,"ymage");
		System.out.println("청장년정보");
		System.out.println(ymageData.toString());
		
		List openCloseData = sbrStatsMapper.selectBizOpenClose(sbrVo);
		getSignalData(openCloseData,sbrVo,"openColse");
		System.out.println("개폐업정보년정보");
		System.out.println(openCloseData.toString());
		
		List bizData = sbrStatsMapper.selectTrenBiz(sbrVo);
		getSignalData(bizData,sbrVo,"biz");
		System.out.println("대세업종 정보");
		System.out.println(bizData.toString());
		
		List comData = sbrStatsMapper.selectRegionSignalDataList(sbrVo);
		getSignalData(comData,sbrVo,"com");
		System.out.println("100대기업");
		System.out.println(comData.toString());
		
		Map reslutMap = new HashMap<String,Object>();
		reslutMap.put("lnd", landData);
		reslutMap.put("ymage", ymageData);
		reslutMap.put("openClose", openCloseData);
		reslutMap.put("biz", bizData);
		reslutMap.put("com", comData);
		
		sbrVo.setComPanyType((String)sigenlKindList.get("com"));
		sbrVo.setLndType((String)sigenlKindList.get("lnd"));
		sbrVo.setYmageType((String)sigenlKindList.get("ymage"));
		sbrVo.setOpenCloseType((String)sigenlKindList.get("openColse"));
		sbrVo.setBizType((String)sigenlKindList.get("biz"));
		sbrVo.setSignelBizCode1(bizCod1);
		sbrVo.setSignelBizCode2(bizCod2);
		
		
		//지역 시그널 서브메뉴 -- 100대기업 클릭시 리스트
		sbrVo.setSignelList(sigenlComList);
		sbrVo.setSignelOder("com");
		List comDataList = sbrStatsMapper.selectResultSignal(sbrVo);
		reslutMap.put("comListData", comDataList);
		
		//지역 시그널 서브메뉴 -- 토지공시지가		
		sbrVo.setSignelList(sigenlLndList);
		sbrVo.setSignelOder("lnd");
		List lndDataList = sbrStatsMapper.selectResultSignal(sbrVo);
		reslutMap.put("lndListData", lndDataList);
		
		//지역 시그널 서브메뉴 -- 청장년		
		sbrVo.setSignelList(sigenlYmageList);
		sbrVo.setSignelOder("ymage");
		List ymageDataList = sbrStatsMapper.selectResultSignal(sbrVo);
		reslutMap.put("ymageListData", ymageDataList);
		
		//지역 시그널 서브메뉴 -- 대세업종	
		sbrVo.setSignelList(sigenlBizList);
		sbrVo.setSignelOder("biz");
		List bizDataList = sbrStatsMapper.selectResultSignal(sbrVo);
		reslutMap.put("bizListData", bizDataList);
		
		//지역 시그널 서브메뉴 -- 개폐업
		sbrVo.setSignelList(sigenlOpenColseList);
		sbrVo.setSignelOder("openClose");
		List openColseDataList = sbrStatsMapper.selectResultSignal(sbrVo);
		reslutMap.put("openColseListData", openColseDataList);		
		
		
		return reslutMap;
	}

	private void getSignalData(List result,SbrVo sbrVo,String typ) {
		
		for (Object object : result) {
			Map map = (Map) object;
			if(map.get("bord_cd").equals(sbrVo.getAdm_cd())){
				sigenlKindList.put(typ, map.get("base_key"));
			}else {
				
				if(typ.equals("com")) {
					sigenlComList.add((String)map.get("bord_cd"));
				}else if(typ.equals("biz")) {
					sigenlBizList.add((String)map.get("bord_cd"));
					bizCod1 = (String)map.get("kisc_cd_1");
					bizCod2 = (String)map.get("kisc_cd_2");
				}else if(typ.equals("ymage")) {
					sigenlYmageList.add((String)map.get("bord_cd"));
				}else if(typ.equals("openColse")) {
					sigenlOpenColseList.add((String)map.get("bord_cd"));
				}else if(typ.equals("lnd")) {
					sigenlLndList.add((String)map.get("bord_cd"));
				}
			}
			
		}
	}

	@Override
	public List getSbrAreaData(SbrVo sbrVo) throws Exception {
		
		sbrVo = checkData(sbrVo);
		sbrVo = getBordCd(sbrVo);
		List  result  = sbrStatsMapper.selectSbrAreaData(sbrVo);
		return result;
	}


	@Override
	public Map getRegionSignalDataChartData(SbrVo sbrVo) throws Exception {
		
		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		
		for(int i = (year-5) ;i <= year ; i++) {
			
			if(i <= 2005) {
				if(flag1 == true)list.add("2005");
				flag1 = false;
			}else if(i <= 2010) {
				if(flag2 == true)list.add("2010");
				flag2 = false;
			}else {
				list.add(i+"");
			}
		}
		
		sbrVo.setYear_list(list);
		
		List<Map<String, String>> dataList =  sbrStatsMapper.selectRegionSignalDataChartData(sbrVo);
		
		HashMap<String, Map<?, ?>> dumpMap = new HashMap<>();
		
		for (Map<String, String> map : dataList) {
			
			
			List<HashMap<?, ?>> dumList = new ArrayList<>();
			
			String key ="";
			key = map.get("col");
			map.remove("col");
			
			dumpMap.put(key, map);
		
		}
		System.out.println("결과");
		System.out.println(dumpMap.toString());
		
		return dumpMap;
	}


	@Override
	public Map getRegionSignalDataChartDataCompany(SbrVo sbrVo) throws Exception {

		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		
		for(int i = (year-5) ;i <= year ; i++) {
			
			if(i <= 2005) {
				if(flag1 == true)list.add("2005");
				flag1 = false;
			}else if(i <= 2010) {
				if(flag2 == true)list.add("2010");
				flag2 = false;
			}else {
				list.add(i+"");
			}
		}
		
		sbrVo.setYear_list(list);
		
		List<Map<String, String>> dataList =  sbrStatsMapper.selectRegionSignalDataChartDataCompany(sbrVo);
		
		HashMap<String, Map<?, ?>> dumpMap = new HashMap<>();
		
		for (Map<String, String> map : dataList) {
			
			
			List<HashMap<?, ?>> dumList = new ArrayList<>();
			
			String key ="";
			key = map.get("col");
			map.remove("col");
			
			dumpMap.put(key, map);
		
		}
		
		return dumpMap;
	}


	@Override
	public Map getRegionSignalDataChartDataCompanyPeople(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		return sbrStatsMapper.selectRegionSignalDataChartDataCompanyPeople(sbrVo);
	}


	@Override
	public Map getRegionSignalDataChartDataArea(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		
		for(int i = (year-5) ;i <= year ; i++) {
			
			if(i <= 2005) {
				if(flag1 == true)list.add("2005");
				flag1 = false;
			}else if(i <= 2010) {
				if(flag2 == true)list.add("2010");
				flag2 = false;
			}else {
				list.add(i+"");
			}
		}
		
		sbrVo.setYear_list(list);
		
		List<Map<String, String>> dataList =  sbrStatsMapper.selectRegionSignalDataChartDataArea(sbrVo);
		
		HashMap<String, Map<?, ?>> dumpMap = new HashMap<>();
		
		for (Map<String, String> map : dataList) {
			
			
			List<HashMap<?, ?>> dumList = new ArrayList<>();
			
			String key ="";
			key = map.get("col");
			map.remove("col");
			
			dumpMap.put(key, map);
		
		}
		
		return dumpMap;
	}


	@Override
	public List getsbrComPanyInfoList(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		return sbrStatsMapper.selectComPanyInfoList(sbrVo);
	}


	@Override
	public List household(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		
		sbrVo = getBordCd(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		if(sbrVo.getIsOne().equals("Y")) {
			for(int i = (year-5) ;i <= year ; i++) {
				
				if(i <= 2005) {
					if(flag1 == true)list.add("2005");
					flag1 = false;
				}else if(i <= 2014) {
					if(flag2 == true)list.add("2010");
					flag2 = false;
				}else if(i >= 2015) {
					list.add(i+"");
				}
			}
		}else {
			list.add(year+"");
		}
		
		System.out.println(list.toString());
		sbrVo.setYear_list(list);
		
		if(sbrVo.getAdm_cd().length()<7) return sbrStatsMapper.selecthousehold(sbrVo);
		else                             return sbrStatsMapper.selecthouseholdEmd(sbrVo);
	}


	@Override
	public List house(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		
		sbrVo = getBordCd(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		
		if(sbrVo.getIsOne().equals("Y")) {
			for(int i = (year-5) ;i <= year ; i++) {
				
				if(i <= 2005) {
					if(flag1 == true)list.add("2005");
					flag1 = false;
				}else if(i <= 2010) {
					if(flag2 == true)list.add("2010");
					flag2 = false;
				}else {
					list.add(i+"");
				}
			}
		}else {
			list.add(year+"");
		}
		
		sbrVo.setYear_list(list);
		
		if(sbrVo.getAdm_cd().length()<7)return sbrStatsMapper.seleHouse(sbrVo);
		else                            return sbrStatsMapper.seleHouseEmd(sbrVo);
		
	}


	@Override
	public List farmhousehold(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		sbrVo = getBordCd(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();

		int startYear = year-20;
		if(startYear < 2000) startYear = 2000;
		
		if(sbrVo.getIsOne().equals("Y")) {
			for(int i = startYear ;i <= year ; i= i+5) {
					list.add(i+"");
			}
		}else {
			list.add(year+"");
		}
		
		sbrVo.setYear_list(list);
		System.out.println(sbrVo.getOther_type());
		
		if(sbrVo.getOther_type().equals("1")) {
			return sbrStatsMapper.selectFarmhousehold(sbrVo);	
		}if(sbrVo.getOther_type().equals("2")) {
			System.out.println("22");
			return sbrStatsMapper.selectForestryhousehold(sbrVo);
			
		}else if(sbrVo.getOther_type().equals("3") || sbrVo.getOther_type().equals("4")){
			System.out.println("3344");
			return sbrStatsMapper.selectFisheryhousehold(sbrVo);
		}else{
			
			return sbrStatsMapper.selectFarmhousehold(sbrVo);
		}
		
		
	}


	@Override
	public List getsbrjobList(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		if(sbrVo.getBord_type().equals("1"))sbrVo = getBordCd(sbrVo);
		
		if(Integer.parseInt(sbrVo.getPageNumber())>0) {
			sbrVo.setStartNumber(sbrVo.getPageNumber());
			sbrVo.setEndNumber((Integer.parseInt(sbrVo.getPageNumber())+50)+"");
			//sbrVo.setEndNumber((Integer.parseInt(sbrVo.getPageNumber())+10)+"");
		}else {
			sbrVo.setStartNumber("0");
			sbrVo.setEndNumber("50");
		}
		
		if(!sbrVo.getBord_type().equals("1")) {
			Map<String, String> jobArearKey =  sbrStatsMapper.selectSbrAreaAdmCode(sbrVo);
			sbrVo.setBord_point(jobArearKey.get("arearpoint"));
		}
		
		return sbrStatsMapper.selectjobList(sbrVo);
	}


	@Override
	public Map getSbrAreaMax(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		sbrVo = getBordCd(sbrVo);
		return sbrStatsMapper.selectSbrAreaMax(sbrVo);
	}


	@Override
	public List<?> getSbrCompanyInfoListAll(SbrVo sbrVo) throws Exception {

		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		
		List<String> list = new ArrayList<String>();
		
		boolean flag1 = true;
		boolean flag2 = true;
		
			
		for(int i = (year-4) ;i <= year ; i++) {
			
			if(i <= 2005) {
				if(flag1 == true)list.add("2005");
				flag1 = false;
			}else if(i <= 2010) {
				if(flag2 == true)list.add("2010");
				flag2 = false;
			}else {
				list.add(i+"");
			}
		}
		
		if(list.size() <=0) list.add(year+"");
		
		sbrVo.setYear_list(list);
		
		return sbrStatsMapper.selectSbrCompanyInfoListAll(sbrVo);
	}

	@Override
	public Map<String, String> getSbrYouthCountSignal(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		List<String> list = new ArrayList<String>();
		
		final int MIN_YEAR = 4;

		for(int i = year;i > (year - MIN_YEAR); i--) {
			// year : 2015 ~ 2020
			list.add(String.valueOf(i));
		}
		
		sbrVo.setYear_list(list);
		
		
		if(list.size() > 3) {
			sbrVo.setB_year(list.get(1)); 
			sbrVo.setC_year(list.get(2));
			sbrVo.setD_year(list.get(3));
		}
	
		
		//청장년
		Map<String, String>resultData = sbrStatsMapper.selectSignalYouthPeopleCount(sbrVo);

		return resultData;
	}


	@Override
	public Map getleftDateTemp(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		
		
		Map temp = new HashMap<String,Object>();
		
		return temp;
	}
	
	
	private List<?> getLndAvgOlnlp(SbrVo sbrVo) throws Exception {
		
		return null;
	}


	@Override
	public List getSbrCompayRankList(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		
		sbrVo = checkData(sbrVo);
		int b_year = Integer.parseInt(sbrVo.getYear())-1;
		sbrVo.setB_year(b_year+"");
		
		return sbrStatsMapper.selectCompayRankList(sbrVo);
	}


	@Override
	public List getSbrArearDataInfo(SbrVo sbrVo) throws Exception {
		
		List cdList = sbrVo.getAdmCdList();
		List<String> cdList2 = new ArrayList<String>();
		
		for(int i=0; i < cdList.size();i++) {
			
			if(cdList.get(i).toString().length() < 8) {
				cdList2.add(cdList.get(i).toString()+"0");
			}else {
				cdList2.add(cdList.get(i).toString());
			}
			
		}
		
		sbrVo.setAdmCdList(cdList2);
		
		return sbrStatsMapper.selectArearDataInfo(sbrVo);
	}

	private void setSignalVo(SbrVo sbrVo) {
		// 1. base year 을 받아 -3 까지 year_list 추
		int baseYear = Integer.parseInt(sbrVo.getYear());
		List<String> yearList = new ArrayList<String>();
		for(int i = baseYear; i>= baseYear-3 ; i--) {
			yearList.add(String.valueOf(i));
		}
		sbrVo.setYear_list(yearList);
		
		if(yearList.size() > 3) {
			sbrVo.setB_year(yearList.get(1)); 
			sbrVo.setC_year(yearList.get(2));
			sbrVo.setD_year(yearList.get(3));
		}
		
		// 2. cnd_cd 는 무조건 999
		sbrVo.setCnd_cd("999");
		
		// 3. sido cd 에 따라서 bord_type 결정
		String bordCd = sbrVo.getAdm_cd();
		String bordType = sbrVo.getBord_type();
		
		System.out.println("bord_type, adm_cd : " + sbrVo.getBord_type() + sbrVo.getAdm_cd());	
		
		if(sbrVo.getBord_type().equals("1")) {
			if(bordCd.length() == 2) {
				bordType += "1";
			} else if(bordCd.length() == 5) {
				bordType += "2";
			} else if(bordCd.length() >= 7) {
				bordType += "3";
			} else {
				bordType += "0";
			}
			
		} else {
			bordType += "0";
		}
		sbrVo.setBord_type(bordType);
		
	}
	
	@Override
	public Map<String, Object> getSbrSignalTrendBiz(SbrVo sbrVo) throws Exception {
		
		setSignalVo(sbrVo);
		
		List<Map<String, Object>> trendBizList =  sbrStatsMapper.selectSignalTrendBiz(sbrVo);
		Map<String,Object> resultMap = new HashMap<String, Object>();
		
		if(trendBizList.size() > 0) {
			resultMap =  trendBizList.get(0);
		}
		
		return resultMap;
	}
	
	@Override
	public List getSbrBizDataList(SbrVo sbrVo) throws Exception {
		//sbrVo = checkData(sbrVo);
		return sbrStatsMapper.selectBizDataList(sbrVo);
	}
	
	@Override
	public List<Map<String, Object>> getSbrBizOpenClose(SbrVo sbrVo) throws Exception {
		checkData(sbrVo);
		System.out.println(
			String.format("SbrStatsServiceImpl -> getSbrBizOpenClose -> adm_cd : %s, year : %s, bord_type : %s"
			,sbrVo.getAdm_cd(), sbrVo.getYear(), sbrVo.getBord_type()
			)
		);
		
		List<Map<String, Object>> result = sbrStatsMapper.selectBizOpenClose(sbrVo);
		
		return result;
	}	
	
	@Override
	public Map<String, String> getSbrSignalYouthCount(SbrVo sbrVo) throws Exception {
		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		List<String> list = new ArrayList<String>();
		
		final int MIN_YEAR = 4;

		for(int i = year;i > (year - MIN_YEAR); i--) {
			// year : 2015 ~ 2020
			list.add(String.valueOf(i));
		}
		sbrVo.setYear_list(list);
		
		
		if(list.size() > 3) {
			sbrVo.setB_year(list.get(1)); 
			sbrVo.setC_year(list.get(2));
			sbrVo.setD_year(list.get(3));
		}
	
		//청장년
		Map<String, String>resultData = sbrStatsMapper.selectSignalYouthPeopleCount(sbrVo);

		return resultData;
	}
	
	@Override
	public Map<String, String> getSbrSignalLandPrice(SbrVo sbrVo) throws Exception {
		// TODO Auto-generated method stub
		sbrVo = checkData(sbrVo);
		
		int year = Integer.parseInt(sbrVo.getYear());
		List<String> list = new ArrayList<String>();
		
		final int MIN_YEAR = 4;

		for(int i = year;i > (year - MIN_YEAR); i--) {
			// year : 2015 ~ 2020
			list.add(String.valueOf(i));
		}
		System.out.println("");
		
		sbrVo.setYear_list(list);
		
		
		if(list.size() > 3) {
			sbrVo.setB_year(list.get(1)); 
			sbrVo.setC_year(list.get(2));
			sbrVo.setD_year(list.get(3));
		}
		
		return sbrStatsMapper.selectSignalLandPrice(sbrVo);
	}
	
	
	@Override
	public Map<String, Object> getSbrMaketInfo(SbrVo sbrVo) throws Exception {
		
		Map<String, Object> map  = sbrStatsMapper.selectMaketInfo(sbrVo);
		
		if(map == null || map.get("code").equals("")) {
			map = new HashMap<String, Object>();	
			map.put("msgCd", "-1");
			map.put("msg", "시장정보가 없습니다.");
		}else {
			map.put("msgCd", "0");
			map.put("msg", "");
		}
		
		return map;
	}


	@Override
	public List getBannerList() throws Exception {
		return sbrStatsMapper.selectBannerList();
	}


	@Override
	public List getSearchComPanyInfoList(SbrVo sbrVo) throws Exception {
		return sbrStatsMapper.selectSearchComPanyInfoList(sbrVo);
		
	}
}
